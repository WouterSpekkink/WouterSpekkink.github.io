<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-10-23T22:37:40+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">blank</title><subtitle>My personal website.
</subtitle><entry><title type="html">Retrieval augmentation with literature</title><link href="http://localhost:4000/blog/2023/retrieval-augmentation-with-literature/" rel="alternate" type="text/html" title="Retrieval augmentation with literature" /><published>2023-10-23T20:00:00+02:00</published><updated>2023-10-23T20:00:00+02:00</updated><id>http://localhost:4000/blog/2023/retrieval-augmentation-with-literature</id><content type="html" xml:base="http://localhost:4000/blog/2023/retrieval-augmentation-with-literature/"><![CDATA[<h2 id="intro">Intro</h2>
<p>In the summer, I started a series of posts on using the <a href="https://python.langchain.com/docs/get_started/introduction.html">LangChain</a> framework.
This is the second post in that series. 
In the <a href="/blog/2023/using-llms-with-retrieval-augmentation-through-langchain/">first post</a> I introduced the idea of retrieval augmentation and vector stores and I explained the Python scripts that I use to create and update vector stores.
In this post I go into the actual use of retrieval augmentation.
The example I focus on here is the use of retrieval augmentation to chat with OpenAI’s Large Language Models (LLMs) about the literature on my Zotero library.</p>

<h2 id="chainlit">Chainlit</h2>
<p>The initial LangChain tools that I built were simple command-line tools. 
I soon discovered a framework called <a href="https://github.com/Chainlit/chainlit">Chainlit</a>, which allows you to use you browser as an interface for your LangChain apps, and it comes with several other goodies.
To be able to follow along with the examples below, you will need to install the Chainlit Python module.
Chainlit is in development and future updates might break some of the things that I showcase in this post.
The version of Chainlit that I have installed at the time of writing this post is 0.7.1.</p>

<h2 id="a-short-recap">A short recap</h2>
<p>Without going into too much detail, a short recap of the idea of retrieval augmentation might come in useful.
Our goal is to chat with LLMs about the contents of the literature in our Zotero library.
This is useful for multiple things, such as quickly consulting our literature on concepts that we are interested and finding back the papers in which these concepts are described, but that we may have forgotten about.
Given that can have a conversation with an LLM about our literature and that the LLM to some extent memorizes what has been said before in the conversation, we can even chat with LLMs about the relationships between concepts.
I use this tool, for example, to quickly create notes on concepts that I can integrate in my writings. 
I also use it when preparing for teaching, for example to quickly compile lecture notes with additional background on the concepts and theories that I am teaching about.
We can do this with the help of retrieval augmentation.
When we ask a question, our question gets embedded, that is, it gets converted into a coordinate in a semantic space that we have populated with fragments of texts from the papers we wish to chat about.
These fragments are stored in our vector store (see <a href="/blog/2023/using-llms-with-retrieval-augmentation-through-langchain/">my previous post on this topic</a>).
Our tool retrieves fragments of text that have content that is semantically similar to our question. 
Our tool then includes these fragments of text as context in our question, allowing the LLM we interact with to use this knowledge to answer our question.</p>

<p>The script that I detail below assumes that you have already created a vectorstore that contains the literature from your Zotero library (again, see <a href="/blog/2023/using-llms-with-retrieval-augmentation-through-langchain/">my previous post on this topic</a>).</p>

<h2 id="folder-structure-and-files">Folder structure and files</h2>
<p>Let us start with the folder structure for our tool.
In our main folder, we create two subfolders:</p>
<ol>
  <li>answers</li>
  <li>vectorstore</li>
</ol>

<p>One thing that we can do with retrieval augmentation is to record the actual fragments of text that our tool retrieved, as well as details of the sources that these fragments were retrieved from. 
I find this extremely useful, because it allows us to have our tool cite its sources, so that we can double check its output.
To this end, I have my tool write log files in to the answers folder.
Whenever I start a new chat session, a new log file is created in which the tool records the questions I ask, the answers it gives and then the fragments of text that it used to come to this answer as well as the sources that these fragments are from.</p>

<p>The ‘vectorstore’ folder simply contains the vector store that contains our literature.</p>

<p>In the main folder we also have a few files:</p>
<ul>
  <li>ask_cl.py: The actual script that I detail below.
You can of course give this another name.</li>
  <li>constants.py: A Python file that just contains our API key (which we do not want to expose, because we do not want to share it with others)</li>
  <li>chainlit.md: This gets created automatically when you run a chaintlit app for the first time.
It is a simple readme file that is shown everytime you run your chainlit app and that you can of course adjust to your own needs and wants.</li>
</ul>

<p>You might have several other files in the folder, such as scripts that I described in my first post of this series.
However, the ones listed above are the only ones we really need to make the examples below work.</p>

<h2 id="my-script">My script</h2>
<h3 id="the-modules-that-we-import">The modules that we import</h3>
<p>Let us go over the main script now: the ask_cl.py script. 
We’ll first import all the modules that our tool will make use of.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">langchain.chains</span> <span class="kn">import</span> <span class="n">ConversationalRetrievalChain</span>
<span class="kn">from</span> <span class="n">langchain.memory</span> <span class="kn">import</span> <span class="n">ConversationBufferWindowMemory</span>
<span class="kn">from</span> <span class="n">langchain.document_transformers</span> <span class="kn">import</span> <span class="n">LongContextReorder</span><span class="p">,</span> <span class="n">EmbeddingsRedundantFilter</span>
<span class="kn">from</span> <span class="n">langchain.retrievers.document_compressors</span> <span class="kn">import</span> <span class="n">DocumentCompressorPipeline</span>
<span class="kn">from</span> <span class="n">langchain.retrievers</span> <span class="kn">import</span> <span class="n">ContextualCompressionRetriever</span>
<span class="kn">from</span> <span class="n">langchain.embeddings</span> <span class="kn">import</span> <span class="n">OpenAIEmbeddings</span>
<span class="kn">from</span> <span class="n">langchain.chat_models</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>
<span class="kn">from</span> <span class="n">langchain.llms</span> <span class="kn">import</span> <span class="n">OpenAI</span>
<span class="kn">import</span> <span class="n">openai</span>
<span class="kn">from</span> <span class="n">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">langchain.vectorstores</span> <span class="kn">import</span> <span class="n">FAISS</span>
<span class="kn">from</span> <span class="n">langchain.callbacks</span> <span class="kn">import</span> <span class="n">OpenAICallbackHandler</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">import</span> <span class="n">chainlit</span> <span class="k">as</span> <span class="n">cl</span>
<span class="kn">from</span> <span class="n">chainlit.input_widget</span> <span class="kn">import</span> <span class="n">Select</span><span class="p">,</span> <span class="n">Slider</span>
<span class="kn">import</span> <span class="n">textwrap</span>
<span class="kn">import</span> <span class="n">constants</span>
<span class="kn">from</span> <span class="n">langchain.prompts</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">ChatPromptTemplate</span><span class="p">,</span>
    <span class="n">PromptTemplate</span><span class="p">,</span>
    <span class="n">SystemMessagePromptTemplate</span><span class="p">,</span>
    <span class="n">AIMessagePromptTemplate</span><span class="p">,</span>
    <span class="n">HumanMessagePromptTemplate</span><span class="p">,</span>
<span class="p">)</span>
<span class="kn">from</span> <span class="n">langchain.schema</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">AIMessage</span><span class="p">,</span>
    <span class="n">HumanMessage</span><span class="p">,</span>
    <span class="n">SystemMessage</span>
<span class="p">)</span>
</code></pre></div></div>
<p>I will go through the various things that we import from top to bottom.</p>

<p>The <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> is a type of chain (imported from LangChain) that does most of the heavy lifting for us when it comes to retrieval augmentation.
We can include a vector store in this chain, which will be used to retrieve fragments of information that we want to include as context in our questions to the LLM.
There is also ‘RetrievalChain’ that does just that. 
What the <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> adds to this is a chat history, so that we can actually have a conversation with an LLM that then memorizes earliers parts of the conversation.
See the LangChain docs on the <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> <a href="https://python.langchain.com/docs/use_cases/question_answering/chat_vector_db">here</a>.</p>

<p>To enable an LLM to memorize our conversation, we also need a memory object that we include in our chain.
The <code class="language-plaintext highlighter-rouge">ConversationBufferWindowMemory</code> is one of several memory objects that langchain offers. 
We need one of those to store the chat history of our conversation, so that the LLM that we interact with has access to that history.
The <code class="language-plaintext highlighter-rouge">ConversationBufferWindowMemory</code> is a kind of sliding window memory that memorizes a limited part of the conversation (see the docs <a href="https://python.langchain.com/docs/modules/memory/types/buffer_window">here</a>).
This allows our tool to memorize the most recent interactions, without that memory getting too large for our LLM to handle (without exceeding the available context window of the model).</p>

<p>We also import various modules that include utilities that we use to process the fragments that our <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> retrieves. 
The background to the <code class="language-plaintext highlighter-rouge">LongContextReorder</code> object could be the topic of its own blog post. 
It goes back to a finding that is discussed in <a href="https://arxiv.org/abs//2307.03172">this paper</a>, which is that LLMs that are given a long context (basically the information included with the question), tend to get ‘lost in the middle’: They pay more attention to the information that is either in the beginning of the context, or at the end of the context, and information in the middle is not given as much consideration.
The <code class="language-plaintext highlighter-rouge">LongContextReorder</code> object helps us order the retrieved fragments such that the fragments that it considers to be most important tend to be at the beginning or at the end of the collection of retrieved fragments.
The <code class="language-plaintext highlighter-rouge">EmbeddingsRedundantFilter</code> filters out redundant fragments if we have multiple fragments that semantically are highly similar. 
Given that we have only a limited context window to work with, this object helps us to ensure that this context window is not filled with a lot of redundant information.
The <code class="language-plaintext highlighter-rouge">DocumentCompressorPipeline</code> is an object that allows us to combine these different types of filters in a pipeline.
The <code class="language-plaintext highlighter-rouge">ContextualCompressionRetriever</code> then allows us to integrate that pipeline in our retrieval chain.
It is the retriever that we will integrate into our <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code>.</p>

<p>To be able to access OpenAI’s chat models, we import the <code class="language-plaintext highlighter-rouge">ChatOpenAI</code> module from the LangChain framework.
We also need to use functions from the <code class="language-plaintext highlighter-rouge">OpenAI</code> module, so we import that as well.
Given that we are working with OpenAI models, we need to import the <code class="language-plaintext highlighter-rouge">openai</code> module from OpenAI itself too.
We then import the <code class="language-plaintext highlighter-rouge">constants</code> module, which is simply the other Python file in our main folder; the file in which we store our OpenAI API key.
The <code class="language-plaintext highlighter-rouge">dotenv</code> module allows us to set environment variables, which we use in our script to set our OpenAI API key as an environment variable.
We also need the <code class="language-plaintext highlighter-rouge">os</code> module to set our environment variable.</p>

<p>The literature that we wish to chat about is recorded in a <code class="language-plaintext highlighter-rouge">FAISS</code> vector store, so we’ll have to import the corresponding module to be able to use it.
We also need to import the <code class="language-plaintext highlighter-rouge">OpenAIEmbeddings</code> module because when we retrieve fragments from our vector stores, we need to indicate the embeddings model that we used to create the embeddings.</p>

<p>To be honest, I do not know a lot about callback handlers.
They are apparently functions that are executed in response to specific events or conditions in asynchronous or event-driven programs.
To the best of my knowledge, we need a callback handler because our Chainlit-powered app will make use of asynchronous programming.
In our case, we specifically need the <code class="language-plaintext highlighter-rouge">OpenAICallbackHandler</code>, so we import the corresponding module.</p>

<p>The <code class="language-plaintext highlighter-rouge">datetime</code> module allows us to get the current date and time, which we will use in the log files that we write to our answers folder for fact checking (see the section on folder structure above).</p>

<p>Since we are building a Chainlit-powered app, we also import the <code class="language-plaintext highlighter-rouge">chainlit</code> module.
We then import various input widgets from the <code class="language-plaintext highlighter-rouge">chainlit</code> module that allow us to set various settings for our app in the browser interface.
We will not be doing that much with these settings in this particular example, but in examples that I will discuss in future posts, the ability to change settings on the fly is important.</p>

<p>The remaining imports that we do are all related to <a href="https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/">prompt templates</a>.
As described in the LangChain documentation, prompt templates “are pre-defined recipes for generating prompts for language models”.
As you’ll see in the example below, it allows us to predefine a prompt for the LLMs that we interact with.
In the prompt template we can also include variables, which allows us ‘dynamically’ insert things in our prompt, such as the question that we asked and the context to that question that consists of the fragments of text we retrieve from our vector store.
Since our desire is to develop a chat app, we need to use templates that have been specifically designed for chat purposes.
These templates make use of various schemas that we also need to import.</p>

<h3 id="setting-things-up">Setting things up</h3>
<p>The remainder of the script consists of four chunks:</p>
<ol>
  <li>A chunk that is run when we start the app and in which we do some setup.</li>
  <li>A chunk that is run when we start a new chat (this does not have to mean that we restart the app).</li>
  <li>A chunk that is run when we update our chat settings (again, not something that we’ll discuss in detail here, but that we will discuss in more detail in a future post).</li>
  <li>A chunk that is run when we send a message to the LLM that we are chatting with.</li>
</ol>

<p>Let’s start with the setting up chunk:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cleanup function for source strings
</span><span class="k">def</span> <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
  <span class="sh">"""</span><span class="s">A function to clean up strings in the sources from unwanted symbols</span><span class="sh">"""</span>
  <span class="k">return</span> <span class="n">string</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">{</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\\</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">)</span>

<span class="c1"># Set OpenAI API Key
</span><span class="nf">load_dotenv</span><span class="p">()</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">constants</span><span class="p">.</span><span class="n">APIKEY</span>
<span class="n">openai</span><span class="p">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="n">constants</span><span class="p">.</span><span class="n">APIKEY</span> 

<span class="c1"># Load FAISS database
</span><span class="n">embeddings</span> <span class="o">=</span> <span class="nc">OpenAIEmbeddings</span><span class="p">()</span>
<span class="n">db</span> <span class="o">=</span> <span class="n">FAISS</span><span class="p">.</span><span class="nf">load_local</span><span class="p">(</span><span class="sh">"</span><span class="s">./vectorstore/</span><span class="sh">"</span><span class="p">,</span> <span class="n">embeddings</span><span class="p">)</span>

<span class="c1"># Set up callback handler
</span><span class="n">handler</span> <span class="o">=</span> <span class="nc">OpenAICallbackHandler</span><span class="p">()</span>

<span class="c1"># Set memory
</span><span class="n">memory</span> <span class="o">=</span> <span class="nc">ConversationBufferWindowMemory</span><span class="p">(</span><span class="n">memory_key</span><span class="o">=</span><span class="sh">"</span><span class="s">chat_history</span><span class="sh">"</span><span class="p">,</span> <span class="n">input_key</span><span class="o">=</span><span class="sh">'</span><span class="s">question</span><span class="sh">'</span><span class="p">,</span> <span class="n">output_key</span><span class="o">=</span><span class="sh">'</span><span class="s">answer</span><span class="sh">'</span><span class="p">,</span> <span class="n">return_messages</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>

<span class="c1"># Customize prompt
</span><span class="n">system_prompt_template</span> <span class="o">=</span> <span class="p">(</span>
  <span class="sh">'''</span><span class="s">
  You are a knowledgeable professor working in academia.
  Using the provided pieces of context, you answer the questions asked by the user.
  If you don</span><span class="sh">'</span><span class="s">t know the answer, just say that you don</span><span class="sh">'</span><span class="s">t know, don</span><span class="sh">'</span><span class="s">t try to make up an answer.

  </span><span class="sh">"""</span><span class="s">
  Context: {context}
  </span><span class="sh">"""</span><span class="s">

  Please try to give detailed answers and write your answers as an academic text, unless explicitly told otherwise.
  Use references to literature in your answer and include a bibliography for citations that you use.
  If you cannot provide appropriate references, tell me by the end of your answer.
 
  Format your answer as follows:
  One or multiple sentences that constitutes part of your answer (APA-style reference)
  The rest of your answer
  Bibliography:
  Bulleted bibliographical entries in APA-style
  </span><span class="sh">'''</span><span class="p">)</span>
  
<span class="n">system_prompt</span> <span class="o">=</span> <span class="nc">PromptTemplate</span><span class="p">(</span><span class="n">template</span><span class="o">=</span><span class="n">system_prompt_template</span><span class="p">,</span>
                               <span class="n">input_variables</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">context</span><span class="sh">"</span><span class="p">])</span>

<span class="n">system_message_prompt</span> <span class="o">=</span> <span class="nc">SystemMessagePromptTemplate</span><span class="p">(</span><span class="n">prompt</span> <span class="o">=</span> <span class="n">system_prompt</span><span class="p">)</span>
<span class="n">human_template</span> <span class="o">=</span> <span class="sh">"</span><span class="s">{question}</span><span class="sh">"</span>
<span class="n">human_message_prompt</span> <span class="o">=</span> <span class="n">HumanMessagePromptTemplate</span><span class="p">.</span><span class="nf">from_template</span><span class="p">(</span><span class="n">human_template</span><span class="p">)</span>
<span class="n">chat_prompt</span> <span class="o">=</span> <span class="n">ChatPromptTemplate</span><span class="p">.</span><span class="nf">from_messages</span><span class="p">([</span><span class="n">system_message_prompt</span><span class="p">,</span> <span class="n">human_message_prompt</span><span class="p">])</span>

<span class="c1"># Set up retriever
</span><span class="n">redundant_filter</span> <span class="o">=</span> <span class="nc">EmbeddingsRedundantFilter</span><span class="p">(</span><span class="n">embeddings</span><span class="o">=</span><span class="n">embeddings</span><span class="p">)</span>
<span class="n">reordering</span> <span class="o">=</span> <span class="nc">LongContextReorder</span><span class="p">()</span>
<span class="n">pipeline</span> <span class="o">=</span> <span class="nc">DocumentCompressorPipeline</span><span class="p">(</span><span class="n">transformers</span><span class="o">=</span><span class="p">[</span><span class="n">redundant_filter</span><span class="p">,</span> <span class="n">reordering</span><span class="p">])</span>
<span class="n">retriever</span><span class="o">=</span> <span class="nc">ContextualCompressionRetriever</span><span class="p">(</span>
  <span class="n">base_compressor</span><span class="o">=</span><span class="n">pipeline</span><span class="p">,</span> <span class="n">base_retriever</span><span class="o">=</span><span class="n">db</span><span class="p">.</span><span class="nf">as_retriever</span><span class="p">(</span><span class="n">search_type</span><span class="o">=</span><span class="sh">"</span><span class="s">similarity_score_threshold</span><span class="sh">"</span><span class="p">,</span> <span class="n">search_kwargs</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">k</span><span class="sh">"</span> <span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="sh">"</span><span class="s">score_threshold</span><span class="sh">"</span><span class="p">:</span> <span class="p">.</span><span class="mi">75</span><span class="p">}))</span>
 
<span class="c1"># Set up source file
</span><span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span>
<span class="n">timestamp</span> <span class="o">=</span> <span class="n">now</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d_%H%M%S</span><span class="sh">"</span><span class="p">)</span>
<span class="n">filename</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">answers/answers_</span><span class="si">{</span><span class="n">timestamp</span><span class="si">}</span><span class="s">.org</span><span class="sh">"</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
  <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">#+OPTIONS: toc:nil author:nil</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
  <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">#+TITLE: Answers and sources for session started on </span><span class="si">{</span><span class="n">timestamp</span><span class="si">}</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p>You’ll see that this chunk starts with the definition of a function that removes various characters from strings that you pass it.
I wrote this function to clean up the strings that I have the app write to a log to report its sources (the log that is stored in the answers folder).
The part of the script where these strings are created are shown further below.
Basically, these strings are reconstructed from the metadata that the <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> extracts from the fragments that it retrieves.
These bits of metadata originate from the bibtex entries of my Zotero library (<a href="/blog/2023/using-llms-with-retrieval-augmentation-through-langchain/">see my first post</a>). 
Given that they these bits of metadata often contain characters that make them look messy, I created the <code class="language-plaintext highlighter-rouge">string_cleanup</code> function to tidy them up a bit.</p>

<p>After defining this function we do some basic setting up.
We first set our OpenAI API key as an environment variable and we make the <code class="language-plaintext highlighter-rouge">openai</code> module aware of our API key as well.
We then load the <code class="language-plaintext highlighter-rouge">OpenAIEmbeddings</code> model, which is currently the <code class="language-plaintext highlighter-rouge">text-embedding-ada-002</code> model.
We need to pass this model as an argument when loading our vector store.
By doing so, we clarify what type of embeddings are stored in the vector store, so that we can make use of them.
We then load the actual vector store itself and store it in an object we simply call <code class="language-plaintext highlighter-rouge">db</code>.
We then set up our callback handler.
Finally, we set up our <code class="language-plaintext highlighter-rouge">ConversationBufferWindowMemory</code>.
We need to tell it about the keys by which we identify our chat history, our questions and the output of the model after answering our questions.
We can set the window size of the memory with the <code class="language-plaintext highlighter-rouge">k</code> argument, which in this example is set to three.
This means it will remember up to three messages of conversation.</p>

<p>After this we write out our prompt template.
You can see that we tell the LLM to assume a certain role and that we offer instructions on how to respond.
I do not have a lot of experience with prompt engineering yet, so this prompt template probably can be improved.
Also notice that I include one variable in this template, which is called <code class="language-plaintext highlighter-rouge">context</code>. 
This context consists of the retrieved fragments of text associated with our question.
After writing out the prompt template, we create the actual template and relate our <code class="language-plaintext highlighter-rouge">context</code> variable to it.
We then specify that this is the system message template. 
We create a separate template for the human messages, which simply consist of our <code class="language-plaintext highlighter-rouge">question</code> variable.
We then create a chat prompt from the system message template and the human message template.
We will later include this last prompt in our <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code>.</p>

<p>Next, we set up our retriever.
We first set up the redundancy filter and then the <code class="language-plaintext highlighter-rouge">LongContextReorder</code> object. 
We combine these in a pipeline, which is itself included in a <code class="language-plaintext highlighter-rouge">ContextualCompressionRetriever</code>, along with the vector store, which acts as our ‘base retriever’.
It is possible to simply use the vector store as a retriever directly, but then we would not have the benefits that the redundancy filter and <code class="language-plaintext highlighter-rouge">LongContextReorder</code> object give us.
We pass several arguments to our base retriever, namely:</p>
<ul>
  <li>an argument that indicates we want to use a similarity score threshold to select documents;</li>
  <li>the number of documents to retrieve (<code class="language-plaintext highlighter-rouge">k</code>);</li>
  <li>the similarity score threshold, which is the minimum similarity score that a fragment of text should have to be considered for retrieval.</li>
</ul>

<p>Twenty fragments is a pretty large number of fragments to retrieve, given that we work with a limited context window and given that longer contexts also have the unfortunate consequence that not all of it will be equally considered by the LLM.
 However, I have set this relatively high number because we also do some filtering and reordering as part of our pipeline, which compensates somewhat from the downsides of retrieving many fragments.
We will later integrate our <code class="language-plaintext highlighter-rouge">ContextualCompressionRetriever</code> in our <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code>.</p>

<p>The last thing we do in this chunk of the script is to set up the log file that we wish to write to the answers folder.
I opted to use org files for this, since I work a lot with org files in general.
We give the file a filename that includes a timestamp and we write a header and a title to the file itself.
We will populate it further during our conversation with the LLM.</p>

<h2 id="chat-start-and-chat-settings-update">Chat start and chat settings update</h2>
<p>The next chunk of our script is a shot one:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Prepare settings
</span><span class="nd">@cl.on_chat_start</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
  <span class="n">settings</span> <span class="o">=</span> <span class="k">await</span> <span class="n">cl</span><span class="p">.</span><span class="nc">ChatSettings</span><span class="p">(</span>
    <span class="p">[</span>
      <span class="nc">Select</span><span class="p">(</span>
        <span class="nb">id</span><span class="o">=</span><span class="sh">"</span><span class="s">Model</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">OpenAI - Model</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">values</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">gpt-3.5-turbo-16k</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4-32k</span><span class="sh">"</span><span class="p">],</span>
        <span class="n">initial_index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
      <span class="p">),</span>
      <span class="nc">Slider</span><span class="p">(</span>
        <span class="nb">id</span><span class="o">=</span><span class="sh">"</span><span class="s">Temperature</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">OpenAI - Temperature</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">initial</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
        <span class="nb">min</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
        <span class="nb">max</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
        <span class="n">step</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
      <span class="p">),</span>
    <span class="p">]</span>
  <span class="p">).</span><span class="nf">send</span><span class="p">()</span>
  <span class="k">await</span> <span class="nf">setup_chain</span><span class="p">(</span><span class="n">settings</span><span class="p">)</span>
</code></pre></div></div>

<p>In this chunk we define the chat settings that the user can change on the fly, which is a feature of chainlit apps. 
In this case we allow the user to select different types of models that OpenAI has on offer through its API.
I default to the <code class="language-plaintext highlighter-rouge">gpt-3.5-turbo-16k</code> model, because it is still relatively cheap and has a longer context window than the <code class="language-plaintext highlighter-rouge">gpt-3.5-turbo</code> model.
I have found that, with the number of fragments that I retrieve, this longer context window is often necessary.
The user can also set temperature for the model, which controls how deterministic its answers will be: A higher temperature will allow for more variability in answers.</p>

<p>We could include more settings if we wanted. 
For example, in another, more elaborate tool that I made, I also allow the user to set the number of text fragments retrieved by the <code class="language-plaintext highlighter-rouge">base retriever</code>.
It should also be possible to control the size of the memory window using chat settings.</p>

<p>The next chunk of the script is called whenever one of the above chat settings is changed, but it is also run the outset, when a new chat is started:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># When settings are updated
</span><span class="nd">@cl.on_settings_update</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">setup_chain</span><span class="p">(</span><span class="n">settings</span><span class="p">):</span>
  <span class="c1"># Set llm
</span>  <span class="n">llm</span><span class="o">=</span><span class="nc">ChatOpenAI</span><span class="p">(</span>
    <span class="n">temperature</span><span class="o">=</span><span class="n">settings</span><span class="p">[</span><span class="sh">"</span><span class="s">Temperature</span><span class="sh">"</span><span class="p">],</span>
    <span class="n">model</span><span class="o">=</span><span class="n">settings</span><span class="p">[</span><span class="sh">"</span><span class="s">Model</span><span class="sh">"</span><span class="p">],</span>
  <span class="p">)</span>
 
  <span class="c1"># Set up conversational chain
</span>  <span class="n">chain</span> <span class="o">=</span> <span class="n">ConversationalRetrievalChain</span><span class="p">.</span><span class="nf">from_llm</span><span class="p">(</span>
    <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
    <span class="n">retriever</span><span class="o">=</span><span class="n">retriever</span><span class="p">,</span>
    <span class="n">chain_type</span><span class="o">=</span><span class="sh">"</span><span class="s">stuff</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">return_source_documents</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">return_generated_question</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">combine_docs_chain_kwargs</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">prompt</span><span class="sh">'</span><span class="p">:</span> <span class="n">chat_prompt</span><span class="p">},</span>
    <span class="n">memory</span><span class="o">=</span><span class="n">memory</span><span class="p">,</span>
    <span class="n">condense_question_llm</span> <span class="o">=</span> <span class="nc">ChatOpenAI</span><span class="p">(</span><span class="n">temperature</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="sh">'</span><span class="s">gpt-3.5-turbo</span><span class="sh">'</span><span class="p">),</span>
  <span class="p">)</span>
  <span class="n">cl</span><span class="p">.</span><span class="n">user_session</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="sh">"</span><span class="s">chain</span><span class="sh">"</span><span class="p">,</span> <span class="n">chain</span><span class="p">)</span>
</code></pre></div></div>
<p>Here, we first specify the LLM that we will be conversing with. 
As you can see, the parameters of this model are retrieved from the chat settings, namely the model name and its temperature.</p>

<p>We then finally get to setting up the <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code>.
We clarify what LLM we wish to converse with.
We then tell the chain what retriever we will be using (our <code class="language-plaintext highlighter-rouge">ContextualCompressionRetriever</code>). 
We also define <em>how</em> our documents are integrated in the <code class="language-plaintext highlighter-rouge">context</code> variable of our prompts, for which <a href="https://python.langchain.com/docs/modules/chains/document/">the LangChain framework offers several options</a>.
I use the simplest one, ‘stuff documents’, which basically stuffs also retrieved fragments in the context.
The other options usually involve iterating over our fragments in different ways.
This is more time consuming and it often involves additional calls to LLMs, which makes them more expensive options.
So far, I have not seen great benefit from using any of these other options.
We tell the chain to also return the ‘source documents’, which allows us to access the actual fragments of text that our retriever retrieves.
We need to do this if we want to enable our tool to report its sources in the log file that we have it create.
For similar reasons, we also tell the chain to retun the question that it generated.
We then specify the prompt that we want the chain to use, which is the chat prompt we created earlier.
We also specify the memory object that the chain can use to memorize our conversation, such that we can have an actual conversation with the LLM.
Finally, in this we case we also specify the model that the chain can use to condense questions (which is something it apparently always does).
By default, it will use the model that we set with the <code class="language-plaintext highlighter-rouge">llm</code> parameter, but I force it to use the <code class="language-plaintext highlighter-rouge">gpt-3.5-turbo</code> model, because it is unnecessary to use a more expensive model for this.</p>

<p>So now we have our <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> all set up!</p>
<h2 id="messages">Messages</h2>
<p>The last chunk of our script basically handles what happens when messages are being sent to an LLM:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@cl.on_message</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
  <span class="n">chain</span> <span class="o">=</span> <span class="n">cl</span><span class="p">.</span><span class="n">user_session</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">chain</span><span class="sh">"</span><span class="p">)</span>
  <span class="n">cb</span> <span class="o">=</span> <span class="n">cl</span><span class="p">.</span><span class="nc">LangchainCallbackHandler</span><span class="p">()</span>
  <span class="n">cb</span><span class="p">.</span><span class="n">answer_reached</span> <span class="o">=</span> <span class="bp">True</span>
  <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">cl</span><span class="p">.</span><span class="nf">make_async</span><span class="p">(</span><span class="n">chain</span><span class="p">)(</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="n">callbacks</span><span class="o">=</span><span class="p">[</span><span class="n">cb</span><span class="p">])</span>
  <span class="n">question</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">]</span>
  <span class="n">answer</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="sh">"</span><span class="s">answer</span><span class="sh">"</span><span class="p">]</span>
  <span class="n">answer</span> <span class="o">+=</span> <span class="sh">"</span><span class="se">\n\n</span><span class="s"> Sources:</span><span class="se">\n\n</span><span class="sh">"</span>
  <span class="n">sources</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="sh">"</span><span class="s">source_documents</span><span class="sh">"</span><span class="p">]</span>
  <span class="n">print_sources</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">* Query:</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">question</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">* Answer:</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="sh">'</span><span class="s">answer</span><span class="sh">'</span><span class="p">])</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">source</span> <span class="ow">in</span> <span class="n">sources</span><span class="p">:</span>
      <span class="n">reference</span> <span class="o">=</span> <span class="sh">"</span><span class="s">INVALID REF</span><span class="sh">"</span>
      <span class="k">if</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">ENTRYTYPE</span><span class="sh">'</span><span class="p">)</span> <span class="o">==</span> <span class="sh">'</span><span class="s">article</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">reference</span> <span class="o">=</span> <span class="p">(</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">author</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> (</span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">). </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">. </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">journal</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">, </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">volume</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> (</span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">number</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">): </span><span class="sh">"</span> <span class="o">+</span> 
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">pages</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
      <span class="k">elif</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">ENTRYTYPE</span><span class="sh">'</span><span class="p">)</span> <span class="o">==</span> <span class="sh">'</span><span class="s">book</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">author</span> <span class="o">=</span> <span class="sh">""</span>
        <span class="k">if</span> <span class="sh">'</span><span class="s">author</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">:</span>
          <span class="n">author</span> <span class="o">=</span> <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">author</span><span class="sh">'</span><span class="p">,</span> <span class="sh">"</span><span class="s">NA</span><span class="sh">"</span><span class="p">))</span>
        <span class="k">elif</span> <span class="sh">'</span><span class="s">editor</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">:</span>
          <span class="n">author</span> <span class="o">=</span> <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">editor</span><span class="sh">'</span><span class="p">,</span> <span class="sh">"</span><span class="s">NA</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">reference</span> <span class="o">=</span> <span class="p">(</span>
          <span class="n">author</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> (</span><span class="sh">"</span> <span class="o">+</span> 
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">). </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">. </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">address</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">: </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">publisher</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
      <span class="k">elif</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">ENTRYTYPE</span><span class="sh">'</span><span class="p">)</span> <span class="o">==</span> <span class="sh">'</span><span class="s">incollection</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">reference</span> <span class="o">=</span> <span class="p">(</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">author</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> (</span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">). </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">. </span><span class="sh">"</span> <span class="o">+</span>
          <span class="sh">"</span><span class="s">In: </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">editor</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> 
          <span class="sh">"</span><span class="s"> (Eds.), </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">booktitle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">, </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">pages</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="n">author</span> <span class="o">=</span> <span class="sh">""</span>
        <span class="k">if</span> <span class="sh">'</span><span class="s">author</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">:</span>
          <span class="n">author</span> <span class="o">=</span> <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">author</span><span class="sh">'</span><span class="p">,</span> <span class="sh">"</span><span class="s">NA</span><span class="sh">"</span><span class="p">))</span>
        <span class="k">elif</span> <span class="sh">'</span><span class="s">editor</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">:</span>
          <span class="n">author</span> <span class="o">=</span> <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">editor</span><span class="sh">'</span><span class="p">,</span> <span class="sh">"</span><span class="s">NA</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">reference</span> <span class="o">=</span> <span class="p">(</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">author</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> (</span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">). </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">'</span><span class="s">source</span><span class="sh">'</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">print_sources</span><span class="p">:</span>
        <span class="n">print_sources</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">'</span><span class="s">source</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">answer</span> <span class="o">+=</span> <span class="sh">'</span><span class="s">- </span><span class="sh">'</span>
        <span class="n">answer</span> <span class="o">+=</span> <span class="n">reference</span>
        <span class="n">answer</span> <span class="o">+=</span> <span class="sh">'</span><span class="se">\n</span><span class="sh">'</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">** Document_</span><span class="si">{</span><span class="n">counter</span><span class="si">}</span><span class="s">:</span><span class="se">\n</span><span class="s">- </span><span class="sh">"</span><span class="p">)</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">reference</span><span class="p">)</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">- </span><span class="sh">"</span><span class="p">)</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">'</span><span class="s">source</span><span class="sh">'</span><span class="p">]))</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">*** Content:</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">page_content</span><span class="p">)</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">)</span>
      <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>

  <span class="k">await</span> <span class="n">cl</span><span class="p">.</span><span class="nc">Message</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">answer</span><span class="p">).</span><span class="nf">send</span><span class="p">()</span>
</code></pre></div></div>
<p>This chunk is pretty lengthy, but much of it is a somewhat convoluted way of having the tool report its sources, both in is responses to the user, but also in the log file that we write to the answers folder.</p>

<p>The chunk more or less starts with a specification of the chain that we are using (the one we just created).
We then define our callback handler.
The <code class="language-plaintext highlighter-rouge">res</code> object is what we store the response of the LLM in.
It consists of several parts, including the question that we asked (remember that we told our <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> to return the question), the answer to our question, and the source documents.</p>

<p>As you can see, we extend the original answer of the model with a list of our sources. 
Most of what you see in the remainder of the chunk are different approaches to formatting these sources, depending on the type of source it is.
We retrieve various metadata from our sources to format the actual references.
As mentioned before, we also include these references in our log file, along with our question and the answer that the LLM gave us.</p>

<h2 id="a-short-demonstration">A short demonstration</h2>
<p>Now that we have our complete script, let us actually use it.</p>

<p>We can start our chainlit app by going to its main folder and typing the following command:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chainlit run ask_cl.py
</code></pre></div></div>
<p>This will open a browser window in which we are greated with a default readme file (the chainlit.md file).
As mentioned previously, we can change this file as we wish.
My version of the tool looks as shown in the picture below.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/chainlit_welcome-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/chainlit_welcome-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/chainlit_welcome-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/chainlit_welcome.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
The chainlit interface once we run our app.
</div>

<p>We can now start asking our app questions.
In the example shown below, I asked the app what “chains of action” are, a concept used by Theodore Schatzki in his version of social practice theories.
The answer that we get is pretty good.
Also notice how the app reports the sources it consulted, which are papers that I have in my Zotero library.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/chainlit_answer_schatzki-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/chainlit_answer_schatzki-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/chainlit_answer_schatzki-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/chainlit_answer_schatzki.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
The chainlit interface once we run our app.
</div>

<p>Let us also take a look at part of the answer file that has been created and populated in the meantime:</p>
<pre><code class="language-org">#+OPTIONS: toc:nil author:nil
#+TITLE: Answers and sources for session started on 20231023_222003

* Query:
What are chains of action?
* Answer:
Chains of action refer to a series of performances or actions in which each member of the chain responds to the preceding activity, what was said, or a change in the world brought about by the previous activity. These chains link individuals and their actions, forming a temporal thread that connects their pasts and presents. Chains of action can occur within and between bundles and constellations, and they play a crucial role in shaping social life and bringing about changes in practices, arrangements, and bundles. (Schatzki, 2016) 

Bibliography:
Schatzki, T. R. (2016). Chains of action and the plenum of practices. In The Timespace of Human Activity: On Performance, Society, and History as Indeterminate Teleological Events (pp. 67-68). Franz Steiner Verlag.
** Document_1:
- Schatzki, Theodore R. (2016). Keeping Track of Large Phenomena. Geographische Zeitschrift, 104 (): 4--24.
- Schatzki_2016_Geographische Zeitschrift.txt
*** Content:
(7) Interactions, as noted, form one sort of action chain, namely, those encompassing reciprocal reactions by two or more people. Subtypes include exchange,
teamwork, conversation, communication, and the transmission of information. (These concepts can also be used to name nexuses of chains: compare two
people exchanging presents in person to two tribes exchanging gifts over several months.) Other types of chain are imitation (in a more intuitive sense than
Tarde’s ubiquitous appropriation) and governance (intentional shaping and influencing). Beyond these and other named types of chains, social life houses an
immense number of highly contingent and haphazard chains of unnamed types
that often go uncognized and unrecognized yet build a formative unfolding rhizomatic structure in social life.
4. Chains of Action and the Plenum of Practices
Individualists can welcome the idea of action chains. Indeed, unintentional consequences of action, the existence of which is central to the individualist outlook, can
be construed as results of action chains. Contrary to individualists, however, practice
theorists do not believe that action chains occur in a vacuum, less metaphorically, that
they occur only in a texture formed by more individuals and their actions. Rather,
chains transpire in the plenum of practices. This implies that they propagate within
and between bundles and constellations.

** Document_2:
- Schatzki, Theodore R. (2010). The Timespace of Human Activity: On Performance, Society, and History as Indeterminate Teleological Events. Lanham, Md: Lexington Books.
- Schatzki_2010_The timespace of human activity.txt
*** Content:
The second type of sinew embraces chains of action. Lives hang together
when chains of action pass through and thereby link them. A chain of ac-
tion is a series of performances, each member of which responds either to
the preceding activity in the series, to what the previous activity said, or to a
change in the world that the preceding activity brought about. For example,
when a person taking a horse farm tour drops a map on the ground, and the
tour leader picks it up and puts it in a trash receptacle, their lives are linked
Activity Timespace and Social Life 67

by a chain of action (which also connects them to the people who installed
the receptacle). Conversations, to take another example, are chains of action
in which people respond to what others say or to the saying of it. Chains of
action are configurations of interwoven temporality. For responding to an
action, to something said, or to a change in the world is the past dimension of
activity. Each link in a chain of action thus involves some person’s past, and
a chain comprising multiple links strings together the pasts and presents of
different people.
</code></pre>

<p>You can see that it lists my question, the answer that I was given, and the various fragments of text on which the answer was based.
This not only allows us to double check the answers that I got, but also to quickly identify parts of different papers that we might want to look into more.</p>

<h2 id="just-the-beginning">Just the beginning</h2>
<p>I hope this post is useful to people that would like to build something similar themselves.
The app described in this post builds on one of the first LangChain tools that I developed (I did do a lot of fine-tuning of it over time).
It has been incredibly useful for me, but it has more or less become redundant after I started developing an <a href="https://python.langchain.com/docs/modules/agents.html">agent</a> that I can use to not only chat about my literature, but also for various other things. 
This includes retrieving information from empirical sources (e.g., news archives) and then relating conceptual knowledge to that empirical information.
I will go into the use of agents in future posts.</p>]]></content><author><name></name></author><category term="Software" /><category term="LLM" /><category term="langchain" /><category term="Python" /><summary type="html"><![CDATA[Intro In the summer, I started a series of posts on using the LangChain framework. This is the second post in that series. In the first post I introduced the idea of retrieval augmentation and vector stores and I explained the Python scripts that I use to create and update vector stores. In this post I go into the actual use of retrieval augmentation. The example I focus on here is the use of retrieval augmentation to chat with OpenAI’s Large Language Models (LLMs) about the literature on my Zotero library.]]></summary></entry><entry><title type="html">Retrieval augmentation with literature</title><link href="http://localhost:4000/blog/2023/retrieval-augmentation-with-literature/" rel="alternate" type="text/html" title="Retrieval augmentation with literature" /><published>2023-10-23T20:00:00+02:00</published><updated>2023-10-23T20:00:00+02:00</updated><id>http://localhost:4000/blog/2023/retrieval-augmentation-with-literature</id><content type="html" xml:base="http://localhost:4000/blog/2023/retrieval-augmentation-with-literature/"><![CDATA[<h2 id="intro">Intro</h2>
<p>In the summer, I started a series of posts on using the <a href="https://python.langchain.com/docs/get_started/introduction.html">LangChain</a> framework.
This is the second post in that series. 
In the <a href="/blog/2023/using-llms-with-retrieval-augmentation-through-langchain/">first post</a> I introduced the idea of retrieval augmentation and vector stores and I explained the Python scripts that I use to create and update vector stores.
In this post I go into the actual use of retrieval augmentation.
The example I focus on here is the use of retrieval augmentation to chat with OpenAI’s Large Language Models (LLMs) about the literature on my Zotero library.</p>

<h2 id="chainlit">Chainlit</h2>
<p>The initial LangChain tools that I built were simple command-line tools. 
I soon discovered a framework called <a href="https://github.com/Chainlit/chainlit">Chainlit</a>, which allows you to use you browser as an interface for your LangChain apps, and it comes with several other goodies.
To be able to follow along with the examples below, you will need to install the Chainlit Python module.
Chainlit is in development and future updates might break some of the things that I showcase in this post.
The version of Chainlit that I have installed at the time of writing this post is 0.7.1.</p>

<h2 id="a-short-recap">A short recap</h2>
<p>Without going into too much detail, a short recap of the idea of retrieval augmentation might come in useful.
Our goal is to chat with LLMs about the contents of the literature in our Zotero library.
This is useful for multiple things, such as quickly consulting our literature on concepts that we are interested and finding back the papers in which these concepts are described, but that we may have forgotten about.
Given that can have a conversation with an LLM about our literature and that the LLM to some extent memorizes what has been said before in the conversation, we can even chat with LLMs about the relationships between concepts.
I use this tool, for example, to quickly create notes on concepts that I can integrate in my writings. 
I also use it when preparing for teaching, for example to quickly compile lecture notes with additional background on the concepts and theories that I am teaching about.
We can do this with the help of retrieval augmentation.
When we ask a question, our question gets embedded, that is, it gets converted into a coordinate in a semantic space that we have populated with fragments of texts from the papers we wish to chat about.
These fragments are stored in our vector store (see <a href="/blog/2023/using-llms-with-retrieval-augmentation-through-langchain/">my previous post on this topic</a>).
Our tool retrieves fragments of text that have content that is semantically similar to our question. 
Our tool then includes these fragments of text as context in our question, allowing the LLM we interact with to use this knowledge to answer our question.</p>

<p>The script that I detail below assumes that you have already created a vectorstore that contains the literature from your Zotero library (again, see <a href="/blog/2023/using-llms-with-retrieval-augmentation-through-langchain/">my previous post on this topic</a>).</p>

<h2 id="folder-structure-and-files">Folder structure and files</h2>
<p>Let us start with the folder structure for our tool.
In our main folder, we create two subfolders:</p>
<ol>
  <li>answers</li>
  <li>vectorstore</li>
</ol>

<p>One thing that we can do with retrieval augmentation is to record the actual fragments of text that our tool retrieved, as well as details of the sources that these fragments were retrieved from. 
I find this extremely useful, because it allows us to have our tool cite its sources, so that we can double check its output.
To this end, I have my tool write log files in to the answers folder.
Whenever I start a new chat session, a new log file is created in which the tool records the questions I ask, the answers it gives and then the fragments of text that it used to come to this answer as well as the sources that these fragments are from.</p>

<p>The ‘vectorstore’ folder simply contains the vector store that contains our literature.</p>

<p>In the main folder we also have a few files:</p>
<ul>
  <li>ask_cl.py: The actual script that I detail below.
You can of course give this another name.</li>
  <li>constants.py: A Python file that just contains our API key (which we do not want to expose, because we do not want to share it with others)</li>
  <li>chainlit.md: This gets created automatically when you run a chaintlit app for the first time.
It is a simple readme file that is shown everytime you run your chainlit app and that you can of course adjust to your own needs and wants.</li>
</ul>

<p>You might have several other files in the folder, such as scripts that I described in my first post of this series.
However, the ones listed above are the only ones we really need to make the examples below work.</p>

<h2 id="my-script">My script</h2>
<h3 id="the-modules-that-we-import">The modules that we import</h3>
<p>Let us go over the main script now: the ask_cl.py script. 
We’ll first import all the modules that our tool will make use of.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">langchain.chains</span> <span class="kn">import</span> <span class="n">ConversationalRetrievalChain</span>
<span class="kn">from</span> <span class="n">langchain.memory</span> <span class="kn">import</span> <span class="n">ConversationBufferWindowMemory</span>
<span class="kn">from</span> <span class="n">langchain.document_transformers</span> <span class="kn">import</span> <span class="n">LongContextReorder</span><span class="p">,</span> <span class="n">EmbeddingsRedundantFilter</span>
<span class="kn">from</span> <span class="n">langchain.retrievers.document_compressors</span> <span class="kn">import</span> <span class="n">DocumentCompressorPipeline</span>
<span class="kn">from</span> <span class="n">langchain.retrievers</span> <span class="kn">import</span> <span class="n">ContextualCompressionRetriever</span>
<span class="kn">from</span> <span class="n">langchain.embeddings</span> <span class="kn">import</span> <span class="n">OpenAIEmbeddings</span>
<span class="kn">from</span> <span class="n">langchain.chat_models</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>
<span class="kn">from</span> <span class="n">langchain.llms</span> <span class="kn">import</span> <span class="n">OpenAI</span>
<span class="kn">import</span> <span class="n">openai</span>
<span class="kn">from</span> <span class="n">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">langchain.vectorstores</span> <span class="kn">import</span> <span class="n">FAISS</span>
<span class="kn">from</span> <span class="n">langchain.callbacks</span> <span class="kn">import</span> <span class="n">OpenAICallbackHandler</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">import</span> <span class="n">chainlit</span> <span class="k">as</span> <span class="n">cl</span>
<span class="kn">from</span> <span class="n">chainlit.input_widget</span> <span class="kn">import</span> <span class="n">Select</span><span class="p">,</span> <span class="n">Slider</span>
<span class="kn">import</span> <span class="n">textwrap</span>
<span class="kn">import</span> <span class="n">constants</span>
<span class="kn">from</span> <span class="n">langchain.prompts</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">ChatPromptTemplate</span><span class="p">,</span>
    <span class="n">PromptTemplate</span><span class="p">,</span>
    <span class="n">SystemMessagePromptTemplate</span><span class="p">,</span>
    <span class="n">AIMessagePromptTemplate</span><span class="p">,</span>
    <span class="n">HumanMessagePromptTemplate</span><span class="p">,</span>
<span class="p">)</span>
<span class="kn">from</span> <span class="n">langchain.schema</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">AIMessage</span><span class="p">,</span>
    <span class="n">HumanMessage</span><span class="p">,</span>
    <span class="n">SystemMessage</span>
<span class="p">)</span>
</code></pre></div></div>
<p>I will go through the various things that we import from top to bottom.</p>

<p>The <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> is a type of chain (imported from LangChain) that does most of the heavy lifting for us when it comes to retrieval augmentation.
We can include a vector store in this chain, which will be used to retrieve fragments of information that we want to include as context in our questions to the LLM.
There is also ‘RetrievalChain’ that does just that. 
What the <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> adds to this is a chat history, so that we can actually have a conversation with an LLM that then memorizes earliers parts of the conversation.
See the LangChain docs on the <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> <a href="https://python.langchain.com/docs/use_cases/question_answering/chat_vector_db">here</a>.</p>

<p>To enable an LLM to memorize our conversation, we also need a memory object that we include in our chain.
The <code class="language-plaintext highlighter-rouge">ConversationBufferWindowMemory</code> is one of several memory objects that langchain offers. 
We need one of those to store the chat history of our conversation, so that the LLM that we interact with has access to that history.
The <code class="language-plaintext highlighter-rouge">ConversationBufferWindowMemory</code> is a kind of sliding window memory that memorizes a limited part of the conversation (see the docs <a href="https://python.langchain.com/docs/modules/memory/types/buffer_window">here</a>).
This allows our tool to memorize the most recent interactions, without that memory getting too large for our LLM to handle (without exceeding the available context window of the model).</p>

<p>We also import various modules that include utilities that we use to process the fragments that our <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> retrieves. 
The background to the <code class="language-plaintext highlighter-rouge">LongContextReorder</code> object could be the topic of its own blog post. 
It goes back to a finding that is discussed in <a href="https://arxiv.org/abs//2307.03172">this paper</a>, which is that LLMs that are given a long context (basically the information included with the question), tend to get ‘lost in the middle’: They pay more attention to the information that is either in the beginning of the context, or at the end of the context, and information in the middle is not given as much consideration.
The <code class="language-plaintext highlighter-rouge">LongContextReorder</code> object helps us order the retrieved fragments such that the fragments that it considers to be most important tend to be at the beginning or at the end of the collection of retrieved fragments.
The <code class="language-plaintext highlighter-rouge">EmbeddingsRedundantFilter</code> filters out redundant fragments if we have multiple fragments that semantically are highly similar. 
Given that we have only a limited context window to work with, this object helps us to ensure that this context window is not filled with a lot of redundant information.
The <code class="language-plaintext highlighter-rouge">DocumentCompressorPipeline</code> is an object that allows us to combine these different types of filters in a pipeline.
The <code class="language-plaintext highlighter-rouge">ContextualCompressionRetriever</code> then allows us to integrate that pipeline in our retrieval chain.
It is the retriever that we will integrate into our <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code>.</p>

<p>To be able to access OpenAI’s chat models, we import the <code class="language-plaintext highlighter-rouge">ChatOpenAI</code> module from the LangChain framework.
We also need to use functions from the <code class="language-plaintext highlighter-rouge">OpenAI</code> module, so we import that as well.
Given that we are working with OpenAI models, we need to import the <code class="language-plaintext highlighter-rouge">openai</code> module from OpenAI itself too.
We then import the <code class="language-plaintext highlighter-rouge">constants</code> module, which is simply the other Python file in our main folder; the file in which we store our OpenAI API key.
The <code class="language-plaintext highlighter-rouge">dotenv</code> module allows us to set environment variables, which we use in our script to set our OpenAI API key as an environment variable.
We also need the <code class="language-plaintext highlighter-rouge">os</code> module to set our environment variable.</p>

<p>The literature that we wish to chat about is recorded in a <code class="language-plaintext highlighter-rouge">FAISS</code> vector store, so we’ll have to import the corresponding module to be able to use it.
We also need to import the <code class="language-plaintext highlighter-rouge">OpenAIEmbeddings</code> module because when we retrieve fragments from our vector stores, we need to indicate the embeddings model that we used to create the embeddings.</p>

<p>To be honest, I do not know a lot about callback handlers.
They are apparently functions that are executed in response to specific events or conditions in asynchronous or event-driven programs.
To the best of my knowledge, we need a callback handler because our Chainlit-powered app will make use of asynchronous programming.
In our case, we specifically need the <code class="language-plaintext highlighter-rouge">OpenAICallbackHandler</code>, so we import the corresponding module.</p>

<p>The <code class="language-plaintext highlighter-rouge">datetime</code> module allows us to get the current date and time, which we will use in the log files that we write to our answers folder for fact checking (see the section on folder structure above).</p>

<p>Since we are building a Chainlit-powered app, we also import the <code class="language-plaintext highlighter-rouge">chainlit</code> module.
We then import various input widgets from the <code class="language-plaintext highlighter-rouge">chainlit</code> module that allow us to set various settings for our app in the browser interface.
We will not be doing that much with these settings in this particular example, but in examples that I will discuss in future posts, the ability to change settings on the fly is important.</p>

<p>The remaining imports that we do are all related to <a href="https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/">prompt templates</a>.
As described in the LangChain documentation, prompt templates “are pre-defined recipes for generating prompts for language models”.
As you’ll see in the example below, it allows us to predefine a prompt for the LLMs that we interact with.
In the prompt template we can also include variables, which allows us ‘dynamically’ insert things in our prompt, such as the question that we asked and the context to that question that consists of the fragments of text we retrieve from our vector store.
Since our desire is to develop a chat app, we need to use templates that have been specifically designed for chat purposes.
These templates make use of various schemas that we also need to import.</p>

<h3 id="setting-things-up">Setting things up</h3>
<p>The remainder of the script consists of four chunks:</p>
<ol>
  <li>A chunk that is run when we start the app and in which we do some setup.</li>
  <li>A chunk that is run when we start a new chat (this does not have to mean that we restart the app).</li>
  <li>A chunk that is run when we update our chat settings (again, not something that we’ll discuss in detail here, but that we will discuss in more detail in a future post).</li>
  <li>A chunk that is run when we send a message to the LLM that we are chatting with.</li>
</ol>

<p>Let’s start with the setting up chunk:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cleanup function for source strings
</span><span class="k">def</span> <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
  <span class="sh">"""</span><span class="s">A function to clean up strings in the sources from unwanted symbols</span><span class="sh">"""</span>
  <span class="k">return</span> <span class="n">string</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">{</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\\</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">)</span>

<span class="c1"># Set OpenAI API Key
</span><span class="nf">load_dotenv</span><span class="p">()</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">constants</span><span class="p">.</span><span class="n">APIKEY</span>
<span class="n">openai</span><span class="p">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="n">constants</span><span class="p">.</span><span class="n">APIKEY</span> 

<span class="c1"># Load FAISS database
</span><span class="n">embeddings</span> <span class="o">=</span> <span class="nc">OpenAIEmbeddings</span><span class="p">()</span>
<span class="n">db</span> <span class="o">=</span> <span class="n">FAISS</span><span class="p">.</span><span class="nf">load_local</span><span class="p">(</span><span class="sh">"</span><span class="s">./vectorstore/</span><span class="sh">"</span><span class="p">,</span> <span class="n">embeddings</span><span class="p">)</span>

<span class="c1"># Set up callback handler
</span><span class="n">handler</span> <span class="o">=</span> <span class="nc">OpenAICallbackHandler</span><span class="p">()</span>

<span class="c1"># Set memory
</span><span class="n">memory</span> <span class="o">=</span> <span class="nc">ConversationBufferWindowMemory</span><span class="p">(</span><span class="n">memory_key</span><span class="o">=</span><span class="sh">"</span><span class="s">chat_history</span><span class="sh">"</span><span class="p">,</span> <span class="n">input_key</span><span class="o">=</span><span class="sh">'</span><span class="s">question</span><span class="sh">'</span><span class="p">,</span> <span class="n">output_key</span><span class="o">=</span><span class="sh">'</span><span class="s">answer</span><span class="sh">'</span><span class="p">,</span> <span class="n">return_messages</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>

<span class="c1"># Customize prompt
</span><span class="n">system_prompt_template</span> <span class="o">=</span> <span class="p">(</span>
  <span class="sh">'''</span><span class="s">
  You are a knowledgeable professor working in academia.
  Using the provided pieces of context, you answer the questions asked by the user.
  If you don</span><span class="sh">'</span><span class="s">t know the answer, just say that you don</span><span class="sh">'</span><span class="s">t know, don</span><span class="sh">'</span><span class="s">t try to make up an answer.

  </span><span class="sh">"""</span><span class="s">
  Context: {context}
  </span><span class="sh">"""</span><span class="s">

  Please try to give detailed answers and write your answers as an academic text, unless explicitly told otherwise.
  Use references to literature in your answer and include a bibliography for citations that you use.
  If you cannot provide appropriate references, tell me by the end of your answer.
 
  Format your answer as follows:
  One or multiple sentences that constitutes part of your answer (APA-style reference)
  The rest of your answer
  Bibliography:
  Bulleted bibliographical entries in APA-style
  </span><span class="sh">'''</span><span class="p">)</span>
  
<span class="n">system_prompt</span> <span class="o">=</span> <span class="nc">PromptTemplate</span><span class="p">(</span><span class="n">template</span><span class="o">=</span><span class="n">system_prompt_template</span><span class="p">,</span>
                               <span class="n">input_variables</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">context</span><span class="sh">"</span><span class="p">])</span>

<span class="n">system_message_prompt</span> <span class="o">=</span> <span class="nc">SystemMessagePromptTemplate</span><span class="p">(</span><span class="n">prompt</span> <span class="o">=</span> <span class="n">system_prompt</span><span class="p">)</span>
<span class="n">human_template</span> <span class="o">=</span> <span class="sh">"</span><span class="s">{question}</span><span class="sh">"</span>
<span class="n">human_message_prompt</span> <span class="o">=</span> <span class="n">HumanMessagePromptTemplate</span><span class="p">.</span><span class="nf">from_template</span><span class="p">(</span><span class="n">human_template</span><span class="p">)</span>
<span class="n">chat_prompt</span> <span class="o">=</span> <span class="n">ChatPromptTemplate</span><span class="p">.</span><span class="nf">from_messages</span><span class="p">([</span><span class="n">system_message_prompt</span><span class="p">,</span> <span class="n">human_message_prompt</span><span class="p">])</span>

<span class="c1"># Set up retriever
</span><span class="n">redundant_filter</span> <span class="o">=</span> <span class="nc">EmbeddingsRedundantFilter</span><span class="p">(</span><span class="n">embeddings</span><span class="o">=</span><span class="n">embeddings</span><span class="p">)</span>
<span class="n">reordering</span> <span class="o">=</span> <span class="nc">LongContextReorder</span><span class="p">()</span>
<span class="n">pipeline</span> <span class="o">=</span> <span class="nc">DocumentCompressorPipeline</span><span class="p">(</span><span class="n">transformers</span><span class="o">=</span><span class="p">[</span><span class="n">redundant_filter</span><span class="p">,</span> <span class="n">reordering</span><span class="p">])</span>
<span class="n">retriever</span><span class="o">=</span> <span class="nc">ContextualCompressionRetriever</span><span class="p">(</span>
  <span class="n">base_compressor</span><span class="o">=</span><span class="n">pipeline</span><span class="p">,</span> <span class="n">base_retriever</span><span class="o">=</span><span class="n">db</span><span class="p">.</span><span class="nf">as_retriever</span><span class="p">(</span><span class="n">search_type</span><span class="o">=</span><span class="sh">"</span><span class="s">similarity_score_threshold</span><span class="sh">"</span><span class="p">,</span> <span class="n">search_kwargs</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">k</span><span class="sh">"</span> <span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="sh">"</span><span class="s">score_threshold</span><span class="sh">"</span><span class="p">:</span> <span class="p">.</span><span class="mi">75</span><span class="p">}))</span>
 
<span class="c1"># Set up source file
</span><span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span>
<span class="n">timestamp</span> <span class="o">=</span> <span class="n">now</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d_%H%M%S</span><span class="sh">"</span><span class="p">)</span>
<span class="n">filename</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">answers/answers_</span><span class="si">{</span><span class="n">timestamp</span><span class="si">}</span><span class="s">.org</span><span class="sh">"</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
  <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">#+OPTIONS: toc:nil author:nil</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
  <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">#+TITLE: Answers and sources for session started on </span><span class="si">{</span><span class="n">timestamp</span><span class="si">}</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p>You’ll see that this chunk starts with the definition of a function that removes various characters from strings that you pass it.
I wrote this function to clean up the strings that I have the app write to a log to report its sources (the log that is stored in the answers folder).
The part of the script where these strings are created are shown further below.
Basically, these strings are reconstructed from the metadata that the <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> extracts from the fragments that it retrieves.
These bits of metadata originate from the bibtex entries of my Zotero library (<a href="/blog/2023/using-llms-with-retrieval-augmentation-through-langchain/">see my first post</a>). 
Given that they these bits of metadata often contain characters that make them look messy, I created the <code class="language-plaintext highlighter-rouge">string_cleanup</code> function to tidy them up a bit.</p>

<p>After defining this function we do some basic setting up.
We first set our OpenAI API key as an environment variable and we make the <code class="language-plaintext highlighter-rouge">openai</code> module aware of our API key as well.
We then load the <code class="language-plaintext highlighter-rouge">OpenAIEmbeddings</code> model, which is currently the <code class="language-plaintext highlighter-rouge">text-embedding-ada-002</code> model.
We need to pass this model as an argument when loading our vector store.
By doing so, we clarify what type of embeddings are stored in the vector store, so that we can make use of them.
We then load the actual vector store itself and store it in an object we simply call <code class="language-plaintext highlighter-rouge">db</code>.
We then set up our callback handler.
Finally, we set up our <code class="language-plaintext highlighter-rouge">ConversationBufferWindowMemory</code>.
We need to tell it about the keys by which we identify our chat history, our questions and the output of the model after answering our questions.
We can set the window size of the memory with the <code class="language-plaintext highlighter-rouge">k</code> argument, which in this example is set to three.
This means it will remember up to three messages of conversation.</p>

<p>After this we write out our prompt template.
You can see that we tell the LLM to assume a certain role and that we offer instructions on how to respond.
I do not have a lot of experience with prompt engineering yet, so this prompt template probably can be improved.
Also notice that I include one variable in this template, which is called <code class="language-plaintext highlighter-rouge">context</code>. 
This context consists of the retrieved fragments of text associated with our question.
After writing out the prompt template, we create the actual template and relate our <code class="language-plaintext highlighter-rouge">context</code> variable to it.
We then specify that this is the system message template. 
We create a separate template for the human messages, which simply consist of our <code class="language-plaintext highlighter-rouge">question</code> variable.
We then create a chat prompt from the system message template and the human message template.
We will later include this last prompt in our <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code>.</p>

<p>Next, we set up our retriever.
We first set up the redundancy filter and then the <code class="language-plaintext highlighter-rouge">LongContextReorder</code> object. 
We combine these in a pipeline, which is itself included in a <code class="language-plaintext highlighter-rouge">ContextualCompressionRetriever</code>, along with the vector store, which acts as our ‘base retriever’.
It is possible to simply use the vector store as a retriever directly, but then we would not have the benefits that the redundancy filter and <code class="language-plaintext highlighter-rouge">LongContextReorder</code> object give us.
We pass several arguments to our base retriever, namely:</p>
<ul>
  <li>an argument that indicates we want to use a similarity score threshold to select documents;</li>
  <li>the number of documents to retrieve (<code class="language-plaintext highlighter-rouge">k</code>);</li>
  <li>the similarity score threshold, which is the minimum similarity score that a fragment of text should have to be considered for retrieval.</li>
</ul>

<p>Twenty fragments is a pretty large number of fragments to retrieve, given that we work with a limited context window and given that longer contexts also have the unfortunate consequence that not all of it will be equally considered by the LLM.
 However, I have set this relatively high number because we also do some filtering and reordering as part of our pipeline, which compensates somewhat from the downsides of retrieving many fragments.
We will later integrate our <code class="language-plaintext highlighter-rouge">ContextualCompressionRetriever</code> in our <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code>.</p>

<p>The last thing we do in this chunk of the script is to set up the log file that we wish to write to the answers folder.
I opted to use org files for this, since I work a lot with org files in general.
We give the file a filename that includes a timestamp and we write a header and a title to the file itself.
We will populate it further during our conversation with the LLM.</p>

<h2 id="chat-start-and-chat-settings-update">Chat start and chat settings update</h2>
<p>The next chunk of our script is a shot one:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Prepare settings
</span><span class="nd">@cl.on_chat_start</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
  <span class="n">settings</span> <span class="o">=</span> <span class="k">await</span> <span class="n">cl</span><span class="p">.</span><span class="nc">ChatSettings</span><span class="p">(</span>
    <span class="p">[</span>
      <span class="nc">Select</span><span class="p">(</span>
        <span class="nb">id</span><span class="o">=</span><span class="sh">"</span><span class="s">Model</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">OpenAI - Model</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">values</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">gpt-3.5-turbo-16k</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4-32k</span><span class="sh">"</span><span class="p">],</span>
        <span class="n">initial_index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
      <span class="p">),</span>
      <span class="nc">Slider</span><span class="p">(</span>
        <span class="nb">id</span><span class="o">=</span><span class="sh">"</span><span class="s">Temperature</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">OpenAI - Temperature</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">initial</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
        <span class="nb">min</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
        <span class="nb">max</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
        <span class="n">step</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
      <span class="p">),</span>
    <span class="p">]</span>
  <span class="p">).</span><span class="nf">send</span><span class="p">()</span>
  <span class="k">await</span> <span class="nf">setup_chain</span><span class="p">(</span><span class="n">settings</span><span class="p">)</span>
</code></pre></div></div>

<p>In this chunk we define the chat settings that the user can change on the fly, which is a feature of chainlit apps. 
In this case we allow the user to select different types of models that OpenAI has on offer through its API.
I default to the <code class="language-plaintext highlighter-rouge">gpt-3.5-turbo-16k</code> model, because it is still relatively cheap and has a longer context window than the <code class="language-plaintext highlighter-rouge">gpt-3.5-turbo</code> model.
I have found that, with the number of fragments that I retrieve, this longer context window is often necessary.
The user can also set temperature for the model, which controls how deterministic its answers will be: A higher temperature will allow for more variability in answers.</p>

<p>We could include more settings if we wanted. 
For example, in another, more elaborate tool that I made, I also allow the user to set the number of text fragments retrieved by the <code class="language-plaintext highlighter-rouge">base retriever</code>.
It should also be possible to control the size of the memory window using chat settings.</p>

<p>The next chunk of the script is called whenever one of the above chat settings is changed, but it is also run the outset, when a new chat is started:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># When settings are updated
</span><span class="nd">@cl.on_settings_update</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">setup_chain</span><span class="p">(</span><span class="n">settings</span><span class="p">):</span>
  <span class="c1"># Set llm
</span>  <span class="n">llm</span><span class="o">=</span><span class="nc">ChatOpenAI</span><span class="p">(</span>
    <span class="n">temperature</span><span class="o">=</span><span class="n">settings</span><span class="p">[</span><span class="sh">"</span><span class="s">Temperature</span><span class="sh">"</span><span class="p">],</span>
    <span class="n">model</span><span class="o">=</span><span class="n">settings</span><span class="p">[</span><span class="sh">"</span><span class="s">Model</span><span class="sh">"</span><span class="p">],</span>
  <span class="p">)</span>
 
  <span class="c1"># Set up conversational chain
</span>  <span class="n">chain</span> <span class="o">=</span> <span class="n">ConversationalRetrievalChain</span><span class="p">.</span><span class="nf">from_llm</span><span class="p">(</span>
    <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
    <span class="n">retriever</span><span class="o">=</span><span class="n">retriever</span><span class="p">,</span>
    <span class="n">chain_type</span><span class="o">=</span><span class="sh">"</span><span class="s">stuff</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">return_source_documents</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">return_generated_question</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">combine_docs_chain_kwargs</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">prompt</span><span class="sh">'</span><span class="p">:</span> <span class="n">chat_prompt</span><span class="p">},</span>
    <span class="n">memory</span><span class="o">=</span><span class="n">memory</span><span class="p">,</span>
    <span class="n">condense_question_llm</span> <span class="o">=</span> <span class="nc">ChatOpenAI</span><span class="p">(</span><span class="n">temperature</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="sh">'</span><span class="s">gpt-3.5-turbo</span><span class="sh">'</span><span class="p">),</span>
  <span class="p">)</span>
  <span class="n">cl</span><span class="p">.</span><span class="n">user_session</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="sh">"</span><span class="s">chain</span><span class="sh">"</span><span class="p">,</span> <span class="n">chain</span><span class="p">)</span>
</code></pre></div></div>
<p>Here, we first specify the LLM that we will be conversing with. 
As you can see, the parameters of this model are retrieved from the chat settings, namely the model name and its temperature.</p>

<p>We then finally get to setting up the <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code>.
We clarify what LLM we wish to converse with.
We then tell the chain what retriever we will be using (our <code class="language-plaintext highlighter-rouge">ContextualCompressionRetriever</code>). 
We also define <em>how</em> our documents are integrated in the <code class="language-plaintext highlighter-rouge">context</code> variable of our prompts, for which <a href="https://python.langchain.com/docs/modules/chains/document/">the LangChain framework offers several options</a>.
I use the simplest one, ‘stuff documents’, which basically stuffs also retrieved fragments in the context.
The other options usually involve iterating over our fragments in different ways.
This is more time consuming and it often involves additional calls to LLMs, which makes them more expensive options.
So far, I have not seen great benefit from using any of these other options.
We tell the chain to also return the ‘source documents’, which allows us to access the actual fragments of text that our retriever retrieves.
We need to do this if we want to enable our tool to report its sources in the log file that we have it create.
For similar reasons, we also tell the chain to retun the question that it generated.
We then specify the prompt that we want the chain to use, which is the chat prompt we created earlier.
We also specify the memory object that the chain can use to memorize our conversation, such that we can have an actual conversation with the LLM.
Finally, in this we case we also specify the model that the chain can use to condense questions (which is something it apparently always does).
By default, it will use the model that we set with the <code class="language-plaintext highlighter-rouge">llm</code> parameter, but I force it to use the <code class="language-plaintext highlighter-rouge">gpt-3.5-turbo</code> model, because it is unnecessary to use a more expensive model for this.</p>

<p>So now we have our <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> all set up!</p>
<h2 id="messages">Messages</h2>
<p>The last chunk of our script basically handles what happens when messages are being sent to an LLM:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@cl.on_message</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
  <span class="n">chain</span> <span class="o">=</span> <span class="n">cl</span><span class="p">.</span><span class="n">user_session</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">chain</span><span class="sh">"</span><span class="p">)</span>
  <span class="n">cb</span> <span class="o">=</span> <span class="n">cl</span><span class="p">.</span><span class="nc">LangchainCallbackHandler</span><span class="p">()</span>
  <span class="n">cb</span><span class="p">.</span><span class="n">answer_reached</span> <span class="o">=</span> <span class="bp">True</span>
  <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">cl</span><span class="p">.</span><span class="nf">make_async</span><span class="p">(</span><span class="n">chain</span><span class="p">)(</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="n">callbacks</span><span class="o">=</span><span class="p">[</span><span class="n">cb</span><span class="p">])</span>
  <span class="n">question</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">]</span>
  <span class="n">answer</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="sh">"</span><span class="s">answer</span><span class="sh">"</span><span class="p">]</span>
  <span class="n">answer</span> <span class="o">+=</span> <span class="sh">"</span><span class="se">\n\n</span><span class="s"> Sources:</span><span class="se">\n\n</span><span class="sh">"</span>
  <span class="n">sources</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="sh">"</span><span class="s">source_documents</span><span class="sh">"</span><span class="p">]</span>
  <span class="n">print_sources</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">* Query:</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">question</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">* Answer:</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="sh">'</span><span class="s">answer</span><span class="sh">'</span><span class="p">])</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">source</span> <span class="ow">in</span> <span class="n">sources</span><span class="p">:</span>
      <span class="n">reference</span> <span class="o">=</span> <span class="sh">"</span><span class="s">INVALID REF</span><span class="sh">"</span>
      <span class="k">if</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">ENTRYTYPE</span><span class="sh">'</span><span class="p">)</span> <span class="o">==</span> <span class="sh">'</span><span class="s">article</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">reference</span> <span class="o">=</span> <span class="p">(</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">author</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> (</span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">). </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">. </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">journal</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">, </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">volume</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> (</span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">number</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">): </span><span class="sh">"</span> <span class="o">+</span> 
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">pages</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
      <span class="k">elif</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">ENTRYTYPE</span><span class="sh">'</span><span class="p">)</span> <span class="o">==</span> <span class="sh">'</span><span class="s">book</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">author</span> <span class="o">=</span> <span class="sh">""</span>
        <span class="k">if</span> <span class="sh">'</span><span class="s">author</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">:</span>
          <span class="n">author</span> <span class="o">=</span> <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">author</span><span class="sh">'</span><span class="p">,</span> <span class="sh">"</span><span class="s">NA</span><span class="sh">"</span><span class="p">))</span>
        <span class="k">elif</span> <span class="sh">'</span><span class="s">editor</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">:</span>
          <span class="n">author</span> <span class="o">=</span> <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">editor</span><span class="sh">'</span><span class="p">,</span> <span class="sh">"</span><span class="s">NA</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">reference</span> <span class="o">=</span> <span class="p">(</span>
          <span class="n">author</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> (</span><span class="sh">"</span> <span class="o">+</span> 
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">). </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">. </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">address</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">: </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">publisher</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
      <span class="k">elif</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">ENTRYTYPE</span><span class="sh">'</span><span class="p">)</span> <span class="o">==</span> <span class="sh">'</span><span class="s">incollection</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">reference</span> <span class="o">=</span> <span class="p">(</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">author</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> (</span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">). </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">. </span><span class="sh">"</span> <span class="o">+</span>
          <span class="sh">"</span><span class="s">In: </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">editor</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> 
          <span class="sh">"</span><span class="s"> (Eds.), </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">booktitle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">, </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">pages</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="n">author</span> <span class="o">=</span> <span class="sh">""</span>
        <span class="k">if</span> <span class="sh">'</span><span class="s">author</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">:</span>
          <span class="n">author</span> <span class="o">=</span> <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">author</span><span class="sh">'</span><span class="p">,</span> <span class="sh">"</span><span class="s">NA</span><span class="sh">"</span><span class="p">))</span>
        <span class="k">elif</span> <span class="sh">'</span><span class="s">editor</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">:</span>
          <span class="n">author</span> <span class="o">=</span> <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">editor</span><span class="sh">'</span><span class="p">,</span> <span class="sh">"</span><span class="s">NA</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">reference</span> <span class="o">=</span> <span class="p">(</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">author</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> (</span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">). </span><span class="sh">"</span> <span class="o">+</span>
          <span class="nf">string_cleanup</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">'</span><span class="s">source</span><span class="sh">'</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">print_sources</span><span class="p">:</span>
        <span class="n">print_sources</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">'</span><span class="s">source</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">answer</span> <span class="o">+=</span> <span class="sh">'</span><span class="s">- </span><span class="sh">'</span>
        <span class="n">answer</span> <span class="o">+=</span> <span class="n">reference</span>
        <span class="n">answer</span> <span class="o">+=</span> <span class="sh">'</span><span class="se">\n</span><span class="sh">'</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">** Document_</span><span class="si">{</span><span class="n">counter</span><span class="si">}</span><span class="s">:</span><span class="se">\n</span><span class="s">- </span><span class="sh">"</span><span class="p">)</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">reference</span><span class="p">)</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">- </span><span class="sh">"</span><span class="p">)</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">'</span><span class="s">source</span><span class="sh">'</span><span class="p">]))</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">*** Content:</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">page_content</span><span class="p">)</span>
      <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">)</span>
      <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>

  <span class="k">await</span> <span class="n">cl</span><span class="p">.</span><span class="nc">Message</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">answer</span><span class="p">).</span><span class="nf">send</span><span class="p">()</span>
</code></pre></div></div>
<p>This chunk is pretty lengthy, but much of it is a somewhat convoluted way of having the tool report its sources, both in is responses to the user, but also in the log file that we write to the answers folder.</p>

<p>The chunk more or less starts with a specification of the chain that we are using (the one we just created).
We then define our callback handler.
The <code class="language-plaintext highlighter-rouge">res</code> object is what we store the response of the LLM in.
It consists of several parts, including the question that we asked (remember that we told our <code class="language-plaintext highlighter-rouge">ConversationalRetrievalChain</code> to return the question), the answer to our question, and the source documents.</p>

<p>As you can see, we extend the original answer of the model with a list of our sources. 
Most of what you see in the remainder of the chunk are different approaches to formatting these sources, depending on the type of source it is.
We retrieve various metadata from our sources to format the actual references.
As mentioned before, we also include these references in our log file, along with our question and the answer that the LLM gave us.</p>

<h2 id="a-short-demonstration">A short demonstration</h2>
<p>Now that we have our complete script, let us actually use it.</p>

<p>We can start our chainlit app by going to its main folder and typing the following command:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chainlit run ask_cl.py
</code></pre></div></div>
<p>This will open a browser window in which we are greated with a default readme file (the chainlit.md file).
As mentioned previously, we can change this file as we wish.
My version of the tool looks as shown in the picture below.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/chainlit_welcome-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/chainlit_welcome-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/chainlit_welcome-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/chainlit_welcome.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
The chainlit interface once we run our app.
</div>

<p>We can now start asking our app questions.
In the example shown below, I asked the app what “chains of action” are, a concept used by Theodore Schatzki in his version of social practice theories.
The answer that we get is pretty good.
Also notice how the app reports the sources it consulted, which are papers that I have in my Zotero library.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/chainlit_answer_schatzki-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/chainlit_answer_schatzki-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/chainlit_answer_schatzki-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/chainlit_answer_schatzki.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
The chainlit interface once we run our app.
</div>

<p>Let us also take a look at part of the answer file that has been created and populated in the meantime:</p>
<pre><code class="language-org">#+OPTIONS: toc:nil author:nil
#+TITLE: Answers and sources for session started on 20231023_222003

* Query:
What are chains of action?
* Answer:
Chains of action refer to a series of performances or actions in which each member of the chain responds to the preceding activity, what was said, or a change in the world brought about by the previous activity. These chains link individuals and their actions, forming a temporal thread that connects their pasts and presents. Chains of action can occur within and between bundles and constellations, and they play a crucial role in shaping social life and bringing about changes in practices, arrangements, and bundles. (Schatzki, 2016) 

Bibliography:
Schatzki, T. R. (2016). Chains of action and the plenum of practices. In The Timespace of Human Activity: On Performance, Society, and History as Indeterminate Teleological Events (pp. 67-68). Franz Steiner Verlag.
** Document_1:
- Schatzki, Theodore R. (2016). Keeping Track of Large Phenomena. Geographische Zeitschrift, 104 (): 4--24.
- Schatzki_2016_Geographische Zeitschrift.txt
*** Content:
(7) Interactions, as noted, form one sort of action chain, namely, those encompassing reciprocal reactions by two or more people. Subtypes include exchange,
teamwork, conversation, communication, and the transmission of information. (These concepts can also be used to name nexuses of chains: compare two
people exchanging presents in person to two tribes exchanging gifts over several months.) Other types of chain are imitation (in a more intuitive sense than
Tarde’s ubiquitous appropriation) and governance (intentional shaping and influencing). Beyond these and other named types of chains, social life houses an
immense number of highly contingent and haphazard chains of unnamed types
that often go uncognized and unrecognized yet build a formative unfolding rhizomatic structure in social life.
4. Chains of Action and the Plenum of Practices
Individualists can welcome the idea of action chains. Indeed, unintentional consequences of action, the existence of which is central to the individualist outlook, can
be construed as results of action chains. Contrary to individualists, however, practice
theorists do not believe that action chains occur in a vacuum, less metaphorically, that
they occur only in a texture formed by more individuals and their actions. Rather,
chains transpire in the plenum of practices. This implies that they propagate within
and between bundles and constellations.

** Document_2:
- Schatzki, Theodore R. (2010). The Timespace of Human Activity: On Performance, Society, and History as Indeterminate Teleological Events. Lanham, Md: Lexington Books.
- Schatzki_2010_The timespace of human activity.txt
*** Content:
The second type of sinew embraces chains of action. Lives hang together
when chains of action pass through and thereby link them. A chain of ac-
tion is a series of performances, each member of which responds either to
the preceding activity in the series, to what the previous activity said, or to a
change in the world that the preceding activity brought about. For example,
when a person taking a horse farm tour drops a map on the ground, and the
tour leader picks it up and puts it in a trash receptacle, their lives are linked
Activity Timespace and Social Life 67

by a chain of action (which also connects them to the people who installed
the receptacle). Conversations, to take another example, are chains of action
in which people respond to what others say or to the saying of it. Chains of
action are configurations of interwoven temporality. For responding to an
action, to something said, or to a change in the world is the past dimension of
activity. Each link in a chain of action thus involves some person’s past, and
a chain comprising multiple links strings together the pasts and presents of
different people.
</code></pre>

<p>You can see that it lists my question, the answer that I was given, and the various fragments of text on which the answer was based.
This not only allows us to double check the answers that I got, but also to quickly identify parts of different papers that we might want to look into more.</p>

<h2 id="just-the-beginning">Just the beginning</h2>
<p>I hope this post is useful to people that would like to build something similar themselves.
The app described in this post builds on one of the first LangChain tools that I developed (I did do a lot of fine-tuning of it over time).
It has been incredibly useful for me, but it has more or less become redundant after I started developing an <a href="https://python.langchain.com/docs/modules/agents.html">agent</a> that I can use to not only chat about my literature, but also for various other things. 
This includes retrieving information from empirical sources (e.g., news archives) and then relating conceptual knowledge to that empirical information.
I will go into the use of agents in future posts.</p>]]></content><author><name></name></author><category term="Software" /><category term="LLM" /><category term="langchain" /><category term="Python" /><summary type="html"><![CDATA[Intro In the summer, I started a series of posts on using the LangChain framework. This is the second post in that series. In the first post I introduced the idea of retrieval augmentation and vector stores and I explained the Python scripts that I use to create and update vector stores. In this post I go into the actual use of retrieval augmentation. The example I focus on here is the use of retrieval augmentation to chat with OpenAI’s Large Language Models (LLMs) about the literature on my Zotero library.]]></summary></entry><entry><title type="html">Simple universal bookmarking</title><link href="http://localhost:4000/blog/2023/simple-universal-bookmarking/" rel="alternate" type="text/html" title="Simple universal bookmarking" /><published>2023-08-03T09:30:00+02:00</published><updated>2023-08-03T09:30:00+02:00</updated><id>http://localhost:4000/blog/2023/simple-universal-bookmarking</id><content type="html" xml:base="http://localhost:4000/blog/2023/simple-universal-bookmarking/"><![CDATA[<h2 id="bookmarking-troubles">Bookmarking troubles</h2>
<p>I use multiple internet browsers. 
My default browser is <a href="https://qutebrowser.org/">qutebrowser</a>, but for some things that qutebrowser doesn’t handle well I switch to <a href="https://brave.com/">Brave</a>.
I am also experimenting with <a href="https://nyxt.atlas.engineer/">Nyxt</a>, which I started exploring as a possible alternative to qutebrowser.
However, it is not yet stable enough for me to make the switch.
Also, some things, like Netflix, do not work on Nyxt yet and I have no idea if there is a way to fix that.</p>

<p>One minor inconvenience when switching between browsers is that my bookmarks are not synchronized across them. 
I have converted my qutebrowser quickmarks to Nyxt bookmarks multiple times, but that is not something that I would like to keep doing, because it is time-consuming.</p>

<h2 id="a-simple-solution">A simple solution</h2>
<p>I had a vague memory of Luke Smith talking about a simple solution for universal bookmarking that he uses.
With ‘universal bookmarking’ I mean one bookmarking system that can be used across different browsers.
Luke Smith discusses this in a <a href="https://www.youtube.com/watch?v=d_11QaTlf1I">Youtube video</a>.
His makes use of lightweight tools, such as <a href="https://github.com/jordansissel/xdotool">xdotool</a>, <a href="https://github.com/astrand/xclip">xclip</a> and <a href="https://tools.suckless.org/dmenu/">dmenu</a>.
I also found <a href="https://github.com/nullf6/dmenu-bookmarks/tree/main">this repo</a> with a script that expands on Luke’s idea a bit.
I played around with this expanded solution and then tweaked it further to have something that I am happy about.</p>

<p>My version, at its core, consists of two scripts. 
The first script is basically the command that inserts bookmarks that Luke shows in his video’s (with minor edits). 
Luke binds this command directly to a keybind in his DWM configuration.
I found it more convenient to keep the command as a separate script and to just call the script with a similar keybind.
This allows me to modify the script without having to rebuild DWM.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>

xdotool <span class="nb">type</span> <span class="si">$(</span><span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'^#'</span> ~/.local/share/bookmarks | dmenu <span class="nt">-l</span> 20 <span class="nt">-F</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">' '</span> <span class="nt">-f1</span><span class="si">)</span>

</code></pre></div></div>

<p>The script finds all the lines in my bookmarks file (a plain text file) that do not start with a <code class="language-plaintext highlighter-rouge">#</code> (a comment), pipes these into dmenu, allowing me to select one of the bookmarks recorded in the file, and this then gets typed into whatever text field I have selected at the time (using <code class="language-plaintext highlighter-rouge">xdotool type</code>).
I include titles and tags with my bookmarks, so dmenu should only output the url address itself, which is what the <code class="language-plaintext highlighter-rouge">cut -d' ' -f1</code> is for.</p>

<p>See the example of an url, as it is recorded in my bookmarks file, below.</p>
<pre><code class="language-txt">https://mynoise.net/noiseMachines.php - MyNoise - Audio
</code></pre>

<p>I also have a script for creating new bookmarks.
Unlike Luke, I opted for not just bookmarking whatever text is currently selected, but I went for something where you can type or paste in a url and then edit it further (following the example of <a href="https://github.com/nullf6/dmenu-bookmarks/tree/main">the earlier mentioned repo</a>).
I also decided to get rid of the part of the script where you paste in the currently selected text altogether.
I think that makes sense when you typically use browsers with normal url-bars, but qutebrowser and Nyxt don’t have one.
With those browsers, it makes more sense to just copy the currently visited url (<code class="language-plaintext highlighter-rouge">yy</code> in qutebrowser) and then paste it into the dmenu prompt (the default keybind for that in dmenu is <code class="language-plaintext highlighter-rouge">C-Y</code>).</p>

<p>My version of the script thus opens an empty dmenu prompt where you can paste in the url you want to bookmark and type anything else that you want to include alongside it. 
For example, I will typically type in a title and some tags as shown in the example above.</p>

<p>The script then checks if an entry with the url already exists in the bookmark file, ignoring any titles or tags that might be associated with it.
If the url already exists, no new bookmark will be created.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>

<span class="nv">file</span><span class="o">=</span><span class="s2">"</span><span class="nv">$XDG_DATA_HOME</span><span class="s2">/bookmarks"</span>

<span class="nv">bookmark</span><span class="o">=</span><span class="si">$(</span>:|dmenu <span class="nt">-p</span> <span class="s2">"edit bookmark:"</span><span class="si">)</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$bookmark</span><span class="s2">"</span> <span class="o">]</span>
<span class="k">then
    </span>notify-send <span class="nt">-e</span> <span class="s2">"bookmark creation cancelled."</span>
    <span class="k">return </span>1
<span class="k">else
    </span><span class="nv">bookmarkUrl</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">bookmark</span><span class="p">%% *</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">if </span><span class="nb">grep</span> <span class="nt">-q</span> <span class="s2">"^</span><span class="nv">$bookmarkUrl</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span>
    <span class="k">then
	</span>notify-send <span class="nt">-e</span> <span class="s2">"already bookmarked."</span>
    <span class="k">else
	</span>notify-send <span class="nt">-e</span> <span class="s2">"bookmark successfully added as </span><span class="nv">$bookmark</span><span class="s2">."</span>
	<span class="nb">echo</span> <span class="s2">"</span><span class="nv">$bookmark</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span>
    <span class="k">fi
fi</span>
</code></pre></div></div>
<p>I like this simple solution.
It uses, lightweight tools, it uses a simple text file that we can easily edit to keep the bookmarks, and it uses scripts that we can easily adapt or update if we want to.
Also, the bookmarks can be typed in anywhere; not just url-bars.
For example, I could also use it to include links that I’ve bookmarked in blog posts.
My bookmarking troubles are over.</p>]]></content><author><name></name></author><category term="Software" /><category term="bash" /><category term="dmenu" /><category term="Linux" /><summary type="html"><![CDATA[Bookmarking troubles I use multiple internet browsers. My default browser is qutebrowser, but for some things that qutebrowser doesn’t handle well I switch to Brave. I am also experimenting with Nyxt, which I started exploring as a possible alternative to qutebrowser. However, it is not yet stable enough for me to make the switch. Also, some things, like Netflix, do not work on Nyxt yet and I have no idea if there is a way to fix that.]]></summary></entry><entry><title type="html">Using LLMs with retrieval augmentation through LangChain</title><link href="http://localhost:4000/blog/2023/using-llms-with-retrieval-augmentation-through-langchain/" rel="alternate" type="text/html" title="Using LLMs with retrieval augmentation through LangChain" /><published>2023-08-02T09:30:00+02:00</published><updated>2023-08-02T09:30:00+02:00</updated><id>http://localhost:4000/blog/2023/using-llms-with-retrieval-augmentation-through-langchain</id><content type="html" xml:base="http://localhost:4000/blog/2023/using-llms-with-retrieval-augmentation-through-langchain/"><![CDATA[<h2 id="intro">Intro</h2>
<p>This is going to be the first post in a series of posts on using the <a href="https://python.langchain.com/docs/get_started/introduction.html">LangChain</a> framework.
With LangChain you can develop apps that are powered by Large Language Models (LLMs).
I primarily use LangChain to build applications for chatting about literature in my Zotero library and other text data on my computer.
My intention was to write a blog post that explains how to build these applications and how they work.
However, there is too much ground to cover for a single post, so I decided to break it down into multiple posts.</p>

<p>This first post covers:</p>
<ol>
  <li>Background on how the development of LLM-powered applications started for me.</li>
  <li>Application of LLM-powered that interests me most right now: <a href="https://www.promptingguide.ai/techniques/rag">retrieval augmentation</a></li>
  <li>Explanation of how I implement some of the steps in retrieval augmentation, like creating and maintaining <a href="https://python.langchain.com/docs/modules/data_connection/vectorstores/">vector stores</a> for ingesting documents that we want to chat about. 
In future posts I will discuss other parts of the process, such as setting up chatbots using LangChain for discussing documents and creating <a href="https://python.langchain.com/docs/modules/agents/">agents</a> to take things further.</li>
</ol>

<h2 id="mind-blown">Mind-blown</h2>
<p>When ChatGPT was first released, I barely took notice.
I heard some people say impressive things about ChatGPT, but I didn’t immediately feel the urge to try it out.
Eventually, a few months ago, I decided to give it a try.
I was mind-blown.
For an entire week, I had ChatGPT spit out crazy, nonsensical stories.
There was one about a talking horse that specialized in public-private partnerships and saved a village by helping to create new infrastructure.
I remember one about a hero who rode his horse backwards because he was afraid of being followed by purple frogs.
There was also another one about someone who put themselves in orbit around the Earth by pulling themselves up by their own hair.
The funniest part was that ChatGPT added a disclaimer by the end, stating that it was purely fictional and that you cannot actually put yourself in orbit in this way.</p>

<p>I quickly started trying out things that might be useful for my work in academia.
For example, I had ChatGPT come up with an assignment about analyzing policy interventions from a behavioral perspective.
Although I didn’t actually use it, I could have with just a few tweaks.
I also entered into discussions with ChatGPT about theories and philosophy.
I found ChatGPT to be a useful conversational partner on many topics, as long as you already know your stuff and can spot the things that ChatGPT gets wrong (which happens frequently; at some point, I got fed up with ChatGPT constantly apologizing for getting things wrong).
I even tried a hybrid of storytelling and conversation on theories, having ChatGPT tell a fictional story about an academic and then querying ChatGPT about the contents of the papers written by this fictional academic.</p>

<p>I don’t remember exactly when I started using ChatGPT for code writing, but its co-pilot capabilities are another aspect that blew me away and changed the way I write code. 
I recently read <a href="https://news.ycombinator.com/item?id=36855516">a post on hacker news</a> about how traffic on StackOverflow has declined recently. 
I have a strong suspicion that ChatGPT has contributed to this.</p>

<p>While I continue to be mind-blown to this day (in a positive way), I would also like to note that, like many others, I have occasionally felt uncertain and worried about where this will all lead. 
I am certainly no expert on AI, so please take anything I say on this with a grain of salt.
That being said, I am not that concerned about the ‘AI going rogue’ scenario, because I think that tools like ChatGPT give the strong appearance of being intelligent, but in reality are as dumb as a bag of rocks. 
What I am more afraid of is <a href="https://www.economist.com/by-invitation/2023/07/21/one-of-the-godfathers-of-ai-airs-his-concerns">what humans might do</a> with powerful tools like LLMs (or whatever comes next).
Also, I feel somewhat uncomfortable with the fact that progress in this area is driven almost entirely by business interests.
I think it is important that we think of alternative models for the further development of AI, such as the ‘Island’ idea put forward in <a href="https://www.ft.com/content/03895dc4-a3b7-481e-95cc-336a524f2ac2">this article of the FT Magazine</a>.
It is also encouraging to see initiatives such as the development of <a href="https://huggingface.co/bigscience/bloomz">the Bloomz model</a> and <a href="https://github.com/bigscience-workshop/petals#benchmarks">petals</a> (my GPU is now hosting one block of a BloomZ model through petals; admittedly an almost meaningless contribution), which are both initiatives of <a href="https://bigscience.huggingface.co/">BigScience</a>. 
Yet, in my limited experience OpenAI’s GPT models blow models such as Bloomz out of the water when it comes to the quality of their output.
The debate on how this AI revolution should unfold and be governed is an important one, but it is not a debate I want to engage with in these posts.
I would like to focus on different ways in which we can make LLMs useful for academic work.</p>

<blockquote>
I'll reiterate that I am no expert on AI, and given that many people who are an expert on the topic are worried, I am probably overlooking or misunderstanding something.
Feel free to write me a message to educate me on this.
</blockquote>

<h2 id="down-the-llm-rabbit-hole-with-langchain">Down the LLM rabbit hole with LangChain</h2>
<p>As described above, my first introduction to LLMs was through ChatGPT, which I believe is the case for many others.
While I had a lot of fun with ChatGPT alone, things became even more interesting after I discovered <a href="https://python.langchain.com/docs/get_started/introduction.html">LangChain</a>.
I was introduced to LangChain by a <a href="https://www.youtube.com/watch?v=9AXP7tCI9PI">Youtube video</a>.
In the video, Techlead demonstrates how LangChain allows you to chat with Language Models (LLMs) about data stored on your own computer.
Techlead also provides a <a href="https://github.com/techleadhd/chatgpt-retrieval">simple example</a> on his GitHub repository, which can help you get started even if you don’t fully understand how LangChain works.
As mentioned in the introduction, you can use LangChain to develop LLM-powered apps.
These LLMs can run on your own computer or be accessed via APIs.
The apps I have created using LangChain so far make use of the OpenAI API, which provides access to chat models like <code class="language-plaintext highlighter-rouge">gpt3.5-turbo</code> and <code class="language-plaintext highlighter-rouge">gpt4</code>, as well as the <code class="language-plaintext highlighter-rouge">text-embedding-ada-002</code> embedding model (Using the OpenAI API is <a href="https://openai.com/pricing">not for free</a>).</p>

<p>As the name suggests, LangChain utilizes chains, which <a href="https://python.langchain.com/docs/modules/chains/">the documentation</a> defines as sequences of calls to components. These components are abstractions for working with language models, along with various implementations for each abstraction. 
In simple terms, LangChain offers a set of tools that allow you to interact with LLMs in different ways, and it offers an easy way to chain these tools together.
This enables you to accomplish complex tasks with minimal code.
LangChain comes with a wide variety of pre-built chains, which means that you can build useful tools quickly.</p>

<p>LangChain also allows the creation of <a href="https://python.langchain.com/docs/modules/agents/">agents</a>, which are LLMs that can choose actions based on user prompts.
Agents simulate reasoning processes to determine which actions to take and in what order.
These actions often involve using <a href="https://python.langchain.com/docs/modules/agents/tools/">tools</a> that we provide to the agent, which are different types of chains powered by LLMs.
In simple terms, an agent is an LLM that can use other instances of LLMs for different tasks, depending on the specific needs.
There are undoubtedly many different kinds of useful applications that you can build with this framework, but I was drawn primarily to the idea of ‘chatting with your own data’.
This involves something that is called <a href="https://www.promptingguide.ai/techniques/rag">retrieval augmentation</a>.</p>

<h2 id="retrieval-augmentation">Retrieval augmentation</h2>
<p>With retrieval augmentation, you extract information from documents and include that information as context in the messages that you send to an LLM. 
This allows the LLM to not only make use of the knowledge that it obtained during training (<a href="https://www.pinecone.io/learn/series/langchain/langchain-retrieval-augmentation/">parametric knowledge</a>), but also of ‘external’ knowledge that you extract from the documents (source knowledge).
Supposedly, this helps to combat so-called <a href="https://towardsdatascience.com/llm-hallucinations-ec831dcd7786">hallucinations</a> (or <a href="https://machinelearningmastery.com/a-gentle-introduction-to-hallucinations-in-large-language-models/">check this link</a> if you don’t have a Medium account).
That in itself is useful, but I was primarily enthusiastic about the idea of chatting with an LLM about the literature that I have collected in my Zotero library.</p>

<blockquote>
Retrieval augmentation thus is something different from training or fine-tuning an LLM with your own data. It doesn't actually alter the model weights as would be the case with fine-tuning and training. Instead, the model just temporarily learns about the external knowledge included in your messages.
</blockquote>

<p>While the idea of extracting information from documents to include them as context in your messages to LLMs is simple enough, there are some challenges we need to overcome:</p>

<p>First, it is not practical if we have to manually find and extract the relevant information from our documents.
We might not even know exactly which information from which documents is relevant to our query in the first place.
Obviously, this part of the process is something we want to automate, which fortunately is easy using retrieval augmentation.</p>

<p>Second, there are limits to how much context we can include in our messages to LLMs.
Every LLM model has something called a context window, which refers to the number of tokens we can use in a single interaction with an LLM, including both the input (our query) and the output (the LLM’s answer) of that interaction.
Different models have differently sized context windows.
For example, the <code class="language-plaintext highlighter-rouge">gpt3.5-turbo</code> model has a context window of 4,096 tokens.
The slightly more expensive <code class="language-plaintext highlighter-rouge">gpt3.5-turbo-16k</code> model, which I now use as my default, has a context window of 16,384 tokens.
The <code class="language-plaintext highlighter-rouge">gpt-4-32k</code> model has a context window of 32,768 tokens, but it is much more expensive than the <code class="language-plaintext highlighter-rouge">gpt3.5</code> models.
Anthropic’s Claude 2, currently only available in the US and the UK, has an impressive context window size of 100k tokens!
Regardless, the length of the text that you include in your messages as context is limited by the model’s context window.
If we want to ask questions about our literature, we cannot simply dump our entire library of papers into our messages.</p>

<p>Third, we might not want to dump our entire library in our messages, or even an entire book or paper, for another reason: 
Not all information in a given paper will be relevant to the question we are asking the LLM. 
It would be preferable to include only the relevant bits of information in our messages and exclude anything that might distract from our question.
Fortunately, this can be easily achieved using tools provided by the LangChain framework.
I will now discuss some of these tools.</p>

<h2 id="vector-stores">Vector stores</h2>
<p><a href="https://python.langchain.com/docs/modules/data_connection/vectorstores/">Vector stores</a> are perhaps the most important tools in the process of retrieval augmentation. 
A vector store is a kind of database in which you can store documents in two forms:</p>
<ol>
  <li>The actual documents in textual form, along with metadata.</li>
  <li>The documents in their ‘embedded’ form, which is numerical representation of the documents.
In their embedded form, documents are stored as vectors that represent their position in a high-dimensional semantic space (the closer texts are in this space, the more similar they are in their meaning).
For example, OpenAI’s <code class="language-plaintext highlighter-rouge">text-embedding-ada-002</code> model turns documents into vectors with 1,536 dimensions.</li>
</ol>

<p>LangChain supports a variety of vector stores.
The one I chose to use is the <a href="https://python.langchain.com/docs/integrations/vectorstores/faiss">FAISS</a> vector store, for the following reasons:</p>
<ol>
  <li>It allows you to keep your vector stores on your local drive (it doesn’t require a cloud solution).</li>
  <li>For my purposes it is important that I can easily save, load and update a vector store and I found the approach that the FAISS vector store takes to this to be the most intuitive.</li>
</ol>

<p>Another type of vector store that offers similar functionality is ChromaDB, which also seems to be popular.
I advise you to <a href="https://js.langchain.com/docs/modules/data_connehttps://github.com/tesseract-ocr/tesseract/tree/0768e4ff4c21aaf0b9beb297e6bb79ad8cb301b0ction/vectorstores/">explore</a> the different available types of vector stores in LangChain before picking one to use yourself.</p>

<p>To store our documents in a vector store we need to take multiple steps (I’ll walk through these in more detail in the remainder of this blog post):</p>
<ol>
  <li>We need to convert our documents to plain text (assuming that many of them will be in PDF-format originally).
LangChain includes PyPDF-based tools that will do this for you, but I opted to convert my files using a bash script that utilizes the <code class="language-plaintext highlighter-rouge">pdfttotext</code> and <code class="language-plaintext highlighter-rouge">pdfimage</code> command-line tools. 
You might want to simply make use of the built-in tools that LangChain provides instead. 
I opted for the bash script because it makes it easier to check the results of the conversion process.</li>
  <li>We need to load our documents into our application, for which LangChain again offers multiple solutions.
We’ll use the <code class="language-plaintext highlighter-rouge">DirectoryLoader</code> as we’ll be loading multiple documents from a directory.</li>
  <li>We might want to add metadata to our documents, which can be stored along with the documents in our vector store. 
For example, I like to add the bibliographical details of the publications in my Zotero library.
We will want to do this before we cut up our documents in smaller chunks (the next step).</li>
  <li>We will want to cut our documents into smaller chunks that we than store separately in our vector store.
When we retrieve information from our vector store, we’ll thus retrieve these smaller chunks, rather than the entire original documents.
This allows us to retrieve relevant information in a more targeted way, as well as limit the amount of text we include as context in our messages to LLMs (see our earlier discussion on challenges in extracting contextual information from documents).
LangChain comes with multiple text splitters that can accomplish this task for us.
We’ll be using the <code class="language-plaintext highlighter-rouge">RecursiveCharacterTextSplitter</code>.</li>
  <li>We need to create the embeddings for our chunks of texts, for which we will use OpenAI’s <code class="language-plaintext highlighter-rouge">text-embedding-ada-002</code>.
Again, there are other options available, but I haven’t had the chance to experiment with these yet and I’m quite happy with the results I have achieved with the OpenAI solution.</li>
  <li>Then we have everything we need to store our documents, along with their embeddings, in our vector store.</li>
</ol>

<p>Let’s now go through these steps in more detail.</p>

<h2 id="converting-to-text">Converting to text</h2>
<p>I’ll briefly explain the logic of the bash script (which you can find below) that I use to convert the literature in my Zotero library (all PDFs) to text.</p>

<p>The bash script finds all the PDFs included in my Zotero storage folder, which has sub-folders for each publication.
For each file it checks if the filename is already mentioned in a text file that I use to keep track of every document that I have already ingested.
I frequently update my Zotero library, and if I want update my vector store by adding new publications, I don’t want to also convert all files that have already been ingested. Keeping track of the files that have already been ingested allows me to skip these in the conversion process.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># One file to keep the papers that I have already ingested</span>
<span class="c"># One dir to store newly added papers</span>
<span class="c"># A temporary dir for image-based pdfs.</span>
<span class="nv">existing_file</span><span class="o">=</span><span class="s2">"/home/wouter/Documents/LangChain_Projects/Literature/data/ingested.txt"</span>
<span class="nv">output_dir</span><span class="o">=</span><span class="s2">"/home/wouter/Documents/LangChain_Projects/Literature/data/new"</span>
<span class="nv">temp_dir</span><span class="o">=</span><span class="s2">"/home/wouter/Documents/LangChain_Projects/Literature/data/temp"</span>

<span class="nv">counter</span><span class="o">=</span>0

<span class="nv">total</span><span class="o">=</span><span class="si">$(</span>find /home/wouter/Tools/Zotero/storage/ <span class="nt">-type</span> f <span class="nt">-name</span> <span class="s2">"*.pdf"</span> | <span class="nb">wc</span> <span class="nt">-l</span><span class="si">)</span>

find /home/wouter/Tools/Zotero/storage <span class="nt">-type</span> f <span class="nt">-name</span> <span class="s2">"*.pdf"</span> | <span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> file
<span class="k">do
    </span><span class="nv">base_name</span><span class="o">=</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> .pdf<span class="si">)</span>

    <span class="k">if </span><span class="nb">grep</span> <span class="nt">-Fxq</span> <span class="s2">"</span><span class="nv">$base_name</span><span class="s2">.txt"</span> <span class="s2">"</span><span class="nv">$existing_file</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
	</span><span class="nb">echo</span> <span class="s2">"Text file for </span><span class="nv">$file</span><span class="s2"> already exists, skipping."</span>
    <span class="k">else 
	</span>pdftotext <span class="nt">-enc</span> UTF-8 <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$output_dir</span><span class="s2">/</span><span class="nv">$base_name</span><span class="s2">.txt"</span>

	pdfimages <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$temp_dir</span><span class="s2">/</span><span class="nv">$base_name</span><span class="s2">"</span>
	
    <span class="k">fi
    </span><span class="nv">counter</span><span class="o">=</span><span class="k">$((</span>counter <span class="o">+</span> <span class="m">1</span><span class="k">))</span>
    <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"Processed </span><span class="nv">$counter</span><span class="s2"> out of </span><span class="nv">$total</span><span class="s2"> PDFs.</span><span class="se">\r</span><span class="s2">"</span>
    
<span class="k">done</span>
</code></pre></div></div>
<p>I have the bash script convert all PDFs to text with <code class="language-plaintext highlighter-rouge">pdftotext</code>, but I also convert the same files with <code class="language-plaintext highlighter-rouge">pdfimages</code>, since some of the PDFs have images rather than text (the PDFs where you cannot select the text in a regular PDF reader).
The images are stored in a temporary folder.
After converting the files, I basically just inspect the resulting files and try to identify files that <code class="language-plaintext highlighter-rouge">pdftotext</code> was not able to convert successfully (usually these are just a few bytes in size).
For all files that <em>were</em> converted successfully I delete the image files in the temporary folder.
The remaining image files are converted with another bash script (shown below), which makes use of <a href="https://github.com/tesseract-ocr/tesseract/tree/0768e4ff4c21aaf0b9beb297e6bb79ad8cb301b0">tesseract</a>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nv">output_dir</span><span class="o">=</span><span class="s2">"/home/wouter/Documents/LangChain_Projects/Literature/data/new/"</span>
<span class="nv">pbm_directory</span><span class="o">=</span><span class="s2">"/home/wouter/Documents/LangChain_Projects/Literature/data/temp"</span>

<span class="c"># Create an associative array</span>
<span class="nb">declare</span> <span class="nt">-A</span> base_names

<span class="c"># Handle filenames with spaces by changing the Internal Field Separator (IFS)</span>
<span class="nv">oldIFS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$IFS</span><span class="s2">"</span>
<span class="nv">IFS</span><span class="o">=</span><span class="s1">$'</span><span class="se">\n</span><span class="s1">'</span>

<span class="c"># Go through each file in the PBM directory</span>
<span class="k">for </span>file <span class="k">in</span> <span class="s2">"</span><span class="nv">$pbm_directory</span><span class="s2">"</span>/<span class="k">*</span>.pbm <span class="s2">"</span><span class="nv">$pbm_directory</span><span class="s2">"</span>/<span class="k">*</span>.ppm
<span class="k">do</span>
    <span class="c"># Get the base name from the path</span>
    <span class="nv">base_name</span><span class="o">=</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> | rev | <span class="nb">cut</span> <span class="nt">-d-</span> <span class="nt">-f2-</span> | rev<span class="si">)</span>

    <span class="c"># Add the base name to the associative array</span>
    base_names[<span class="s2">"</span><span class="nv">$base_name</span><span class="s2">"</span><span class="o">]=</span>1
<span class="k">done</span>

<span class="c"># Restore the original IFS</span>
<span class="nv">IFS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$oldIFS</span><span class="s2">"</span>

<span class="c"># Go through each unique base name</span>
<span class="k">for </span>base_name <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="p">!base_names[@]</span><span class="k">}</span><span class="s2">"</span>
<span class="k">do</span>
    <span class="c"># Remove any existing text file for this base name</span>
    <span class="nb">rm</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$output_dir</span><span class="s2">/</span><span class="nv">$base_name</span><span class="s2">.txt"</span>

    <span class="c"># Go through each PBM file for this base name, handling spaces in filenames</span>
    <span class="k">for </span>ext <span class="k">in </span>pbm ppm
    <span class="k">do
        </span>find <span class="s2">"</span><span class="nv">$pbm_directory</span><span class="s2">"</span> <span class="nt">-name</span> <span class="s2">"</span><span class="nv">$base_name</span><span class="s2">-*.</span><span class="nv">$ext</span><span class="s2">"</span> <span class="nt">-print0</span> | <span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> <span class="nt">-d</span> <span class="s1">$'</span><span class="se">\0</span><span class="s1">'</span> file
        <span class="k">do</span>
            <span class="c"># OCR the file and append the results to the text file</span>
	    <span class="nb">echo</span> <span class="s2">"Converting </span><span class="nv">$file</span><span class="s2">"</span> 
            tesseract <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> stdout <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$output_dir</span><span class="s2">/</span><span class="nv">$base_name</span><span class="s2">.txt"</span>
        <span class="k">done
    done
done</span>
</code></pre></div></div>
<p>After doing this, I have all documents stored as plain text files in one folder.</p>

<h2 id="continuing-in-python">Continuing in Python</h2>
<p>The remaining steps that I discuss in this post are all implemented in Python.
I will share a Python script that I call <code class="language-plaintext highlighter-rouge">indexer.py</code>, which I use to create a new vector store for the literature in my Zotero library.
I’ll be going through the script in steps.
Let’s start with some basic ‘housekeeping’ stuff, such as imports, loading our OpenAI API Key (without it, we cannot use the OpenAI models), and setting some paths that we’ll be using throughout the script.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">langchain.vectorstores</span> <span class="kn">import</span> <span class="n">FAISS</span>
<span class="kn">from</span> <span class="n">langchain.embeddings</span> <span class="kn">import</span> <span class="n">OpenAIEmbeddings</span>
<span class="kn">from</span> <span class="n">langchain.text_splitter</span> <span class="kn">import</span> <span class="n">RecursiveCharacterTextSplitter</span>
<span class="kn">from</span> <span class="n">langchain.document_loaders</span> <span class="kn">import</span> <span class="n">DirectoryLoader</span><span class="p">,</span> <span class="n">TextLoader</span>
<span class="kn">import</span> <span class="n">langchain</span>
<span class="kn">import</span> <span class="n">bibtexparser</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>
<span class="kn">import</span> <span class="n">openai</span>
<span class="kn">import</span> <span class="n">constants</span>

<span class="c1"># Set OpenAI API Key
</span><span class="nf">load_dotenv</span><span class="p">()</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">constants</span><span class="p">.</span><span class="n">APIKEY</span>
<span class="n">openai</span><span class="p">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="n">constants</span><span class="p">.</span><span class="n">APIKEY</span> 

<span class="c1"># Set paths
</span><span class="n">source_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">./data/new/</span><span class="sh">'</span>
<span class="n">store_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">./vectorstore/</span><span class="sh">'</span>
<span class="n">destination_file</span> <span class="o">=</span> <span class="sh">'</span><span class="s">./data/ingested.txt</span><span class="sh">'</span>
<span class="n">bibtex_file_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/home/wouter/Tools/Zotero/bibtex/library.bib</span><span class="sh">'</span>
</code></pre></div></div>
<p>You’ll notice that I import my API key from a file called <code class="language-plaintext highlighter-rouge">constants.py</code>, which is a file that just defines one variable, called <code class="language-plaintext highlighter-rouge">APIKEY</code>, which is a string that contains my API key. 
If you don’t have an OpenAI API key yet, you can make one on the <a href="https://platform.openai.com/">OpenAI platform</a>.
It is important that you don’t share your API key with anyone.</p>

<p>In the snippet of Python code above we set a couple of paths:</p>
<ul>
  <li>The <code class="language-plaintext highlighter-rouge">source_path</code> which contains all the text files we created in the previous step.</li>
  <li>The <code class="language-plaintext highlighter-rouge">store_path</code> where we will keep our vector store.</li>
  <li>The <code class="language-plaintext highlighter-rouge">destination_file</code> to which we’ll write the names of all the files we’ve successfully ingested later on.</li>
  <li>The <code class="language-plaintext highlighter-rouge">bibtex_file_path</code> where we store our Zotero-generated bibtex file.
We will access this file to retrieve the bibliographical metadata that we want to include with our documents.</li>
</ul>

<h2 id="loading-our-documents-and-adding-metadata">Loading our documents and adding metadata</h2>
<p>The next step is to actually load our documents, which we can easily accomplish with LangChain’s <a href="https://python.langchain.com/docs/modules/data_connection/document_loaders/file_directory">DirectoryLoader</a>.
Before chunking our documents we will also want to add the metadata to them, so that the metadata is associated with the relevant chunks.</p>

<p>We simply set up our <code class="language-plaintext highlighter-rouge">DirectoryLoader</code>, passing our <code class="language-plaintext highlighter-rouge">source_path</code> as its first argument and then setting a few options that help ensure a smooth process (the <code class="language-plaintext highlighter-rouge">show_progress=True</code> argument is not strictly necessary).</p>

<p>To add our metadata, we can go through our bibtex file, using the <a href="https://bibtexparser.readthedocs.io/en/main/">bibtexparser</a> library, and we’ll match the names of our documents to the filenames recorded in the bibtex file (Zotero conveniently records these names along with the bibliographical details).
After extracting the metadata, we go through our list of the imported documents, and we add the metadata.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load documents
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">===Loading documents===</span><span class="sh">"</span><span class="p">)</span>
<span class="n">loader</span> <span class="o">=</span> <span class="nc">DirectoryLoader</span><span class="p">(</span><span class="n">source_path</span><span class="p">,</span>
                         <span class="n">show_progress</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                         <span class="n">use_multithreading</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                         <span class="n">loader_cls</span><span class="o">=</span><span class="n">TextLoader</span><span class="p">,</span>
                         <span class="n">loader_kwargs</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">autodetect_encoding</span><span class="sh">'</span><span class="p">:</span> <span class="bp">True</span><span class="p">})</span>
<span class="n">documents</span> <span class="o">=</span> <span class="n">loader</span><span class="p">.</span><span class="nf">load</span><span class="p">()</span>

<span class="c1"># Add metadata based in bibliographic information
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">===Adding metadata===</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Read the BibTeX file
</span><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">bibtex_file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">bibtex_file</span><span class="p">:</span>
    <span class="n">bib_database</span> <span class="o">=</span> <span class="n">bibtexparser</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">bibtex_file</span><span class="p">)</span>

<span class="c1"># Get a list of all text file names in the directory
</span><span class="n">text_file_names</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">source_path</span><span class="p">)</span>
<span class="n">metadata_store</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># Go through each entry in the BibTeX file
</span><span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">bib_database</span><span class="p">.</span><span class="n">entries</span><span class="p">:</span>
    <span class="c1"># Check if the 'file' key exists in the entry
</span>    <span class="k">if</span> <span class="sh">'</span><span class="s">file</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">entry</span><span class="p">:</span>
        <span class="c1"># Extract the file name from the 'file' field and remove the extension
</span>        <span class="n">pdf_file_name</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="n">entry</span><span class="p">[</span><span class="sh">'</span><span class="s">file</span><span class="sh">'</span><span class="p">]).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">.pdf</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>

         <span class="c1"># Check if there is a text file with the same name
</span>        <span class="k">if</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">pdf_file_name</span><span class="si">}</span><span class="s">.txt</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">text_file_names</span><span class="p">:</span>
            <span class="c1"># If a match is found, append the metadata to the list
</span>            <span class="n">metadata_store</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>

<span class="k">for</span> <span class="n">document</span> <span class="ow">in</span> <span class="n">documents</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">metadata_store</span><span class="p">:</span>
        <span class="n">doc_name</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="n">document</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">'</span><span class="s">source</span><span class="sh">'</span><span class="p">]).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">.txt</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
        <span class="n">ent_name</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="n">entry</span><span class="p">[</span><span class="sh">'</span><span class="s">file</span><span class="sh">'</span><span class="p">]).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">.pdf</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">doc_name</span> <span class="o">==</span> <span class="n">ent_name</span><span class="p">:</span>
            <span class="n">document</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</code></pre></div></div>

<p>Just for reference, I include an example of what a bibtex entry in my bibtex files looks like.</p>

<div class="language-bibtex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">@article</span><span class="p">{</span><span class="nl">Abbott1984</span><span class="p">,</span>
  <span class="na">title</span> <span class="p">=</span> <span class="s">{Event Sequence and Event Duration: Colligation and Measurement [in Medicine].}</span><span class="p">,</span>
  <span class="na">shorttitle</span> <span class="p">=</span> <span class="s">{Event Sequence and Event Duration}</span><span class="p">,</span>
  <span class="na">author</span> <span class="p">=</span> <span class="s">{Abbott, Andrew}</span><span class="p">,</span>
  <span class="na">year</span> <span class="p">=</span> <span class="s">{1984}</span><span class="p">,</span>
  <span class="na">journal</span> <span class="p">=</span> <span class="s">{Historical methods}</span><span class="p">,</span>
  <span class="na">volume</span> <span class="p">=</span> <span class="s">{17}</span><span class="p">,</span>
  <span class="na">number</span> <span class="p">=</span> <span class="s">{4}</span><span class="p">,</span>
  <span class="na">eprint</span> <span class="p">=</span> <span class="s">{11620185}</span><span class="p">,</span>
  <span class="na">eprinttype</span> <span class="p">=</span> <span class="s">{pubmed}</span><span class="p">,</span>
  <span class="na">pages</span> <span class="p">=</span> <span class="s">{192--204}</span><span class="p">,</span>
  <span class="na">issn</span> <span class="p">=</span> <span class="s">{0161-5440}</span><span class="p">,</span>
  <span class="na">doi</span> <span class="p">=</span> <span class="s">{10.1080/01615440.1984.10594134}</span><span class="p">,</span>
  <span class="na">isbn</span> <span class="p">=</span> <span class="s">{0161-5440}</span><span class="p">,</span>
  <span class="na">pmid</span> <span class="p">=</span> <span class="s">{11620185}</span><span class="p">,</span>
  <span class="na">keywords</span> <span class="p">=</span> <span class="s">{Historiography,History of Medicine,History- Ancient,History- Early Modern 1451-1600,History- Medieval,History- Modern 1601-,Medicine,United States}</span><span class="p">,</span>
  <span class="na">file</span> <span class="p">=</span> <span class="s">{/home/wouter/Tools/Zotero/storage/7BM53SZ6/Abbott1984.pdf}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="splitting-the-documents">Splitting the documents</h2>

<p>Now that we have our documents, including metadata, we can go on and split them into chunks.
As mentioned previously, we can use the <a href="https://python.langchain.com/docs/modules/data_connection/document_loaders/file_directory">RecursiveCharacterTextSplitter</a> for this, which is very good at splitting texts into chunks of the size that we desire, while keeping semantically meaningful structures (e.g., paragraphs) intact as much as possible.</p>

<p>We need to decide what the size of our chunks will be.
I believe a popular choice is to go with chunks of 1000 tokens.
I opted for 1500 tokens because it just slightly increases the chances that parts of the text that belong together also end up in chunks together.
We can also set an overlap for our chunks, which I set to 150.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Splitting text
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">===Splitting documents into chunks===</span><span class="sh">"</span><span class="p">)</span>
<span class="n">text_splitter</span> <span class="o">=</span> <span class="nc">RecursiveCharacterTextSplitter</span><span class="p">(</span>
    <span class="n">chunk_size</span> <span class="o">=</span> <span class="mi">1500</span><span class="p">,</span>
    <span class="n">chunk_overlap</span>  <span class="o">=</span> <span class="mi">150</span><span class="p">,</span>
    <span class="n">length_function</span> <span class="o">=</span> <span class="nb">len</span><span class="p">,</span>
    <span class="n">add_start_index</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">split_documents</span> <span class="o">=</span> <span class="n">text_splitter</span><span class="p">.</span><span class="nf">split_documents</span><span class="p">(</span><span class="n">documents</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="embedding-the-documents-and-creating-our-vector-store">Embedding the documents and creating our vector store</h2>
<p>The final steps are to create embeddings for our chunks of texts and then store them, alongside the chunks themselves, in our vector store.
These embeddings are what we actually use later when we want to retrieve information from our vector store (discussed in more detail in a future post).
Basically, when we ask our LLM a question, the question will be embedded as well and its vectorized form will then be used to find entries in our vector store that are similar in meaning.
This approach to finding relevant information is much more accurate than finding relevant information purely based on matches between the texts themselves.</p>

<blockquote>
One cool benefit of storing documents in their vectorized form is that the language in which the documents were written becomes less relevant. 
Two documents that are written in different languages, but have similar meanings, will end up in similar positions in the semantic space when they are embedded.
</blockquote>

<p>As mentioned previously, we use the <code class="language-plaintext highlighter-rouge">text-embedding-ada-002</code> model to create our embeddings. 
This is the default model when using LangChain’s <code class="language-plaintext highlighter-rouge">OpenAIEmbeddings()</code> function.</p>

<p>Creating the embeddings is the most time consuming part of this process. 
I started out with a library of about 1750 documents (before chunking), which I believe takes about an hour to complete the embeddings for (this is a guess, because I didn’t consciously keep track of time).
It is also a relatively expensive part of the process, since we’ll be sending a lot of tokens through the OpenAI API.
This is one of the reasons why it is useful to have a setup where you don’t have to recreate these embeddings repeatedly (see the comments on updating our vector store by the end of this post).</p>

<p>You will probably also frequently see warnings about hitting OpenAI’s rate limits. 
Fortunately, LangChain has built-in functions that delay further requests until we’re ready to resume the process, so we don’t need to worry about this.</p>

<p>After the embeddings have been created, you can create your vector store as shown in the snippet. 
We immediately save our vector store in the folder that we defined for it earlier.</p>

<p>The last thing that we do is to write the filenames of the ingested documents to the file that we use to keep track of all ingested documents, allowing us to skip these when updating the vector store.</p>

<p>After the script finishes its run, I manually delete the text files from the folder from which we sourced them.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Embedding documents
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">===Embedding text and creating database===</span><span class="sh">"</span><span class="p">)</span>
<span class="n">embeddings</span> <span class="o">=</span> <span class="nc">OpenAIEmbeddings</span><span class="p">(</span>
    <span class="n">show_progress_bar</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">request_timeout</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">db</span> <span class="o">=</span> <span class="n">FAISS</span><span class="p">.</span><span class="nf">from_documents</span><span class="p">(</span><span class="n">split_documents</span><span class="p">,</span> <span class="n">embeddings</span><span class="p">)</span>
<span class="n">db</span><span class="p">.</span><span class="nf">save_local</span><span class="p">(</span><span class="n">store_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">index</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Record what we have ingested
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">===Recording ingested files===</span><span class="sh">"</span><span class="p">)</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">destination_file</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">document</span> <span class="ow">in</span> <span class="n">documents</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="n">document</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">'</span><span class="s">source</span><span class="sh">'</span><span class="p">]))</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="updating-the-vector-store">Updating the vector store</h2>
<p>As mentioned above, creating embeddings for documents is relatively expensive, both in terms of time and in terms of actual money spent on using the OpenAI API.
Therefore, we do not want to create embeddings for any given document more than once.
I already explained how the bash script that I use to convert PDFs skips documents that we’ve already ingested.
If I add new papers to my Zotero library, and I run the conversion script, only the PDFs of the newly added papers will be converted and eventually end up in the folder from which we source the documents to be ingested in the vector store.</p>

<p>To add these new papers to my existing vector store, I use a script that I named <code class="language-plaintext highlighter-rouge">updater.py</code> (see below).
This script is identical to the <code class="language-plaintext highlighter-rouge">indexer.py</code> script, except for the last part, where I:</p>
<ol>
  <li>create a new vector store to ingest the new papers,</li>
  <li>load the existing vector store that I initially created with the <code class="language-plaintext highlighter-rouge">indexer.py</code> script,</li>
  <li>merge these two vector stores, and</li>
  <li>store the merged vector store to my disk, overwriting the original one.</li>
</ol>

<p>This process requires me to create embeddings only for new papers that I added to my library.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">===Embedding text and creating database===</span><span class="sh">"</span><span class="p">)</span>
<span class="n">new_db</span> <span class="o">=</span> <span class="n">FAISS</span><span class="p">.</span><span class="nf">from_documents</span><span class="p">(</span><span class="n">split_documents</span><span class="p">,</span> <span class="n">embeddings</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">===Merging new and old database===</span><span class="sh">"</span><span class="p">)</span>
<span class="n">old_db</span> <span class="o">=</span> <span class="n">FAISS</span><span class="p">.</span><span class="nf">load_local</span><span class="p">(</span><span class="n">store_path</span><span class="p">,</span> <span class="n">embeddings</span><span class="p">)</span>
<span class="n">old_db</span><span class="p">.</span><span class="nf">merge_from</span><span class="p">(</span><span class="n">new_db</span><span class="p">)</span>
<span class="n">old_db</span><span class="p">.</span><span class="nf">save_local</span><span class="p">(</span><span class="n">store_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">index</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Record the files that we have added
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">===Recording ingested files===</span><span class="sh">"</span><span class="p">)</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">destination_file</span><span class="p">,</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">document</span> <span class="ow">in</span> <span class="n">documents</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="n">document</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="sh">'</span><span class="s">source</span><span class="sh">'</span><span class="p">]))</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>
<h2 id="outlook-to-future-posts">Outlook to future posts</h2>
<p>This is all that I wanted to share in this particular post.
What we have done now is to create a vector store that includes (for example) literature in our Zotero library, which allows us to then use that literature as context in chat sessions with LLMs.
How we actually set up these chat sessions and how we can use the vector stores in them is something I will discuss in a future post.</p>]]></content><author><name></name></author><category term="Software" /><category term="LLM" /><category term="langchain" /><category term="Python" /><summary type="html"><![CDATA[Intro This is going to be the first post in a series of posts on using the LangChain framework. With LangChain you can develop apps that are powered by Large Language Models (LLMs). I primarily use LangChain to build applications for chatting about literature in my Zotero library and other text data on my computer. My intention was to write a blog post that explains how to build these applications and how they work. However, there is too much ground to cover for a single post, so I decided to break it down into multiple posts.]]></summary></entry><entry><title type="html">Writing academic papers with org-mode</title><link href="http://localhost:4000/blog/2021/writing-academic-papers-with-org-mode/" rel="alternate" type="text/html" title="Writing academic papers with org-mode" /><published>2021-02-27T16:43:00+01:00</published><updated>2021-02-27T16:43:00+01:00</updated><id>http://localhost:4000/blog/2021/writing-academic-papers-with-org-mode</id><content type="html" xml:base="http://localhost:4000/blog/2021/writing-academic-papers-with-org-mode/"><![CDATA[<h2 id="edit-2023-01-03">EDIT (2023-01-03)</h2>
<p>I have recently migrated from Doom emacs to a vanilla emacs config. 
What I like about the vanilla config is that I am more in control of what it does.
Doom emacs, in some respects, was a bit of a black box to me. 
Also, Doom emacs does a lot of things I do not actually need or want.
In my original post, I linked to my <a href="https://github.com/WouterSpekkink/dotfiles">dot files</a>, which included my doom emacs config.
The doom config files are still there, but not in the <code class="language-plaintext highlighter-rouge">old_doom_config</code> branch, instead of the <code class="language-plaintext highlighter-rouge">master</code> branch. 
My vanilla config maintains (I think) all of what I describe in my post.
However, the config looks different in most places, for example because I could no longer make use of the Doom emacs macros.</p>

<h2 id="edit-2021-08-10">EDIT (2021-08-10)</h2>
<p>After upgrading my Doom emacs installation today, I noticed that org-roam-bibtex was broken. 
This has to do with the fact that org-roam-bibtex has recently switched over to org-roam V2, which has been in development for a while now and was <a href="https://blog.jethro.dev/posts/org_roam_v2/">released in July</a>. 
Doom emacs now also supports org-roam V2 and <a href="https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/org#should-i-go-with-roam-v1-or-roam2-v2">one of the gibub pages</a> for Doom emacs describes how you can make the switch.
You have the option to stick with org-roam V1, but that version is no longer actively maintained. 
Making the switch to org-roam V2 basically involves changing a flag in your init.el file from <code class="language-plaintext highlighter-rouge">+roam</code> to <code class="language-plaintext highlighter-rouge">+roam2</code>.
However, for org-roam-bibtex to work, you will need to make additional changes to your config (the config.el file).
It is a good idea to check the new README at <a href="https://github.com/org-roam/org-roam-bibtex">the org-roam-bibtex repository</a>, as well as <a href="https://github.com/org-roam/org-roam-bibtex/blob/master/doc/orb-manual.org">the manual</a>. 
One of the more important changes is that org-roam-bibtex now uses an org-roam-capture template, instead of using its own capture templates.</p>

<p>You will also find that <a href="https://github.com/org-roam/org-roam-server">org-roam-server</a> (a plugin that I did not discuss in the post below, but that I did occasionally use) does not work with org-roam V2. 
However, the author of org-roam-server points to an excellent alternative, called <a href="https://github.com/org-roam/org-roam-ui">org-roam-ui</a>.
Make sure that you <em>carefully</em> follow the installation instructions for Doom emacs that are provided in the <a href="https://github.com/org-roam/org-roam-ui">README</a> of the repository.</p>

<p>You will find a working configuration in the doom folder of <a href="https://github.com/WouterSpekkink/dotfiles">my dotfiles</a>.</p>

<p>I also came across a blog post in which <a href="https://blog.tecosaur.com/tmio/2021-07-31-citations.html">org-cite</a> was announced.
This is something I have not delved into yet, but when I briefly scanned the post, it seemed like org-cite is a more powerful ‘org-ecosystem’ citation solution. 
I have <a href="https://irreal.org/blog/?p=9895">also read</a> that the author of the <a href="https://github.com/jkitchin/org-ref">org-ref</a> mode started porting org-ref to org-cite with <a href="https://github.com/jkitchin/org-ref-cite">org-ref-cite</a>.
This is exciting stuff that I still need to look into.</p>

<h2 id="adding-to-what-is-already-out-there">Adding to what is already out there</h2>
<p>I spent some hours in the past couple of days writing a paper on Q-SoPrA (finally), and I wanted a break from that. 
However, I am not very good at doing nothing, so my break consists of simply writing something else; something a bit lighter.
I had thought about writing some posts about my workflow(s), so I thought I could use my break to start working on that.
And then I thought it would perhaps be nice to write something about how I actually go about writing papers nowadays.
That is what you’ll read about in the below.</p>

<blockquote>
I wrote this in a bit of a rush. 
I will revisit this post a couple of times to fix inevitable language mistakes and typos.
It is also likely that some parts need further clarification.
</blockquote>

<p>The idea to write a post like this is not original.
In fact, there is already a very helpful <a href="https://jonathanabennett.github.io/blog/2019/05/29/writing-academic-papers-with-org-mode/">blog post</a> on writing academic papers with <a href="https://orgmode.org/">org-mode</a> that has helped me develop my own workflow for paper writing.
At the same time, there is not much else that I could find. 
There were some things in the example linked above that did not really work for me and that I decided to do slightly differently. 
For some of this I had to cobble together some ideas from various pages where org-mode is discussed. 
One such page is of course the <a href="https://orgmode.org/manual/">org-mode manual</a>.
Other pages include discussions I found on Stack Overflow and LaTeX Stack Exchange, but I don’t remember all the specific pages I consulted on this.</p>

<p>I wanted to write this post to provide another source of inspiration on how to use org-mode for academic paper writing, hopefully providing some additional snippets of information that you couldn’t already find tied together in another post.</p>

<h2 id="the-intended-audiences-and-how-they-should-read-this-blog-post">The intended audience(s) and how they should read this blog post</h2>
<p>I imagine that there are four possible types of audiences for the text below.
I assume all these types consist of people that either work in academia, or have an interest in academia.
Within that range, the five types of audiences I imagine would be interested in reading this post are:</p>
<ol>
  <li>People that have no idea what org-mode is.
The same people are unlikely to know what emacs is (org-mode was developed as an extension of emacs).
People in this audience are probably used to writing their academic papers in office-like software, such as Microsoft Word or LibreOffice Writer.
They may have found their way to this post because they’re interested in exploring something new.
If you belong to this audience, I suggest that you keep on reading the first few parts of this post.
If you’re still interested after that, keep on reading the rest.</li>
  <li>People that may have heard about emacs and org-mode, but haven’t given it a try yet.
I imagine that some of these people currently write in LaTeX, or perhaps something like markdown.
They may have found their way here while exploring alternatives to that.
If you belong to this audience, I suggest you skim through the next part.
There is a small bit where I briefly discuss some of the benefits of org-mode over LaTeX.
I think LaTeX is awesome, but org-mode makes working with LaTeX a bit more pleasurable (at least for me).
I should also add that I think writing academic papers with org-mode is a lot easier if you already have some experience with LaTeX.</li>
  <li>People that already work with emacs, perhaps also with org-mode.
Maybe these people already use org-mode to organize their to-do lists and agendas, but they haven’t used org-mode yet to write papers.
Or maybe they <em>do</em> write papers with org-mode, but they are simply interested in reading how others organize their paper-writing-workflow.
If you belong to this audience, I suggest to skip over to the part where I discuss my setup in detail. 
I hope you’ll find something useful there.</li>
  <li>People that are emacs and org-mode veterans that come here to cringe at an attempt at an informative post by someone with limited experience with emacs and org-mode.
If you belong to this audience I don’t expect you’ll learn anything new from this post, but maybe you want to help me out.
In that case, just skim through everything and if you see me write dumb stuff, feel free to point it out by dropping me an email.</li>
</ol>

<p>Okay, I guess there is actually a fifth audience, which would be the people that know emacs, but dislike it because it is <a href="https://www.reddit.com/r/emacs/comments/8gdk9p/is_emacs_bloated/">bloat</a>.
If you belong to that audience, you could skim through the next bit, where I dedicate about 2 sentences to this discussion, and then direct your hate mail to my email address.</p>

<h2 id="start-here-if-you-dont-know-what-emacs-is">Start here if you don’t know what emacs is</h2>
<p>Let’s start with <a href="https://www.gnu.org/software/emacs/">emacs</a>.
I find it tricky to accurately describe what emacs is, because, in a way, it is many things at the same time, depending on how you set it up and use it.
However, I think I would settle on a description of emacs as a lisp-interpeter, as well as an ecosystem of tools that together constitute an integrated development environment. 
Emacs can be configured and extended with a <a href="https://en.wikipedia.org/wiki/Emacs_Lisp">dialect of lisp</a>, which is a programming and scripting language (you’ll see plenty of that in snippets below).
I use emacs to write software, to read my email, to organize my to-do lists (actually, this is an org-mode thing that I won’t discuss here), to keep notes on papers, to keep a journal with ideas that I am afraid I would otherwise forget about, and several other things.
It is usually the first thing that I load up after booting into Linux and probably the software that I spend most time ‘in’.
Emacs has been around for <a href="https://en.wikipedia.org/wiki/Emacs">a long time</a> and is still being actively developed today, which I believe is testimony to its incredible power.</p>

<p>There are plenty of Linux-enthusiasts that don’t like emacs at all, for example because they feel it goes against the UNIX philosophy that software tools should <a href="https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well">“do one thing and do it well”</a>.
In other words, in their opinion emacs is bloat.
As I mentioned before, emacs does indeed try to be a lot of things at the same time.
However, in the above, I consciously described emacs as “an ecosystem of tools”, because I think emacs can be seen as a collection of lisp-based tools that each do one thing (and do it well), but that can interact in various ways to make them do whatever you want emacs to do.
I think you could even use emacs as a kind of Operating System if you wanted (I am not sure why you would, though).
The benefit of having all these tools work together in one ecosystem is that they often work together well ‘out of the box’.</p>

<p>Emacs is highly configurable, so there are many different ways in which Emacs can be set up.
Obviously, I am not going to discuss all of that in detail.
What I do want to note here is that I use a particular ‘flavor’ of emacs that is known as <a href="https://github.com/hlissner/doom-emacs/">Doom emacs</a>. 
Doom emacs has a number of benefits over ‘vanilla emacs’, such as a tight package management system and a pre-configured setup that just does a lot of things ‘right’.
I also like that it makes use of evil-mode, which more or less means that it works with <a href="https://www.vim.org/">vim</a> keybindings.
However, that is a story for another time.</p>

<h2 id="org-mode-as-a-powerful-extension-of-emacs">Org-mode as a powerful extension of emacs</h2>
<p><a href="https://orgmode.org/">Org-mode</a> is a popular extension of emacs which revolves around a flexible structured plain text format.
You can use it to manage to-do lists, for agenda and/or project management, to keep notes, as well as a wide range of writing applications (among others!).
Org-mode has an ecosystem of its own, which means that it is highly extensible itself. 
For example, in the below I write a few things about <a href="https://github.com/jkitchin/org-ref">org-ref</a>, <a href="https://github.com/weirdNox/org-noter">org-noter</a> and <a href="https://www.orgroam.com/">org-roam</a>, which all play a role in my writing process.
I combine these tools with others that are not specifically org-mode-related.
For example, to read pdfs in emacs, I make use of <a href="https://github.com/politza/pdf-tools">pdf-tools</a>, and I use <a href="https://github.com/tmalsburg/helm-bibtex">helm-bibtex</a> (in combination with <a href="https://www.zotero.org/">Zotero</a>) to navigate my library of publications and find citations to insert.
I will discuss all of that in more detail further below.</p>

<p>But let’s take a few steps back first.
So, org-mode is a flexible structured plain text format, one that includes a markup language similar to that of <a href="https://ourcodingclub.github.io/tutorials/git/">markdown</a> (which is the markup language in which I am writing this blog post right now).
What does that mean?
Well, I can do things like encapsulating text in asterisks (*) if I want to make that text bold and encapsulating text in forward slashes (/) if I want to make that text italic.
I can make headings by starting a line with an asterisk followed by a space. 
If I want to make a heading at a lower level, I simply add more asterisks. 
I can also make (numbered) lists and these can be nested. 
And this is only the simple stuff. 
As an example of something more advanced, org-mode offers <a href="https://orgmode.org/worg/org-tutorials/tables.html">very powerful support for tables</a>.
You can even use formulas in tables, similar to what you can do in Microsoft Excel or LibreOffice Calc.</p>

<p><strong>All of that in plain text.</strong></p>

<p>A typical org file might look something like the following:</p>

<figure class="highlight"><pre><code class="language-org" data-lang="org">* This is a level 1 heading
** This is a level 2 heading
A paragraph doesn't necessarily need any markup language.
You could write each sentence on its own line. 
Upon exporting, these lines will be put together in a paragraph.

To start a new paragraph you simply insert an empty line before it.
Lines of text that don't have empty lines between them are treated as a single paragraph.

Text can be *bolded* or in /italic/, among other things, using simple markup.

- This is a list entry
- This is another list entry
  + Lists can be nested.

We can also have numbered lists, like so:
1. This is a numbered list entry
2. Here is another one.
   a. Of course we can also nest numbered lists.

I don't actually have to type all these numbers.
When making a list, I simply press CTRL+Return to add a new entry to the list.
I can press the TAB button to indent the list (make a nested entry).

To make a table, we can simply encapsulate text in lines and pipe symbols:

|--------------------+--------------------------|
| *This is a header* | *This is another header* |
|--------------------+--------------------------|
| This is a cell     | This is another cell     |
|--------------------+--------------------------|
| And so on...       |                          |
|--------------------+--------------------------|

When altering an entry in a table, I can move to another cell by pressing tab, and the table will 
automatically be reformatted to look 'fancy' again.
New cells will also be added upon pressing tab if your cursor is in the bottom-right cell.</code></pre></figure>

<p>After writing a document in org-mode, you’ll often want to export them to some other format. 
Org-mode in emacs provides a powerful exporting engine for this, but you could also use <a href="https://pandoc.org/">pandoc</a>.
With emacs’ export engine, you can, for example, export an org-mode document to a beautifully formatted pdf.
In the process, the document will first be exported to TeX as an intermediary step, so if you are familiar with LaTeX, you’ll know what nice outputs you could make with org-mode in this way.</p>

<h2 id="wait-why-on-earth-would-you-want-this">Wait! Why on earth would you want this?</h2>
<p>Some of you might think: “What’s the point?
What benefit does this give you over Microsoft Word or LibreOffice Writer, in which you can do most of these things?”
You might also think that plain text looks ugly (I don’t; I’ve come to love it) and you’d rather see what you get, as you do in Microsoft Word, rather than first having to export to some other format before you see what it’ll eventually look like.</p>

<p>Know that there are certain benefits to working in a plain text format like the org format.
First, it makes version control much easier.
For example, I use Github for version control, which means that after each time I that I add bits and pieces to a paper (usually at the end of the day), I push a commit to github.
This allows me to keep track of all the changes I make between versions, without having to explicitly save a new version of my document whenever I want to make a new version, and without the risk of accidentally overwriting changes that I might later regret. 
If you want to know more about this approach to version control, there are plenty of places to read more about it, such as <a href="https://ourcodingclub.github.io/tutorials/git/">here</a>.
One thing to note is that this approach to version control only works well if you work in plain text.</p>

<blockquote>
Note that, with "version control", I mean something different than simply saving changes to your document on a regular basis.
You should of course always do that to ensure that you don't accidentally lose a lot of work.
My purpose with versioning of papers is not to keep track of each and every small change that I make, but to keep track of the larger chunks of text that I change over time.
I might decide that a certain idea doesn't work well and that I want to revert to an alternative idea that I tried earlier.
In that case it is nice to know that I have a version of that somewhere on my Github repository.
</blockquote>

<p>Second, as I mentioned previously, you can export org-formatted documents to many other formats, including odt, docx, TeX, and (via TeX) pdf.
You don’t get this kind of flexibility with Microsoft Word or LibreOffice Writer.
Moreover, because the text is <strong>plain</strong> text with some simple markup added to it, it is relatively easy anyway to reuse the text in another format.
This could just be a matter of slightly changing the markup.
However, I would just use <a href="https://pandoc.org/">pandoc</a> for this most of the time.</p>

<p>Third, since you’re working in plain text, you don’t need a dedicated editor. 
Sure, writing org-mode in emacs makes a lot of things easier, but in principle there is nothing to stop you from using any other text editor.
This means that you don’t depend on one or a few software packages.
Also, because (again) we are working in <strong>plain</strong> text, it is unlikely that at some point you won’t be able to open your document anymore because it was written with outdated software. 
I guarantee you that plain text editors will be around for a loooooooong time.</p>

<p>That being said, my purpose with this post is not to convince you of using org-mode.
In fact, there are plenty of downsides to it too.
For me, one of the most important ones is that none of my colleagues works with org-mode.
In fact, I doubt they ever heard of emacs or org-mode. 
This is of course unproblematic if you mostly write by yourself, but it <em>is</em> problematic if you frequently write with others, which is true for me.
This downside is compounded by the fact that my university more or less forces you to work with Windows and Office365, unless you choose to work on your own machine.
The result is that everybody is socialized into using the same set of tools, and trying to work around this quickly becomes cumbersome.</p>

<p>However, despite these downsides, I find myself using org-mode whenever I can. 
I like the fact that I can just focus on writing without too many distractions.
I also like the fact that, with a few keystrokes, I can…</p>
<ul>
  <li>find papers to consult.</li>
  <li>then read the pdfs of those papers in the same software that I use for writing.</li>
  <li>add a citation to a paper.</li>
  <li>open the pdfs attached to any of my citations.</li>
  <li>quickly consult my notes on other papers (made with <a href="https://github.com/weirdNox/org-noter">org-noter</a>), or other notes that I made, for example with <a href="https://www.orgroam.com/">org-roam</a>.</li>
  <li>export my work to different formats, such as docx or pdf, where they immediately look nicely formatted without doing extra work.</li>
  <li>completely change that formatting by altering just a few lines of export settings.</li>
  <li>have auto-generated and -formatted bibliographies based on the citations I included in my paper.</li>
  <li>easily include figures in my paper (including pdfs of figures) without having to worry about where exactly to place them (this is something I really hate about Office programs).</li>
  <li>Include TODO notes in my papers that show up in my agenda.</li>
  <li>use the very powerful vim-keybindings.</li>
</ul>

<p>There might be things I forget right now. 
More generally speaking, I somehow find working in emacs and org-mode much more satisfying than working in Word, and I often find myself looking for ways to work around Office-based programs more than I already do.</p>

<h2 id="why-dont-you-just-use-latex">Why don’t you just use LaTeX?</h2>
<p>Some of the things I outline above are things that others use LaTeX for.
I already mentioned you can make beautifully formatted text with LaTeX and org-mode exports to pdf <em>via</em> TeX.
So why wouldn’t you just work in LaTeX directly?</p>

<p>Well, I love LaTeX, and I worked in it for a while, but LaTeX markup is quite elaborate and, in my opinion, a bit distracting.
I often found myself going back to tex documents that I wrote earlier, for example to remember how I got my figures to come out the way I liked it.
Org-mode’s markup is much cleaner and intuitive. 
Also, if you really want to just insert ‘plain’ LaTeX in some places, you an easily do that.
You could say that org-mode makes working with LaTeX a lot easier.</p>

<p>Also, exporting to pdf from org-mode takes just one command.
In LaTeX you would need to run a LaTeX compiler, then typically BibTeX to resolve the linkages to citations, then the LaTeX compiler again…
When you export to pdf from org-mode, all that needs to be done as well, and you actually add additional steps because it first needs to export from org to tex.
However, emacs does all of this for you in the background. 
You don’t need to worry about it.</p>

<blockquote>
Org-mode does not provide the possibility to directly export to docx.
You can of course export to odt and then save your file as docx.
However, I've noticed that exporting from org-mode to odt does not work well if you want to include a bibliography.
I think the easiest way to convert from org tot docx is to use pandoc.
If you use the `--citeproc` argument, you can also get the bibliography exported properly.
</blockquote>

<h2 id="my-setup-start-here-if-you-skipped-over-the-first-parts">My setup (start here if you skipped over the first parts)</h2>
<p>So let’s get into the details of my setup.
I’ll (roughly) discuss the following:</p>
<ol>
  <li>Setting up an org-mode document for exporting to LaTeX</li>
  <li>Citation management</li>
  <li>Managing notes that you might use for your papers.</li>
</ol>

<blockquote>
Please note that some snippets of my emacs config file below will only work for you if you use Doom emacs. 
My config file makes use of macros that are specific to Doom emacs, such as `after!`.
However, if you are familiar with emacs, and you don't want to use Doom emacs, it should be relatively easy to adjust my examples.
</blockquote>

<h3 id="a-template-for-papers">A template for papers</h3>
<p>I made a template for papers that I can reuse. 
The template looks more or less like the below.</p>

<figure class="highlight"><pre><code class="language-org" data-lang="org">#+TITLE: Your title goes here
#+OPTIONS: toc:nil author:nil
#+LaTeX_CLASS: apa6
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LaTeX_HEADER: \author{author name}
#+LaTeX_HEADER: \affiliation{author affiliation}
#+LaTeX_HEADER: \leftheader{With the apa6 class, it is good idea to customize the left header here}
#+LaTeX_HEADER: \shorttitle{Your short title goes here}
#+LaTeX_HEADER: \usepackage{breakcites}
#+LaTeX_HEADER: \usepackage{apacite}
#+LaTeX_HEADER: \usepackage{natbib}
#+LaTeX_HEADER: \usepackage{paralist}
#+LaTeX_HEADER: \let\itemize\compactitem
#+LaTeX_HEADER: \let\description\compactdesc
#+LaTeX_HEADER: \let\enumerate\compactenum
#+LaTeX_HEADER: \abstract{Your abstract goes here}
#+LaTeX_HEADER: \keywords{Your keywords go here}


* Introduction
And now just type away!
# Everything with a "# " (don't forget the space) before it is a comment and is ignored when exporting to pdf.

** This is a sub-heading!
Remember our lists?
- Here is a list entry
- Here is another one

# Don't forget to add the bibliography by the end.
bibliographystyle:apacite
bibliography:/path/to/library.bib</code></pre></figure>

<p>So, what do we have here?
At the top of the file we see a kind of preamble.
Org documents often include some <a href="https://orgmode.org/manual/Export-Settings.html">export settings</a> in their preamble.
I call this a preamble, but you can actually put these export settings anywhere in your file.</p>

<p>Note that a lot of my export settings are actually LaTeX headers. 
This is the kind of stuff that you would also put in your LaTeX preamble, which org-mode can handle for you in this case.
I use these LaTeX headers to set the document type (apa6 class article, in this case), some options related to the types of citations I use, some options that are apa6 class specific, and some options to change the default behavior of the LaTeX formatting process.</p>

<p>Some of these options were adopted from the example set <a href="https://jonathanabennett.github.io/blog/2019/05/29/writing-academic-papers-with-org-mode/">here</a>, such as the use of <code class="language-plaintext highlighter-rouge">\usepackage{breakcites}</code> to allow citations to word wrap, <code class="language-plaintext highlighter-rouge">\usepackage{paralist}</code>to make lists more compact (the three lines directly below this are related to this too), and <code class="language-plaintext highlighter-rouge">\usepackage{apa6}</code> for apa-compliant citations.
I added <code class="language-plaintext highlighter-rouge">\usepackage{natbib}</code> to allow for <a href="http://merkel.texture.rocks/Latex/natbib.php">natbib-style citation markup</a> (see further below).</p>

<p>The <a href="http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/apa6/apa6.pdf">apa6 LaTeX class</a> specification uses the <code class="language-plaintext highlighter-rouge">\abstract{}</code> command to include an abstract and the <code class="language-plaintext highlighter-rouge">\keywords{}</code> command to include keywords.
The class also natively supports multiple ways to report authors and affiliations.
In the template, you’ll see what you’d need to include if you are the sole author of the paper.
If you have two authors, you could instead use <code class="language-plaintext highlighter-rouge">\twoauthors{Author One}{Author Two}</code>.
For more authors, you follow the same logic <code class="language-plaintext highlighter-rouge">\threeauthors{}{}{}</code> and so on (this class currently supports up to six authors).
The same goes for affiliations:
For two authors you can use <code class="language-plaintext highlighter-rouge">\twoaffiliations{}{}</code>.
I noticed that the left header only shows the first author by default.
I therefore included the <code class="language-plaintext highlighter-rouge">\leftheader{}</code> command so I can just customize it.
The <code class="language-plaintext highlighter-rouge">\shorttitle{}</code> will be shown as the right header.</p>

<p>You can also specify the author name with org-mode’s own <code class="language-plaintext highlighter-rouge">#+AUTHOR</code> export option, but I found that it quickly becomes a pain to handle authors and affiliations properly when there is more than one author.
I therefore use the LaTeX headers for this instead.
In that case, it is necessary to include <code class="language-plaintext highlighter-rouge">author:nil</code> in <code class="language-plaintext highlighter-rouge">#+OPTIONS</code>, because emacs may default to using the username specified in your config file as the author name, even if you didn’t include <code class="language-plaintext highlighter-rouge">#+AUTHOR</code> in your file. 
In that case, you will always be included as a co-author, alongside any other authors that you already specified in the LaTeX headers.</p>

<p>I also set <code class="language-plaintext highlighter-rouge">toc:nil</code> to prevent a table of contents from being included.</p>

<p>You should make sure to include your bibliography by the end of your document. 
The bibliography will appear right where you put the following lines:</p>

<figure class="highlight"><pre><code class="language-org" data-lang="org">bibliographystyle:apacite
bibliography:/path/to/library.bib</code></pre></figure>

<h3 id="figures-and-tables">Figures and tables</h3>
<p>One thing that org-mode makes very easy to do is to add figures and tables to your paper. 
As I mentioned before, with LaTeX I often had to look up how to do those things properly.
Org-mode is just much more intuitive in its use here.</p>

<p>To include a figure, you basically just need to include a link to it.
In org-mode, a link is always placed between double brackets (as shown below).
You can add a caption for your figure, as well as a name that you can use for reference above the link to the figure.
If you are using a multi-column document class (like apa6) and you want figures to span the full width of the page, instead of just one column, you also want to add the third option (<code class="language-plaintext highlighter-rouge">ATTR_LATEX: :float multicolumn</code>) that I have added below.</p>

<figure class="highlight"><pre><code class="language-org" data-lang="org">#+CAPTION: Your figure caption goes here
#+NAME: fig:shortname
#+ATTR_LATEX: :float multicolumn
[[path/to/your/figure]]</code></pre></figure>

<p>The name variable comes in useful whenever you want to refer to the figure in your text. 
This is something else that I find painful to do in (for example) Word documents.
If you refer to your figures by numbers in your text, you have to be careful to update these numbers if something changes in the order of figures.
In org-mode, you can instead refer to your figures by their label, using an internal link, and this link will automatically be resolved to a number upon exporting.
So, for example, you could write something like the following in your text:</p>

<figure class="highlight"><pre><code class="language-org" data-lang="org">See figure [[fig:shortname]] below.</code></pre></figure>

<p>And if that figure happens to be the third figure in your document, then in the exported pdf document this will resolve to:</p>

<p>“Please see figure 3 below.”</p>

<p>For tables, you can simply use org-mode’s built-in table functionality, and when exporting tables will be formatted according to the specifications of whatever you’re exporting to.</p>

<p>There are <a href="https://orgmode.org/manual/Tables-in-LaTeX-export.html">various ways</a> in which you can configure the way tables come out too.
As with figures, you’d place these export options above your table.</p>

<h3 id="setting-up-the-latex-class-in-your-config-file">Setting up the LaTeX class in your config file</h3>
<p>With the information above you already know most of the basics required for writing a document in org-mode that can be exported as a pdf (via LaTeX).</p>

<p>For the exporting via LaTeX to work properly, you’ll need to set up the LaTeX classes that you plan to use, which you do in your emacs config.el file.
This is just something I shameless copied from the <a href="https://jonathanabennett.github.io/blog/2019/05/29/writing-academic-papers-with-org-mode/">example</a> that I’ve mentioned a few times before, and it works well for me.</p>

<figure class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="c1">;; Set up org-mode export stuff</span>
  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">'org-latex-classes</span>
               <span class="o">'</span><span class="p">(</span><span class="s">"apa6"</span>
                 <span class="s">"\\documentclass{apa6}"</span>
                 <span class="p">(</span><span class="s">"\\section{%s}"</span> <span class="o">.</span> <span class="s">"\\section*{%s}"</span><span class="p">)</span>
                 <span class="p">(</span><span class="s">"\\subsection{%s}"</span> <span class="o">.</span> <span class="s">"\\subsection*{%s}"</span><span class="p">)</span>
                 <span class="p">(</span><span class="s">"\\subsubsection{%s}"</span> <span class="o">.</span> <span class="s">"\\subsubsection*{%s}"</span><span class="p">)</span>
                 <span class="p">(</span><span class="s">"\\paragraph{%s}"</span> <span class="o">.</span> <span class="s">"\\paragraph*{%s}"</span><span class="p">)</span>
                 <span class="p">(</span><span class="s">"\\subparagraph{%s}"</span> <span class="o">.</span> <span class="s">"\\subparagraph*{%s}"</span><span class="p">)))</span></code></pre></figure>

<p>From what I understood from the explanation offered <a href="https://orgmode.org/worg/org-tutorials/org-latex-export.html">here</a>, this maps the org-mode headings and lists (and so on) to their LaTeX equivalents.</p>

<h3 id="using-citations-in-your-paper">Using citations in your paper</h3>
<p>In the above we have the basics more or less covered, such as including export settings and knowing how to format a basic org file, including figures and tables. 
We also know how to include our bibliography, but an important topic that we <em>haven’t</em> covered yet is how to include citations in your document in the first place.</p>

<p>The org-mode ecosystem includes a wonderful tool for this, which is <a href="https://github.com/jkitchin/org-ref">org-ref</a>.
Org-ref depends on <a href="https://github.com/tmalsburg/helm-bibtex">helm-bibtex</a>.
Helm-bibtex is a wonderful tool that you can use to browse your library of references from within emacs. 
If you use a citation management tool like <a href="https://www.zotero.org/">Zotero</a>, it is easy to keep a library of references that also have pdfs linked to them.
You can export the library as a .bib file, which can then be read by helm-bibtex.
Org-ref uses the helm-bibtex menu to search for citations that you want to insert.
If you have org-ref installed, you can use the <code class="language-plaintext highlighter-rouge">C-c ]</code> keybinding to insert a citation at point.
You will then be shown a list of the references included in the .bib-file that you pointed helm bibtex to (see below).
The list is filtered as you type.
When you press enter on any reference, it will be included in your paper.
For an example, see the citation by the end of the snippet below.</p>

<figure class="highlight"><pre><code class="language-org" data-lang="org">For example, if the study focuses on explaining the emergence, development and/or decline of an entity, 
it makes sense to adopt a strategy in which one defines that entity as a central subject 
and than focuses on reconstructing the events that this central subject endures or makes happen citep:Hull1975.</code></pre></figure>

<p>This gives a good idea of how org-ref citations are formatted. 
They basically use the <a href="http://merkel.texture.rocks/Latex/natbib.php">natbib</a> format.
For example:</p>
<ul>
  <li>cite:Spekkink2016 becomes “Spekkink (2016)”;</li>
  <li>citep:Spekkink2016 becomes “(Spekkink, 2016)”;</li>
  <li>citeyearpar:Spekkink2016 becomes “(2016)”;</li>
</ul>

<p>And so on…</p>

<p>What the snippet above doesn’t show, is that the citations in org-mode behave a bit like links.
You can place your cursor on them, press return, and you’ll be shown a helm-bibtex menu as shown below (click the picture to view a larger version of it):</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/helm-bibtex_1-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/helm-bibtex_1-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/helm-bibtex_1-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/helm-bibtex_1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
helm-bibtex menu
</div>

<p>You’ll see that you can do a number of things related to this citation, such as opening the pdf to re-read something if you need to.
You can also access your notes on this paper from here (see more on that further below), you can add pre- or post-text, and a number of other things.</p>

<p>For org-ref and helm-bibtex to work properly, you’ll need to put some things in your emacs config.el file. 
See my configuration below (and notice the comments):</p>

<figure class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="c1">;; helm-bibtex related stuff</span>
<span class="p">(</span><span class="nv">after!</span> <span class="nv">helm</span>
  <span class="p">(</span><span class="nv">use-package!</span> <span class="nv">helm-bibtex</span>
    <span class="ss">:custom</span>
    <span class="c1">;; In the lines below I point helm-bibtex to my default library file.</span>
    <span class="p">(</span><span class="nv">bibtex-completion-bibliography</span> <span class="o">'</span><span class="p">(</span><span class="s">"~/Zotero/bibtex/library.bib"</span><span class="p">))</span>
    <span class="p">(</span><span class="nv">reftex-default-bibliography</span> <span class="o">'</span><span class="p">(</span><span class="s">"~/Zotero/bibtex/library.bib"</span><span class="p">))</span>
    <span class="c1">;; The line below tells helm-bibtex to find the path to the pdf</span>
    <span class="c1">;; in the "file" field in the .bib file.</span>
    <span class="p">(</span><span class="nv">bibtex-completion-pdf-field</span> <span class="s">"file"</span><span class="p">)</span>
    <span class="ss">:hook</span> <span class="p">(</span><span class="nv">Tex</span> <span class="o">.</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nv">define-key</span> <span class="nv">Tex-mode-map</span> <span class="s">"\C-ch"</span> <span class="ss">'helm-bibtex</span><span class="p">))))</span>
  <span class="c1">;; I also like to be able to view my library from anywhere in emacs, for example if I want to read a paper.</span>
  <span class="c1">;; I added the keybind below for that.</span>
  <span class="p">(</span><span class="nv">map!</span> <span class="ss">:leader</span>
        <span class="ss">:desc</span> <span class="s">"Open literature database"</span>
        <span class="s">"o l"</span> <span class="nf">#'</span><span class="nv">helm-bibtex</span><span class="p">)</span>
  <span class="c1">;; And I added the keybinds below to make the helm-menu behave a bit like the other menus in emacs behave with evil-mode.</span>
  <span class="c1">;; Basically, the keybinds below make sure I can scroll through my list of references with C-j and C-k.</span>
  <span class="p">(</span><span class="nv">map!</span> <span class="ss">:map</span> <span class="nv">helm-map</span>
        <span class="s">"C-j"</span> <span class="nf">#'</span><span class="nv">helm-next-line</span>
        <span class="s">"C-k"</span> <span class="nf">#'</span><span class="nv">helm-previous-line</span><span class="p">)</span>
<span class="p">)</span>

 <span class="c1">;; Set up org-ref stuff</span>
 <span class="p">(</span><span class="nv">use-package!</span> <span class="nv">org-ref</span>
    <span class="ss">:custom</span>
    <span class="c1">;; Again, we can set the default library</span>
    <span class="p">(</span><span class="nv">org-ref-default-bibliography</span> <span class="s">"~/Zotero/bibtex/library.bib"</span><span class="p">))</span>
    <span class="c1">;; The default citation type of org-ref is cite:, but I use citep: much more often</span>
    <span class="c1">;; I therefore changed the default type to the latter.</span>
    <span class="p">(</span><span class="nv">org-ref-default-citation-link</span> <span class="s">"citep"</span><span class="p">)</span>

 <span class="c1">;; The function below allows me to consult the pdf of the citation I currently have my cursor on.</span>
 <span class="p">(</span><span class="nb">defun</span> <span class="nv">my/org-ref-open-pdf-at-point</span> <span class="p">()</span>
  <span class="s">"Open the pdf for bibtex key under point if it exists."</span>
  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">results</span> <span class="p">(</span><span class="nv">org-ref-get-bibtex-key-and-file</span><span class="p">))</span>
         <span class="p">(</span><span class="nv">key</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">results</span><span class="p">))</span>
         <span class="p">(</span><span class="nv">pdf-file</span> <span class="p">(</span><span class="nb">funcall</span> <span class="nv">org-ref-get-pdf-filename-function</span> <span class="nv">key</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">file-exists-p</span> <span class="nv">pdf-file</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">find-file</span> <span class="nv">pdf-file</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">message</span> <span class="s">"No PDF found for %s"</span> <span class="nv">key</span><span class="p">))))</span>

  <span class="p">(</span><span class="k">setq</span> <span class="nv">org-ref-completion-library</span> <span class="ss">'org-ref-ivy-cite</span>
        <span class="nv">org-export-latex-format-toc-function</span> <span class="ss">'org-export-latex-no-toc</span>
        <span class="nv">org-ref-get-pdf-filename-function</span>
        <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">key</span><span class="p">)</span> <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nv">bibtex-completion-find-pdf</span> <span class="nv">key</span><span class="p">)))</span>
        <span class="c1">;; See the function I defined above.</span>
        <span class="nv">org-ref-open-pdf-function</span> <span class="ss">'my/org-ref-open-pdf-at-point</span>
        <span class="c1">;; For pdf export engines.</span>
        <span class="nv">org-latex-pdf-process</span> <span class="p">(</span><span class="nb">list</span> <span class="s">"latexmk -pdflatex='%latex -shell-escape -interaction nonstopmode' -pdf -bibtex -f -output-directory=%o %f"</span><span class="p">)</span>
        <span class="c1">;; I use orb to link org-ref, helm-bibtex and org-noter together (see below for more on org-noter and orb).</span>
        <span class="nv">org-ref-notes-function</span> <span class="ss">'orb-edit-notes</span><span class="p">)</span></code></pre></figure>

<p>Some of this configuration involves pointing helm-bibtex and org-ref to my default library.bib file.
I also had to add several lines to make sure that (1) helm-bibtex knows where to find the path to pdf files in the library.bib file, (2) org-ref is able to find the pdf file associated with the citation that I have my cursor on and (3) org-ref is then able to open that file.
I am not entirely sure, but I believe the default behavior was for org-ref to open the pdf in an external viewer.
My configuration also makes org-ref open pdfs in emacs instead.</p>

<h3 id="using-pdf-tools">Using pdf-tools</h3>
<p>Since I’ve mentioned the possibility to open pdfs a couple of times, this as a good a place as any to bring up that I use <a href="https://github.com/politza/pdf-tools">pdf-tools</a> to read pdfs instead of emacs’ default doc-viewer.
In pdf-tools, pdfs look much better than in doc-viewer.
In addition, pdf-tools comes with some annotation tools, although I don’t use those myself.</p>

<p>To use pdf-tools as the default viewer, you can add the folowing lines to your config (keep in mind that the below is specific to Doom emacs configs):</p>

<figure class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="c1">;; This is to use pdf-tools instead of doc-viewer</span>
<span class="p">(</span><span class="nv">use-package!</span> <span class="nv">pdf-tools</span>
  <span class="ss">:config</span>
  <span class="p">(</span><span class="nv">pdf-tools-install</span><span class="p">)</span>
  <span class="c1">;; This means that pdfs are fitted to width by default when you open them</span>
  <span class="p">(</span><span class="nv">setq-default</span> <span class="nv">pdf-view-display-size</span> <span class="ss">'fit-width</span><span class="p">)</span>
  <span class="ss">:custom</span>
  <span class="p">(</span><span class="nv">pdf-annot-activate-created-annotations</span> <span class="no">t</span> <span class="s">"automatically annotate highlights"</span><span class="p">))</span></code></pre></figure>

<h3 id="consulting-notes-on-papers">Consulting notes on papers</h3>
<p>So far, so good.
We now know how to write basic documents in org-mode, and we’re able to use org-ref (with helm-bibtex) to insert and alter references, and to open the pdf files associated with them.</p>

<p>Let’s stick with org-ref and helm-bibtex for a bit longer. 
Let’s say that you’ve kept notes on the papers that you want to cite in your own paper.
You might want to consult those notes while writing.
Here too, I find it convenient to be able to do this within the program that I am doing my writing in. 
That is why I use <a href="https://github.com/weirdNox/org-noter">org-noter</a> to keep notes on my papers, and I use <a href="https://github.com/org-roam/org-roam-bibtex">org-roam-bibtex</a> (orb) to link org-noter and helm-bibtex together.
This is a topic that is discussed in detail in <a href="https://rgoswami.me/posts/org-note-workflow/">this blog post</a>, so I won’t cover everything in detail here.</p>

<p>Very briefly then:
org-noter is an emacs package that you can use to keep notes on pdfs in an org document.
It works together quite well with the pdf-tools package that I mention above.
Basically, with org-noter you can read a pdf, and have your notes document open beside it. 
You can write notes that are associated with particular pages in the pdf document, as well as notes that are associated with particular locations on pages.
If you then browse through your notes, org-noter will automagically bring up the page (or location) of the pdf document that the note is associated with.
It looks a bit like this:</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/org-noter_1-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/org-noter_1-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/org-noter_1-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/org-noter_1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
org-noter
</div>

<p>In the image, you see the pdf on the left, and you see the notes I wrote on this pdf on the right. 
Each of those notes is related to a particular location in the document, which I can find back easily by jumping back and forth between my notes.</p>

<p>See my org-noter configuration below:</p>

<figure class="highlight"><pre><code class="language-lisp" data-lang="lisp"> <span class="c1">;; org-noter stuff</span>
  <span class="p">(</span><span class="nv">after!</span> <span class="nv">org-noter</span>
    <span class="p">(</span><span class="k">setq</span>
          <span class="nv">org-noter-notes-search-path</span> <span class="o">'</span><span class="p">(</span><span class="s">"~/org-roam/"</span><span class="p">)</span>
          <span class="nv">org-noter-hide-other</span> <span class="no">nil</span>
          <span class="nv">org-noter-separate-notes-from-heading</span> <span class="no">t</span>
          <span class="nv">org-noter-always-create-frame</span> <span class="no">nil</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">map!</span>
     <span class="ss">:map</span> <span class="nv">org-noter-doc-mode-map</span>
     <span class="ss">:leader</span>
     <span class="ss">:desc</span> <span class="s">"Insert note"</span>
     <span class="s">"m i"</span> <span class="nf">#'</span><span class="nv">org-noter-insert-note</span>
     <span class="ss">:desc</span> <span class="s">"Insert precise note"</span>
     <span class="s">"m p"</span> <span class="nf">#'</span><span class="nv">org-noter-insert-precise-note</span>
     <span class="ss">:desc</span> <span class="s">"Go to previous note"</span>
     <span class="s">"m k"</span> <span class="nf">#'</span><span class="nv">org-noter-sync-prev-note</span>
     <span class="ss">:desc</span> <span class="s">"Go to next note"</span>
     <span class="s">"m j"</span> <span class="nf">#'</span><span class="nv">org-noter-sync-next-note</span>
     <span class="ss">:desc</span> <span class="s">"Create skeleton"</span>
     <span class="s">"m s"</span> <span class="nf">#'</span><span class="nv">org-noter-create-skeleton</span>
     <span class="ss">:desc</span> <span class="s">"Kill session"</span>
     <span class="s">"m q"</span> <span class="nf">#'</span><span class="nv">org-noter-kill-session</span>
     <span class="p">)</span>
  <span class="p">)</span></code></pre></figure>

<p>The most important thing is that you need to tell org-noter what the default location of your notes is.
In my case, I include my notes in my org-roam folder (we’ll discuss org-roam soon).
I also added a bunch of keybinds that I use to insert and navigate notes.</p>

<p>Org-noter doesn’t integrate with helm-bibtex out of the box.
That is what you can use <a href="https://github.com/org-roam/org-roam-bibtex">orb</a> for.
One very important thing that orb does is to tell helm-bibtex to use org-noter as the default note-keeping package. 
It also integrates org-noter with org-roam (again, we’re getting to org-roam soon).</p>

<p>See my config snippet for orb below. 
It is an altered version of what I copied from <a href="https://rgoswami.me/posts/org-note-workflow/">another post</a> about this.</p>

<figure class="highlight"><pre><code class="language-lisp" data-lang="lisp"> <span class="c1">;; org-roam-bibtex stuff</span>
  <span class="p">(</span><span class="nv">use-package!</span> <span class="nv">org-roam-bibtex</span>
    <span class="ss">:hook</span> <span class="p">(</span><span class="nv">org-roam-mode</span> <span class="o">.</span> <span class="nv">org-roam-bibtex-mode</span><span class="p">))</span>

  <span class="p">(</span><span class="k">setq</span> <span class="nv">orb-preformat-keywords</span>
        <span class="o">'</span><span class="p">(</span><span class="s">"citekey"</span> <span class="s">"title"</span> <span class="s">"url"</span> <span class="s">"author-or-editor"</span> <span class="s">"keywords"</span> <span class="s">"file"</span><span class="p">)</span>
        <span class="nv">orb-process-file-keyword</span> <span class="no">t</span>
        <span class="nv">orb-file-field-extensions</span> <span class="o">'</span><span class="p">(</span><span class="s">"pdf"</span><span class="p">))</span>

  <span class="p">(</span><span class="k">setq</span> <span class="nv">orb-templates</span>
        <span class="o">'</span><span class="p">((</span><span class="s">"r"</span> <span class="s">"ref"</span> <span class="nv">plain</span><span class="p">(</span><span class="k">function</span> <span class="nv">org-roam-capture--get-point</span><span class="p">)</span>
           <span class="s">""</span>
           <span class="ss">:file-name</span> <span class="s">"${citekey}"</span>
           <span class="ss">:head</span> <span class="s">"#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}
- tags ::
- keywords :: ${keywords}

* Notes
:PROPERTIES:
:Custom_ID: ${citekey}
:URL: ${url}
:AUTHOR: ${author-or-editor}
:NOTER_DOCUMENT: ${file}
:NOTER_PAGE:
:END:"</span><span class="p">)))</span></code></pre></figure>

<p>The first few lines are basically required to get orb to work with org-roam.</p>

<p>The most important lines are the ones below that.
The <code class="language-plaintext highlighter-rouge">orb-templates</code> function basically creates the templates of the files that you use to record your notes on pdfs with.
  I only have one template and at the bottom of the snippet you’ll see what is included in it (e.g., a url to the file, the author).
You have to define the keywords included in the template with the <code class="language-plaintext highlighter-rouge">orb-preformat-keywords</code> function.</p>

<p>With these settings, if I navigate to a reference in helm-bibtex, and then tell helm-bibtex to open my notes on that reference, it will create a new file (if a file on that reference does not already exist) which is preformatted according to the template defined above.</p>

<p>In other words, whenever I am writing a paper, I can easily consult my notes on another paper by opening up helm-bibtex, navigating to the paper I want to consult the notes on, and then pressing F9 (or simply choosing ‘‘add notes’’ from the helm-bibtex menu). 
Combined with the things I mentioned earlier: 
For any citation in my paper I can quickly open the pdf of that citation as well as my notes on that paper within a few seconds, and all within the same program.</p>

<h3 id="org-roam">Org-roam</h3>
<p>Not all notes that are relevant to the paper I am writing are necessarily notes on ‘another paper’.
They might just be notes on an idea that I wrote up a while ago.
They might also be more elaborate notes that I kept on a certain topic and that relate to multiple papers at the same time.
I might want to consult these notes too.</p>

<p>In addition, I might want to be able to link my notes on one paper to notes that I made on another paper, or to notes that I wrote on a broader topic.</p>

<p>This is (more or less) where <a href="https://www.orgroam.com/">org-roam</a> comes in.
There is a lot to be said about org-roam itself, but I don’t want to get lost in the details here.
Briefly, org-roam allows you to build a kind of <a href="https://fortelabs.co/blog/basboverview/">‘second brain’</a>.
It is an approach to taking notes that makes use of the <a href="https://en.wikipedia.org/wiki/Zettelkasten">Zettelkasten method</a>.
The idea behind that method is more or less that you keep relatively short notes that you explicitly link to other short notes.
Together, the notes form a horizontal network of notes that can be quickly navigated.</p>

<p>So, whenever you are writing a note on something, you will want to link it to notes on other ideas that you think are associated to the topic you are currently writing a note on.
An excellent discussion of that principle is offered <a href="https://blog.jethro.dev/posts/how_to_take_smart_notes_org/">here</a>.</p>

<p>Org-roam itself provides a powerful infrastructure that implements this approach to note-taking. 
A key element of it is the use of a buffer that gives you an overview of all the notes that are linked to the note you are currently inspecting (see below for an example; the overview buffer is on the right).</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/social_practice_theory-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/social_practice_theory-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/social_practice_theory-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/social_practice_theory.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example of org-noter in action
</div>

<p>If you keep this approach to note-taking up for a while, you’re slowly but surely building a network of notes.
Basically, you are building your own wiki.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/org-roam-network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/org-roam-network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/org-roam-network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/org-roam-network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
org-roam network
</div>

<p>My network of notes includes notes on various broader topics (such as the notes on social practice theory of which I included a screenshot above), notes on projects that I am working on, notes that I took on a particular day (e.g., ideas I didn’t want to forget about or perhaps notes on a meeting I had on that day), and of course my notes on papers.</p>

<p>What makes org-roam so powerful is that you can quickly (re)trace the associations between ideas that you made notes on. 
You might open a document with notes that you made on a particular paper, then follow the links to other notes that might seem interesting for whatever you are currently writing on, and so on and so forth.</p>

<p>This could even be a viable approach to outlining your initial ideas for a new paper, similar to what is shown in <a href="https://www.youtube.com/watch?v=RvWic15iXjk">this video</a>, which uses the software that inspired org-roam.</p>

<p>See my basic org-roam config below.</p>

<figure class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="c1">;; org-roam related things</span>
<span class="p">(</span><span class="nv">after!</span> <span class="nv">org-roam</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">org-roam-directory</span> <span class="s">"~/org-roam"</span><span class="p">)</span>

  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">'after-init-hook</span> <span class="ss">'org-roam-mode</span><span class="p">)</span>

  <span class="c1">;; Let's set up some org-roam capture templates</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">org-roam-capture-templates</span>
        <span class="p">(</span><span class="k">quote</span> <span class="p">((</span><span class="s">"d"</span> <span class="s">"default"</span> <span class="nv">plain</span> <span class="p">(</span><span class="k">function</span> <span class="nv">org-roam--capture-get-point</span><span class="p">)</span>
                 <span class="s">"%?"</span>
                 <span class="ss">:file-name</span> <span class="s">"%&lt;%Y-%m-%d-%H%M%S&gt;-${slug}"</span>
                 <span class="ss">:head</span> <span class="s">"#+title: ${title}\n"</span>
                 <span class="ss">:unnarrowed</span> <span class="no">t</span><span class="p">)</span>
                <span class="p">)))</span>

  <span class="c1">;; And now we set necessary variables for org-roam-dailies</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">org-roam-dailies-capture-templates</span>
        <span class="o">'</span><span class="p">((</span><span class="s">"d"</span> <span class="s">"default"</span> <span class="nv">entry</span>
           <span class="nf">#'</span><span class="nv">org-roam-capture--get-point</span>
           <span class="s">"* %?"</span>
           <span class="ss">:file-name</span> <span class="s">"daily/%&lt;%Y-%m-%d&gt;"</span>
           <span class="ss">:head</span> <span class="s">"#+title: %&lt;%Y-%m-%d&gt;\n\n"</span><span class="p">))))</span></code></pre></figure>

<p>What I do here is to first point to my org-roam directory, which is a folder without any sub-folders (except for one subfolder in which I keep my ‘daily’ notes, which are structured more like a journal) where I keep all my notes (including the ones made with org-noter).
I make sure that org-roam runs on emacs startup, and then I define two kinds of templates.
These templates define the names of the files to keep your notes in, as well as the basic contents of these files.</p>

<p>The first template is the template for my general notes.
These notes are kept in files with the date and time of their creation, followed by a short title that I type when creating the note.
The file itself only includes a title, and nothing else.</p>

<p>The second template is the template for my org-roam-dailies, which is basically a journal-type note, associated with a particular date. 
These files simply have the date on which they were made as their filename, and in this case too, the file itself includes nothing but the title of the file.</p>

<p>Whenever I am writing notes in one of these files, I can use simple keystrokes to insert links to other notes. 
If I insert a link to a note that doesn’t already exist, then a new file is automatically created for that note, ready to be filled at some point.</p>

<h2 id="wrapping-up">Wrapping up</h2>
<p>This lengthy blog posts discusses some of the key elements involved in my current paper writing process.
In short, org-mode serves as its basis, but this basis is enriched with powerful tools that allow me to:</p>
<ol>
  <li>export to different kinds of filetypes, including beautifully formatted pdfs.</li>
  <li>insert citations to papers in my library that are relevant to what I am currently writing on.</li>
  <li>read the pdfs of those papers.</li>
  <li>consult my notes on those papers, or write new ones.</li>
  <li>consult other notes that may be relevant to what I am working on that are not tied to specific papers.</li>
  <li>find even more potentially relevant notes, based on the links that exist between notes.</li>
</ol>

<p>I hope you found something useful / interesting in this post!</p>]]></content><author><name></name></author><category term="Academia" /><category term="Writing" /><category term="Tools" /><category term="Emacs" /><summary type="html"><![CDATA[EDIT (2023-01-03) I have recently migrated from Doom emacs to a vanilla emacs config. What I like about the vanilla config is that I am more in control of what it does. Doom emacs, in some respects, was a bit of a black box to me. Also, Doom emacs does a lot of things I do not actually need or want. In my original post, I linked to my dot files, which included my doom emacs config. The doom config files are still there, but not in the old_doom_config branch, instead of the master branch. My vanilla config maintains (I think) all of what I describe in my post. However, the config looks different in most places, for example because I could no longer make use of the Doom emacs macros.]]></summary></entry><entry><title type="html">A sign of life</title><link href="http://localhost:4000/blog/2021/a-sign-of-life/" rel="alternate" type="text/html" title="A sign of life" /><published>2021-02-13T22:00:00+01:00</published><updated>2021-02-13T22:00:00+01:00</updated><id>http://localhost:4000/blog/2021/a-sign-of-life</id><content type="html" xml:base="http://localhost:4000/blog/2021/a-sign-of-life/"><![CDATA[<h2 id="i-was-gone-for-a-bit">I was ‘gone’ for a bit</h2>
<p>The title of this blog post is a bit overly dramatic. 
Yet, it has been almost three years since my last blog post, so it does to some extent feel to me as if I am finally giving a sign of life after a long absence.</p>

<p>There are multiple reasons why I have not updated my website (except for some minor things) in a long time. 
One of them is that I became a father in 2018, which of course upended all my routines. 
Another reason is that I have changed jobs (and countries) in 2019. 
There are more reasons, but not all that interesting or important.</p>

<h2 id="but-i-am-reviving-this-blog">But I am reviving this blog</h2>
<p>What is more important is that I would like to pick up the routine of blogging again. 
As before, I will probably blog quite a bit about Q-SoPrA, the software that I have been working on for a while now. 
The development of Q-SoPrA is another thing that got slowed down due to the various changes in my personal life. 
However, I have done quite some work on it, and I feel like it is probably ready for a public beta release. 
However, I am not going to actually release it until after I finish a publication on the software (writing publications, another thing that got slowed down).
In the meantime there have been a few people that have been using it (including myself, of course). 
This includes a PhD student who recently graduated, as well as a master student who also recently graduated. 
One of my own projects in which I used Q-SoPrA was the evaluation of the development the Rotterdam Climate Agreement. 
We recently finished a <a href="http://localhost:4000/assets/pdf/rka_rapport.pdf">report</a> on this project (only available in Dutch) that includes various visualizations that I made with Q-SoPrA.
Last year I was involved in a H2020 bid in which we also included Q-SoPrA as one of our main tools.
The bid got excellent reviews, but when only 3 out of more than 50 bids can get funded, it becomes a bit of a lottery.</p>

<p>Anyway, I expect to be using Q-SoPrA and its underlying methodology in various future projects and I still hope that Q-SoPrA will be useful to others too.
I hope that picking up this blog again also gives a boost to my efforts to work towards a public release.</p>

<p>As an aside, I am also thinking about blogging on other topics related to my research, although I have to admit I find that much harder to do.
Maybe those posts will just be much shorter.</p>

<h2 id="some-things-i-have-added-to-q-sopra">Some things I have added to Q-SoPrA</h2>
<p>Anyway, I wanted to keep this one short as well. 
Let me close with an overview of a few (probably not all) things that I changed in Q-SoPrA in the meantime:</p>

<ul>
  <li>I added the possibility to distinguish between multiple coders in a project. 
This means that there are now also (still limited) possibilities to check for inter-coder reliability.
Q-SoPrA already included something like an inter-coder check for the linkages between events, but now inter-coder reliability can also be checked for <a href="/blog/2018/attributes-in-qsopra/">attributes</a>.</li>
  <li>I added a visualization widget to the linkage coder (I do not believe I discussed the linkage coder in detail yet; good topic for another post) to give visual feedback on the linkages that you are coding (see below).</li>
  <li>A added various date validation options to the <a href="/blog/2017/getting-started-with-qsopra/">data widget</a> that helps you to check the order of the incidents that you recorded in your dataset.</li>
  <li>I have added various options to layout events in the event graph widget (mentioned <a href="/blog/2018/attributes-in-qsopra/">here</a>) based on the date on which they occurred.</li>
  <li>I added various concordance plot-type visualizations. 
These can, for example, be used to visualize where in the dataset (and in time) codes occur. 
They can also be used to create quick overviews of where on a timeline events of a given type occur. 
I will probably show some of this off in a later post.</li>
</ul>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/visual_feedback-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/visual_feedback-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/visual_feedback-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/visual_feedback.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Visual feedback when creating linkages.
</div>

<p>There is probably a lot of stuff that I forget now, because it has been a while since I have been able to actively work on Q-SoPrA.</p>

<p>There is also some bigger stuff that I am actively working on in separate branches of the code repository. 
One of these branches implements something based on truth tables that are based of event graphs. 
This is related to a paper that I am collaborating on with someone who is into set theory.
Anyway, hopefully I can write more on that later too.</p>

<p>Actually, while writing this I realize there is plenty of stuff that could be interesting to discuss further in future blog posts.</p>

<h2 id="to-be-continued">To be continued…</h2>
<p>Okay, this was a short one, but my main purpose was to make a start again, and do it quick. Until the next one!</p>]]></content><author><name></name></author><category term="Software" /><category term="Q-SoPrA" /><category term="Non-Technical" /><summary type="html"><![CDATA[I was ‘gone’ for a bit The title of this blog post is a bit overly dramatic. Yet, it has been almost three years since my last blog post, so it does to some extent feel to me as if I am finally giving a sign of life after a long absence.]]></summary></entry><entry><title type="html">Drawing parallel edges in Qt</title><link href="http://localhost:4000/blog/2018/drawing-parallel-edges-in-qt/" rel="alternate" type="text/html" title="Drawing parallel edges in Qt" /><published>2018-09-11T16:46:00+02:00</published><updated>2018-09-11T16:46:00+02:00</updated><id>http://localhost:4000/blog/2018/drawing-parallel-edges-in-qt</id><content type="html" xml:base="http://localhost:4000/blog/2018/drawing-parallel-edges-in-qt/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I wrote a non-technical post on <a href="/blog/2018/relationships-in-qsopra/">relationships in Q-SoPrA</a>. One of the things I discuss there is plotting parallel edges, that is, multiple edges between the same pair of nodes. This is something I definitely wanted to be able to do, since I am interested in looking at social arrangements (of people, places, things, etc.) that can be related to each other in various ways. If I want to look at multiple relationships at the same time, being able to visualise parallel edges is a necessity. In this post I discuss some of the details of visualising parallel edges using Qt’s tools for visualisation. For a visual impression of what parallel edges look like in Q-SoPrA, see the screenshot below.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/parallel_edges-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/parallel_edges-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/parallel_edges-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/parallel_edges.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Parallel edges.
</div>

<h2 id="some-things-we-need-for-drawing">Some things we need for drawing</h2>
<p>In this post, I will be focusing almost exclusively on the drawing of edges, but I just want to briefly touch upon some of the other basic things we need in order to visualise them. Below you see a screenshot of the Network Graph Visualisation widget with all the menus unfolded. In the middle of this screenshot you see the space where the drawing actually happens. The drawing space itself is an object of the <a href="http://doc.qt.io/qt-5/qgraphicsview.html"><code class="language-plaintext highlighter-rouge">QGraphicsViews</code> class</a>, although I should add that in Q-SoPrA I use a sub-classed version in which I re-implemented many of the member functions of this class (the same goes for most other classes I discuss in this post). The <code class="language-plaintext highlighter-rouge">QGraphicsView</code> object visualises objects that are included in another object of the <a href="http://doc.qt.io/qt-5/qgraphicsscene.html"><code class="language-plaintext highlighter-rouge">QGraphicsScene</code> class</a> (a <code class="language-plaintext highlighter-rouge">QGraphicsScene</code> object needs to be assigned to the <code class="language-plaintext highlighter-rouge">QGraphicsView</code> object). These classes are quite well documented in the Qt documentation, so I will not go into details here (also see <a href="http://doc.qt.io/qt-5/graphicsview.html">this page</a> to read more about the Graphics View Framework of Qt).</p>

<p>Also, I recently read <a href="http://blog.qt.io/blog/2017/01/19/should-you-be-using-qgraphicsview/">this blog post</a>, which seems to suggest that Qt Quick is a potential replacement for the Graphics View Framework.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Network_Graph_Widget-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Network_Graph_Widget-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Network_Graph_Widget-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Network_Graph_Widget.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
The Network Graph widget.
</div>

<p>In the screenshot we also see that we have drawn objects in the drawing space. We can see nodes, we can see edges, and we can see labels. All these objects are <em>items</em> that are currently included (and visible) in the <code class="language-plaintext highlighter-rouge">QGraphicsScene</code> object. The nodes are objects of a sub-classed version of the <a href="http://doc.qt.io/qt-5/qgraphicsitem.html"><code class="language-plaintext highlighter-rouge">QGraphicsItem</code> class</a>, the edges are objects of a sub-classed version of the <a href="http://doc.qt.io/qt-5/qgraphicslineitem.html"><code class="language-plaintext highlighter-rouge">QGraphicsLineItem</code> class</a>, and the labels are objects of a sub-classed version of the <a href="http://doc.qt.io/qt-5/qgraphicstextitem.html"><code class="language-plaintext highlighter-rouge">QGraphicsTextItem</code> class</a>.</p>

<p>So, the <code class="language-plaintext highlighter-rouge">QGraphicsView</code>, the <code class="language-plaintext highlighter-rouge">QGraphicsScene</code> and the <code class="language-plaintext highlighter-rouge">QGraphicsItem</code> are the three basic types of objects that you need to make visualisations like the ones included in Q-SoPrA. The <code class="language-plaintext highlighter-rouge">QGraphicsItem</code>s are the things we want to visualise, the <code class="language-plaintext highlighter-rouge">QGraphicsScene</code> contains and manages these items, and the <code class="language-plaintext highlighter-rouge">QGraphicsViews</code> visualises the contents of the <code class="language-plaintext highlighter-rouge">QGraphicsScene</code>.</p>

<h2 id="drawing-edges-some-basics">Drawing edges: some basics</h2>
<p>Before I get into some specific challenges related to drawing parallel edges, it is useful to briefly discuss what goes into drawing a basic edge. There are a few basic properties of edges that we need to take into account:</p>

<ol>
  <li>An edge is mostly a <em>line</em> with a <em>starting point</em> (the centre of a source node) and an <em>end point</em> (the centre of a target node). Where we draw an edge will depend on where its source and target nodes are located. We thus need to somehow explicitly relate source and target nodes to edges, so that the edges can check their nodes’ locations before ‘drawing themselves’.</li>
  <li>To indicate the direction of edges we use <em>arrowheads</em>. We thus need a way to draw these, which is a bit more complicated than just drawing a line.</li>
  <li>The <em>arrowhead</em> should point at the target node, which means that the <em>line</em> we attach it to should stop a small distance before it reaches its <em>end point</em>. Otherwise the arrowhead would simply overlap with the target node (see screenshot below; I set the z-level of the source node lower than that of the edge to make clear from where to where we draw the edge’s line).</li>
</ol>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Wrong_Right_Edge-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Wrong_Right_Edge-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Wrong_Right_Edge-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Wrong_Right_Edge.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
A wrong edge and a correct edge.
</div>

<p>In Qt’s documentation you can find the <a href="http://doc.qt.io/qt-5/qtwidgets-graphicsview-diagramscene-example.html">Diagram Scene example</a> that achieves almost exactly this (see especially the <a href="http://doc.qt.io/qt-5/qtwidgets-graphicsview-diagramscene-arrow-h.html">header file</a> and the <a href="http://doc.qt.io/qt-5/qtwidgets-graphicsview-diagramscene-arrow-cpp.html">cpp file</a> of the Arrow class used in this example). The objects that Q-SoPrA uses to draw edges are inspired by this example, although the classes ended up looking quite different due to various specific requirements I had for my own class.  The class I developed is called <code class="language-plaintext highlighter-rouge">DirectedEdge</code>, and it is what I will focus upon in the remainder of this post.</p>

<p>Let us first take a look at the constructor of the <code class="language-plaintext highlighter-rouge">DirectedEdge</code> class. Here is a code snippet from which I have removed some details that are not important for the examples in this post.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">DirectedEdge</span><span class="o">::</span><span class="n">DirectedEdge</span><span class="p">(</span><span class="n">NetworkNode</span> <span class="o">*</span><span class="n">startItem</span><span class="p">,</span> <span class="n">NetworkNode</span> <span class="o">*</span><span class="n">endItem</span><span class="p">,</span> <span class="n">QString</span> <span class="n">submittedType</span><span class="p">,</span>
			   <span class="n">QString</span> <span class="n">submittedName</span><span class="p">,</span> <span class="n">QGraphicsItem</span> <span class="o">*</span><span class="n">parent</span><span class="p">)</span>
  <span class="o">:</span> <span class="n">QGraphicsLineItem</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span> 
<span class="p">{</span>
  <span class="n">start</span> <span class="o">=</span> <span class="n">startItem</span><span class="p">;</span>
  <span class="n">end</span> <span class="o">=</span> <span class="n">endItem</span><span class="p">;</span>
  <span class="n">color</span> <span class="o">=</span> <span class="n">Qt</span><span class="o">::</span><span class="n">black</span><span class="p">;</span>
  <span class="n">setPen</span><span class="p">(</span><span class="n">QPen</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">Qt</span><span class="o">::</span><span class="n">SolidLine</span><span class="p">,</span> <span class="n">Qt</span><span class="o">::</span><span class="n">RoundCap</span><span class="p">,</span> <span class="n">Qt</span><span class="o">::</span><span class="n">RoundJoin</span><span class="p">));</span>
  <span class="n">height</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
  <span class="n">relType</span> <span class="o">=</span> <span class="n">submittedType</span><span class="p">;</span>
  <span class="n">name</span> <span class="o">=</span> <span class="n">submittedName</span><span class="p">;</span>
  <span class="n">filtered</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
  <span class="n">massHidden</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
  <span class="n">setFlag</span><span class="p">(</span><span class="n">QGraphicsItem</span><span class="o">::</span><span class="n">ItemSendsGeometryChanges</span><span class="p">);</span>
  <span class="n">comment</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>As you can see, we are passing pointers to objects of the <code class="language-plaintext highlighter-rouge">NetworkNode</code> class to the constructor of <code class="language-plaintext highlighter-rouge">DirectedEdge</code>. The <code class="language-plaintext highlighter-rouge">NetworkNode</code> class is a sub-classed version I created of the <a href="http://doc.qt.io/qt-5/qgraphicsitem.html"><code class="language-plaintext highlighter-rouge">QGraphicsItem</code> class</a>, and I use this class to draw the nodes of my network diagrams. When we add <code class="language-plaintext highlighter-rouge">NetworkNode</code>s (or any other <code class="language-plaintext highlighter-rouge">QGraphicsItem</code> to a <code class="language-plaintext highlighter-rouge">QGraphicsScene</code> object, then these will be assigned a <em>scene position</em>, that is, a point in the scene that is defined by an x-coordinate and a y-coordinate. We can access the <em>scene position</em> of a <code class="language-plaintext highlighter-rouge">NetworkNode</code> (or other types of <code class="language-plaintext highlighter-rouge">QGraphicsItems</code>) by using the <a href="http://doc.qt.io/qt-5/qgraphicsitem.html#scenePos">‘scenePos()’ member function</a>. This will return a <a href="http://doc.qt.io/qt-5/qpointf.html">‘QPointF’ object</a> that contains the item’s coordinates. So, if we want to know from where to where to draw a certain edge, the obvious thing to do would be to first find the <em>scene positions</em> of its start node - start-&gt;scenePos() - and end node - end-&gt;scenePos() - and then draw the line between those two positions.</p>

<p>As I mentioned before, we actually want our line to stop shortly before it reaches its end point. What we could do is to create a <a href="http://doc.qt.io/qt-5/qlinef.html"><code class="language-plaintext highlighter-rouge">QLineF</code> object</a>, passing our start and end points as parameters, and then use the <code class="language-plaintext highlighter-rouge">setLength()</code> function to make the line slightly shorter: <code class="language-plaintext highlighter-rouge">myLine.setLength(myLine.length() - 18)</code>.</p>

<p>Then we still need to add our arrowhead. For this, I simply followed the <a href="http://doc.qt.io/qt-5/qtwidgets-graphicsview-diagramscene-example.html">Diagram Scene Example</a> provided in the online documentation for Qt. Basically, this involves creating a <a href="http://doc.qt.io/qt-5/qpolygonf.html"><code class="language-plaintext highlighter-rouge">QPolygonF</code></a> object with the shape of our arrowhead, and have this object drawn near the end point of our line.</p>

<p>We should do most of the above in the <a href="http://doc.qt.io/qt-5/qgraphicsitem.html#paint">‘paint()’ function</a> of our edge, because that is the function where we determine where and how the edge is drawn. I have included a code snippet below to illustrate what our <code class="language-plaintext highlighter-rouge">paint()</code> function might look like in this scenario.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">const</span> <span class="n">qreal</span> <span class="n">Pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">DirectedEdge</span><span class="o">::</span><span class="n">paint</span><span class="p">(</span><span class="n">QPainter</span> <span class="o">*</span><span class="n">painter</span><span class="p">,</span> <span class="k">const</span> <span class="n">QStyleOptionGraphicsItem</span> <span class="o">*</span><span class="p">,</span> <span class="n">QWidget</span> <span class="o">*</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">QPen</span> <span class="n">myPen</span> <span class="o">=</span> <span class="n">pen</span><span class="p">();</span> <span class="c1">// We need to create a pen for our painter...</span>
  <span class="n">myPen</span><span class="p">.</span><span class="n">setColor</span><span class="p">(</span><span class="n">color</span><span class="p">);</span> <span class="c1">// ...and indicate which colour it will use.</span>
  <span class="n">painter</span><span class="o">-&gt;</span><span class="n">setPen</span><span class="p">(</span><span class="n">myPen</span><span class="p">);</span> <span class="c1">// Now we set the pen to your painter.</span>
  <span class="n">QLineF</span> <span class="n">myLine</span> <span class="o">=</span> <span class="n">QLineF</span><span class="p">(</span><span class="n">start</span><span class="o">-&gt;</span><span class="n">scenePos</span><span class="p">(),</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">scenePos</span><span class="p">());</span> <span class="c1">// Here we create our line.</span>
  <span class="n">myLine</span><span class="p">.</span><span class="n">setLength</span><span class="p">(</span><span class="n">myLine</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">-</span> <span class="mi">20</span><span class="p">);</span> <span class="c1">// We shorten our line.</span>
  
  <span class="c1">// And then we create our arrowHead.</span>
  <span class="n">qreal</span> <span class="n">arrowSize</span> <span class="o">=</span> <span class="mf">10.0</span><span class="p">;</span>
  <span class="n">QPointF</span> <span class="n">arrowP1</span> <span class="o">=</span> <span class="n">myLine</span><span class="p">.</span><span class="n">p2</span><span class="p">()</span> <span class="o">-</span> <span class="n">QPointF</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">angle</span> <span class="o">+</span> <span class="n">Pi</span> <span class="o">/</span><span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">arrowSize</span><span class="p">,</span>
    <span class="n">cos</span><span class="p">(</span><span class="n">angle</span> <span class="o">+</span> <span class="n">Pi</span> <span class="o">/</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">arrowSize</span><span class="p">);</span>
  <span class="n">QPointF</span> <span class="n">arrowP2</span> <span class="o">=</span> <span class="n">myLine</span><span class="p">.</span><span class="n">p2</span><span class="p">()</span> <span class="o">-</span> <span class="n">QPointF</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">angle</span> <span class="o">+</span> <span class="n">Pi</span> <span class="o">-</span> <span class="n">Pi</span> <span class="o">/</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">arrowSize</span><span class="p">,</span>
  <span class="n">cos</span><span class="p">(</span><span class="n">angle</span> <span class="o">+</span> <span class="n">Pi</span> <span class="o">-</span> <span class="n">Pi</span> <span class="o">/</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">arrowSize</span><span class="p">);</span>
  
  <span class="n">arrowHead</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
  <span class="n">arrowHead</span> <span class="o">&lt;&lt;</span> <span class="n">myLine</span><span class="p">.</span><span class="n">p2</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">arrowP1</span> <span class="o">&lt;&lt;</span> <span class="n">arrowP2</span><span class="p">;</span>

  <span class="n">painter</span><span class="o">-&gt;</span><span class="n">drawLine</span><span class="p">(</span><span class="n">myLine</span><span class="p">);</span>
  <span class="n">painter</span><span class="o">-&gt;</span><span class="n">drawPolygon</span><span class="p">(</span><span class="n">arrowHead</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>And that should do the trick. At least, if we were only interested in drawing edges as straight lines. However, what if we want to draw parallel edges, that is, multiple edges between the same pair of nodes? In this case, if we would just use straight lines, then the edges would overlap, and we would actually not be able to see that multiple edges exist between our nodes. In this case, it is better to draw edges as curved lines, and to change the strength of the curve for each additional edge that we add to a given pair of nodes. The remainder of this post will be about how we can do this, and what challenges we will face.</p>

<h2 id="drawing-parallel-edges">Drawing parallel edges</h2>

<p>Drawing a curved line with the Qt library is not difficult to do. One of the easiest ways to <code class="language-plaintext highlighter-rouge">paint()</code> a curved line is by creating a <a href="http://doc.qt.io/qt-5/qpainterpath.html"><code class="language-plaintext highlighter-rouge">QPainterPath</code> object</a>, and use its <a href="http://doc.qt.io/qt-5/qpainterpath.html#quadTo"><code class="language-plaintext highlighter-rouge">quadTo()</code> function</a>. This function takes two arguments: One of the arguments is the end point that we want to draw the curved line to, and the other argument is a so-called control point that we will use to determine how the line will be curved (how strong the curve will be and which direction it will curve in). We do not give the function a starting point. Instead, we should move the <code class="language-plaintext highlighter-rouge">QPainterPath</code> object to our starting point using its <a href="http://doc.qt.io/qt-5/qpainterpath.html#moveTo">‘moveTo()’ function</a> before calling the <code class="language-plaintext highlighter-rouge">quadTo()</code> function.</p>

<p>So, what about this control point? Consider the image I have linked to below (found through this <a href="https://stackoverflow.com/questions/50129580/program-to-find-line-segment-and-bezier-curve-intersection">Stack OverFlow</a> discussion). The image shows nicely how the control point works. It is a point somewhere ‘above’ the place where we want our line to curve towards the control point. In the image you see that if we place the control point somewhere above the middle of the line, then the line will also curve around its middle point. This is exactly what I wanted for my parallel edges. In the image you also see that the curve will change if we move the control point closer to the starting point or the end point. This is something that I want to avoid.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/beziercurve.gif-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/beziercurve.gif-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/beziercurve.gif-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/beziercurve.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Bezier curves.
</div>

<p>So far so good. Assume that our starting point is at coordinates <code class="language-plaintext highlighter-rouge">(0, 5)</code> in the scene, and our end point is at coordinate <code class="language-plaintext highlighter-rouge">(10, 5)</code> in the scene, we can first simply calculate the point that lies exactly in between them: <code class="language-plaintext highlighter-rouge">x = (10 + 0) / 2 = 5</code> and <code class="language-plaintext highlighter-rouge">y = (5 + 5) / 2 = 5</code>, giving us the point at coordinates <code class="language-plaintext highlighter-rouge">(5, 5)</code>. Then we still need to set the ‘height’ of the curve, which, in this case, we can do simply by adding some constant to the y-coordinate of our middle point, giving us, for example, the point at coordinates <code class="language-plaintext highlighter-rouge">(5, 25)</code>. If we then pass this point to the <code class="language-plaintext highlighter-rouge">quadTo()</code> function, we will get a nice curved line.</p>

<p>This example was relatively simple, because the slope of the straight line between our starting point and our end point is 0. This makes finding the control point relatively straightforward. However, consider now that we have a line that starts at coordinates <code class="language-plaintext highlighter-rouge">(0, 5)</code> and ends at coordinates <code class="language-plaintext highlighter-rouge">(10, 10)</code>. Finding the point that lies exactly in the middle is still quite easy: <code class="language-plaintext highlighter-rouge">x = (0 + 10) / 2 = 5</code> and <code class="language-plaintext highlighter-rouge">y = 5 + 10 / 2 = 7.5</code>. However, how do we now find the control point, somewhere ‘above’ this middle point? We cannot simply add a constant value to the y-coordinate of our middle point, because that would place the control point somewhere right from the middle of the line, and create a curve that skews to the left (similar to the left part of the picture above, where the line is skewed to the right).</p>

<p>There are multiple possible solutions here. One thing we could do is to simply (1) calculate the distance between the start point and end point of the edge (using the pythagorean theorem), (2) draw an imaginary straight line from our start point with a slope of 0 (that is, parallel to our x-axis), and with a length that equals the distance we measured in step 1, (3) create a curved edge from the start and end point of our imaginary straight line, using the procedure described above, (4) calculate the angle between our imaginary straight line and the sloped line from our original starting point to our original end point, and then (5) <a href="http://doc.qt.io/archives/qt-4.8/qpainter.html#rotate">rotate()</a> the painter by the number of degrees of that angle before drawing our edge. In effect, we are just drawing a curved edge between two points on a horizontal line, and we are then rotating that edge before it is drawn, thereby changing its end point. This is the solution I used for a while, because it is relatively simple to implement. However, it does cause some complications for calculating the <a href="http://doc.qt.io/qt-5/qgraphicsitem.html#boundingRect">bounding rect</a> and the <a href="http://doc.qt.io/qt-5/qgraphicsitem.html#shape">shape</a> of the edge, because we are essentially working in multiple coordination systems. I will not discuss these complications in detail here, but it is important to know that they can cause unwanted behaviour in visualisations.</p>

<p>There is another, better solution that I eventually switched to after experiencing issues with my first solution. This solution starts with drawing an imaginary straight line between the start and the end points of our edge. We then calculate the midpoint of our line, as before. Then we draw a straight line perpendicular to our first line that crosses our midpoint, and we pick a point on that line as our control point. This sounds relatively straightforward, but it took me some time to figure out how to properly implement the formula for setting the control point.</p>

<p>Rather than including all these steps in the <a href="http://doc.qt.io/qt-5/qgraphicsitem.html#paint">‘paint()’ function</a> of our edge, I wrote a separate <code class="language-plaintext highlighter-rouge">calculate()</code> function that makes the necessary calculations, and is called by the paint function (as well as by other functions that require knowledge of the control point’s position). See the two functions in the code snippet below.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="n">DirectedEdge</span><span class="o">::</span><span class="n">calculate</span><span class="p">()</span> 
<span class="p">{</span>
  <span class="c1">// We first calculate the distance covered by our edge</span>
  <span class="n">qreal</span> <span class="n">dX</span> <span class="o">=</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">().</span><span class="n">x</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">().</span><span class="n">x</span><span class="p">();</span>
  <span class="n">qreal</span> <span class="n">dY</span> <span class="o">=</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">().</span><span class="n">y</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">().</span><span class="n">y</span><span class="p">();</span>
  <span class="n">qreal</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">pow</span><span class="p">(</span><span class="n">dX</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">pow</span><span class="p">(</span><span class="n">dY</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
  <span class="c1">// Then we create a straight line from our start point to our end point and shorten its length</span>
  <span class="n">QLineF</span> <span class="n">newLine</span> <span class="o">=</span> <span class="n">QLineF</span><span class="p">(</span><span class="n">start</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">(),</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">());</span>
  <span class="n">newLine</span><span class="p">.</span><span class="n">setLength</span><span class="p">(</span><span class="n">newLine</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">-</span> <span class="mi">18</span><span class="p">);</span>
  <span class="c1">// Then we calculate the coordinates of our midpoint</span>
  <span class="n">qreal</span> <span class="n">mX</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">().</span><span class="n">x</span><span class="p">()</span> <span class="o">+</span> <span class="n">newLine</span><span class="p">.</span><span class="n">p2</span><span class="p">().</span><span class="n">x</span><span class="p">())</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
  <span class="n">qreal</span> <span class="n">mY</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">().</span><span class="n">y</span><span class="p">()</span> <span class="o">+</span> <span class="n">newLine</span><span class="p">.</span><span class="n">p2</span><span class="p">().</span><span class="n">y</span><span class="p">())</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
  <span class="c1">// And the coordinates of our control point. We use the edges height as a scaling factor</span>
  <span class="c1">// to determine the 'height' of the control point on a line perpendicular to our </span>
  <span class="c1">// original line (newLine).</span>
  <span class="n">qreal</span> <span class="n">cX</span> <span class="o">=</span> <span class="n">height</span> <span class="o">*</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="p">(</span><span class="n">dY</span> <span class="o">/</span> <span class="n">distance</span><span class="p">))</span> <span class="o">+</span> <span class="n">mX</span><span class="p">;</span>
  <span class="n">qreal</span> <span class="n">cY</span> <span class="o">=</span> <span class="n">height</span> <span class="o">*</span> <span class="p">(</span><span class="n">dX</span> <span class="o">/</span> <span class="n">distance</span><span class="p">)</span> <span class="o">+</span> <span class="n">mY</span><span class="p">;</span>
  <span class="n">controlPoint</span> <span class="o">=</span> <span class="n">QPointF</span><span class="p">(</span><span class="n">cX</span><span class="p">,</span> <span class="n">cY</span><span class="p">);</span>
  <span class="c1">// We create another line from our control point to our end point and shorten its length</span>
  <span class="n">ghostLine</span> <span class="o">=</span> <span class="n">QLineF</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">,</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">());</span>
  <span class="n">ghostLine</span><span class="p">.</span><span class="n">setLength</span><span class="p">(</span><span class="n">ghostLine</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">-</span> <span class="mi">18</span><span class="p">);</span>
  <span class="c1">// Then we do the calculations we need to create our arrowhead</span>
  <span class="kt">double</span> <span class="n">angle</span> <span class="o">=</span> <span class="o">::</span><span class="n">acos</span><span class="p">(</span><span class="n">ghostLine</span><span class="p">.</span><span class="n">dx</span><span class="p">()</span> <span class="o">/</span> <span class="n">ghostLine</span><span class="p">.</span><span class="n">length</span><span class="p">());</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">ghostLine</span><span class="p">.</span><span class="n">dy</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">angle</span> <span class="o">=</span> <span class="p">(</span><span class="n">Pi</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="n">angle</span><span class="p">;</span>
  <span class="n">qreal</span> <span class="n">arrowSize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="n">arrowP1</span> <span class="o">=</span> <span class="n">ghostLine</span><span class="p">.</span><span class="n">p2</span><span class="p">()</span> <span class="o">-</span> <span class="n">QPointF</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">angle</span> <span class="o">+</span> <span class="n">Pi</span> <span class="o">/</span><span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">arrowSize</span><span class="p">,</span>
				     <span class="n">cos</span><span class="p">(</span><span class="n">angle</span> <span class="o">+</span> <span class="n">Pi</span> <span class="o">/</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">arrowSize</span><span class="p">);</span>
  <span class="n">arrowP2</span> <span class="o">=</span> <span class="n">ghostLine</span><span class="p">.</span><span class="n">p2</span><span class="p">()</span> <span class="o">-</span> <span class="n">QPointF</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">angle</span> <span class="o">+</span> <span class="n">Pi</span> <span class="o">-</span> <span class="n">Pi</span> <span class="o">/</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">arrowSize</span><span class="p">,</span>
				     <span class="n">cos</span><span class="p">(</span><span class="n">angle</span> <span class="o">+</span> <span class="n">Pi</span> <span class="o">-</span> <span class="n">Pi</span> <span class="o">/</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">arrowSize</span><span class="p">);</span>
  <span class="c1">// We set the new line as the line for this edge object and communicate that we </span>
  <span class="c1">// are about to change the objects geometry (this will makes sure the bounding rect</span>
  <span class="c1">// is reset as well.</span>
  <span class="n">setLine</span><span class="p">(</span><span class="n">newLine</span><span class="p">);</span>
  <span class="n">prepareGeometryChange</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">DirectedEdge</span><span class="o">::</span><span class="n">paint</span><span class="p">(</span><span class="n">QPainter</span> <span class="o">*</span><span class="n">painter</span><span class="p">,</span> <span class="k">const</span> <span class="n">QStyleOptionGraphicsItem</span> <span class="o">*</span><span class="p">,</span> <span class="n">QWidget</span> <span class="o">*</span><span class="p">)</span> 
<span class="p">{</span>
  <span class="c1">// We have to set a pen and its colours.</span>
  <span class="n">QPen</span> <span class="n">myPen</span> <span class="o">=</span> <span class="n">pen</span><span class="p">();</span>
  <span class="n">myPen</span><span class="p">.</span><span class="n">setColor</span><span class="p">(</span><span class="n">color</span><span class="p">);</span>
  <span class="n">painter</span><span class="o">-&gt;</span><span class="n">setPen</span><span class="p">(</span><span class="n">myPen</span><span class="p">);</span>
  <span class="n">painter</span><span class="o">-&gt;</span><span class="n">setBrush</span><span class="p">(</span><span class="n">color</span><span class="p">);</span>
  <span class="c1">// We call the calculate function outlined above.</span>
  <span class="n">calculate</span><span class="p">();</span>
  <span class="c1">// We create the arrowhead, using ghostLine (from the control point to slight before the end point)</span>
  <span class="c1">// to determine the direction from which the arrow is pointing.</span>
  <span class="n">arrowHead</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
  <span class="n">arrowHead</span> <span class="o">&lt;&lt;</span> <span class="n">ghostLine</span><span class="p">.</span><span class="n">p2</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">arrowP1</span> <span class="o">&lt;&lt;</span> <span class="n">arrowP2</span><span class="p">;</span>
  <span class="c1">// We create a path object as a based for our curved edge.</span>
  <span class="n">QPainterPath</span> <span class="n">myPath</span><span class="p">;</span>
  <span class="c1">// We move this path to the start point of our edge.</span>
  <span class="n">myPath</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="n">start</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">());</span>
  <span class="c1">// The we create a bezier curve to our end point, using the control point to curve it</span>
  <span class="n">myPath</span><span class="p">.</span><span class="n">quadTo</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">,</span> <span class="n">ghostLine</span><span class="p">.</span><span class="n">p2</span><span class="p">());</span>
  <span class="n">strokePath</span> <span class="o">=</span> <span class="n">myPath</span><span class="p">;</span>
  <span class="c1">// And then we draw the arrowhead and the curved line</span>
  <span class="n">painter</span><span class="o">-&gt;</span><span class="n">drawPolygon</span><span class="p">(</span><span class="n">arrowHead</span><span class="p">);</span>
  <span class="n">painter</span><span class="o">-&gt;</span><span class="n">strokePath</span><span class="p">(</span><span class="n">myPath</span><span class="p">,</span> <span class="n">QPen</span><span class="p">(</span><span class="n">color</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<h2 id="a-few-other-things-to-note-about-these-functions">A few other things to note about these functions</h2>
<p>In addition to finding the control point (which I explained above how to do), there are a few other things we need to do to make sure that we end up with nice looking curved edges. First of all, we might have 3 or more parallel edges between the same nodes. If we want to make all edges visible, we need to increase the strength of the curve for each parallel edge that we add (to prevent them from overlapping). That is what the <code class="language-plaintext highlighter-rouge">height</code> scaling factor in the snippet above is used for. This height has to be set explicitly, for which I wrote a very simple function. Then it is simply a matter of keeping track of what edges we already have in our <code class="language-plaintext highlighter-rouge">scene</code> and to make sure that the <code class="language-plaintext highlighter-rouge">height</code>s of the curves of our edges are adjusted accordingly. This is something that needs to be handled at a higher level, and I will not discuss it any further here.</p>

<p>We also need to make sure that our arrowhead actually points <em>from</em> the right direction. If we would attach our arrowhead to the original line we draw from the start point to the end point, it would make an awkward angle, as shown in the screenshot below.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Wrong_Arrowhead-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Wrong_Arrowhead-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Wrong_Arrowhead-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Wrong_Arrowhead.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
A bad arrowhead.
</div>

<p>This is relatively easy to correct with the resources that we already have. In the code snippet that I included above, you will see that I created an object that I called <code class="language-plaintext highlighter-rouge">ghostLine</code>, which is a line that runs from the control point that we calculated for the bezier curve to the end point of the edge (minus a small distance to prevent the line from overlapping with the node). This <code class="language-plaintext highlighter-rouge">ghostLine</code> is useful for determining where the curved edge should end, as well as for determining the angle that the arrowhead should point from. Essentially, what we can do is attach the arrowhead to the <code class="language-plaintext highlighter-rouge">ghostLine</code> and draw the arrowhead, but not draw the line itself. For illustrative purposes, I included a screenshot below where the <code class="language-plaintext highlighter-rouge">ghostLine</code> is drawn, so that you can get an idea of how it helps to determine the angle of the arrowhead.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Midpoint_Line-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Midpoint_Line-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Midpoint_Line-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Midpoint_Line.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
The ghost line.
</div>

<h2 id="final-comments">Final comments</h2>

<p>And that is it. The code snippets above contain the most essential ingredients for drawing curved edges within the Qt Framework. Indeed, there is plenty of stuff that goes on around this that needs to be implemented for all of this to work. Later this year, the source code for Q-SoPrA will be open, which gives you the opportunity to examine the code in more detail.</p>]]></content><author><name></name></author><category term="Software" /><category term="Q-SoPrA" /><category term="Technical" /><category term="Qt" /><summary type="html"><![CDATA[Introduction I wrote a non-technical post on relationships in Q-SoPrA. One of the things I discuss there is plotting parallel edges, that is, multiple edges between the same pair of nodes. This is something I definitely wanted to be able to do, since I am interested in looking at social arrangements (of people, places, things, etc.) that can be related to each other in various ways. If I want to look at multiple relationships at the same time, being able to visualise parallel edges is a necessity. In this post I discuss some of the details of visualising parallel edges using Qt’s tools for visualisation. For a visual impression of what parallel edges look like in Q-SoPrA, see the screenshot below.]]></summary></entry><entry><title type="html">Relationships in Q-SoPrA</title><link href="http://localhost:4000/blog/2018/relationships-in-qsopra/" rel="alternate" type="text/html" title="Relationships in Q-SoPrA" /><published>2018-02-21T20:00:00+01:00</published><updated>2018-02-21T20:00:00+01:00</updated><id>http://localhost:4000/blog/2018/relationships-in-qsopra</id><content type="html" xml:base="http://localhost:4000/blog/2018/relationships-in-qsopra/"><![CDATA[<h2 id="introduction-process-and-structure">Introduction: Process <em>and</em> structure</h2>
<p>As the name suggests, Q-SoPrA (<strong>Q</strong>ualitative <strong>So</strong>ftware for <strong>Pr</strong>ocess <strong>A</strong>nalysis) is focused first and foremost on the qualitative analysis of social <em>processes</em>. However, I invested a lot of time and energy in also creating features that can be used to study how these processes relate to <em>structures</em>. In my opinion, this is a somewhat obvious thing to do, since so many social theories posit some kind of relationship between process and structure (often couched in terms of <em>agency</em> and <em>structure</em>. I can use my own application of Q-SoPrA as an example. I am currently using Q-SoPrA in a study that, conceptually, builds on <a href="https://books.google.co.uk/books?id=753WUmtDIiwC&amp;printsec=frontcover&amp;dq=The+Site+of+the+Social&amp;hl=nl&amp;sa=X&amp;ved=0ahUKEwjPvMuKta_ZAhWNLlAKHZz0DIMQ6AEIJzAA#v=onepage&amp;q=The%20Site%20of%20the%20Social&amp;f=false">Schatzki’s</a> concepts of <em>social practices</em> (in short, organised doings and sayings) and <em>social arrangements</em> of people, artefacts, places, and other types of entities. I use event graphs to reconstruct practices as networks of activities (<a href="https://books.google.co.uk/books?id=753WUmtDIiwC&amp;printsec=frontcover&amp;dq=The+Site+of+the+Social&amp;hl=nl&amp;sa=X&amp;ved=0ahUKEwjPvMuKta_ZAhWNLlAKHZz0DIMQ6AEIJzAA#v=onepage&amp;q=The%20Site%20of%20the%20Social&amp;f=false">Schatzki</a> also writes about <em>chains of action</em> in this context), and I use more traditional network graphs to reconstruct arrangements as networks of relationships between entities. One aspect of my investigation is to study how unfolding practices relate to (changes in) arrangements.</p>

<p>I believe that many other theoretical perspectives are compatible with Q-SoPrA, although Q-SoPrA probably fits best with perspectives that assume <em>primacy of process over structure</em> (see <a href="https://books.google.co.uk/books?id=8MjR29eJLYIC&amp;printsec=frontcover&amp;dq=Process+metaphysics&amp;hl=nl&amp;sa=X&amp;ved=0ahUKEwj-8drota_ZAhVCZ1AKHVUwBKUQ6AEIJzAA#v=onepage&amp;q=Process%20metaphysics&amp;f=false">Rescher</a>). In other words, Q-SoPrA connects best with the assumption that (social) life is essentially a flux, and that the emergence and persistence of structures are generally <a href="https://en.wikipedia.org/wiki/Accident_(philosophy)">accidental</a> properties of processes, even if those these accidental properties can be widespread (and I think they are). This assumption can be opposed to the assumption that reality is fundamentally structural, and that change and development are accidental properties of structures.</p>

<blockquote>
I should perhaps add that, in my view, this does not necessarily mean that processes should always have priority in the explanation of social phenomena. I think it is perfectly reasonable to assume that structures emerge from process, but are then capable of shaping or inducing processes in radical ways, and are therefore of great explanatory value, depending on the specific research questions being asked. <br /><br />

That being said, from a process perspective it would then still be obvious to also ask the question what processes lead to the (re)production of that structure.
</blockquote>

<p>So how does Q-SoPrA assume primacy of social process? Well, by using <a href="/blog/2017/getting-started-with-qsopra/">incidents</a> as indicators for relationships (although it is of course equally possible to think of incidents as enactments of relationships without changing the general approach). More specifically, Q-SoPrA allows you to define relationships (I discuss the details below), and then assign these to incidents in the same way that you would assign <a href="/blog/2018/attributes-in-qsopra/">attributes</a>. This also creates the benefit that it becomes possible to study networks of relationships that were indicated by incidents in a particular episode of the process, thereby providing a rudimentary way to look at changes in networks of relationships over time, as I discuss further below.</p>

<p>In the past, I used to do something similar by assigning actors to events (as attributes), and then looking at the <em>co-participation</em> (or co-affiliation) of actors in events over time (also see my post about <a href="/blog/2017/bi-dynamic-line-graphs/">bi-dynamic line graphs</a>). Two important limitations of this approach are that (1) <em>co-participation</em> is basically an abstract summary of many different ways in which actors can be related to each other through events, and (2) not all relationships that are <em>indicated</em> by events are necessarily captured by their co-participation. To offer an example of the first limitation, imagine that we have two events in which the same pair of actors interacted with each other, but that in one event the interaction concerned the joint organisation of an activity, and in the other event the interaction concerned one actor providing financial support to the other actor. If we simply model both occasions as co-participation, then we lose the ability to distinguish between the two situations. To offer an example of the second limitation, imagine that we have an activity in which an individual is acting as a representative of a certain group. If we want to capture this fact as a membership relation, it would be awkward to capture it as co-participation of the individual and the group in the activity. Instead, it would make more sense if we could simply define a <em>membership</em> relationship, and say that the activity is an indication of the individual being a member of the group.</p>

<p>The way I implemented relationship coding in Q-SoPrA is basically an attempt to take away these limitations. In addition, I made sure that Q-SoPrA is able to visualise networks of relationships that have multiple modes (for an introduction into two-mode networks, see this <a href="https://toreopsahl.com/tnet/two-mode-networks/defining-two-mode-networks/">blog post</a>; Q-SoPrA allows you to define more than two modes), and multiple types of relationships. Parallel edges (multiple edges between the same pair of entities) are drawn with curved lines to make sure that multiple types of relationships can be visualised in one graph. In addition, it is possible to perform multi-mode transformations to infer ‘latent’ relationships from observed ones. I will explain all of this in detail in the remainder of this post.</p>

<p>Before I proceed, I should make the note that the example data set that I use below is based on a narrative that Peter Abell provided in <a href="http://www.tandfonline.com/doi/abs/10.1080/0022250X.1993.9990119">one of his papers on Comparative Narratives</a>. Abell’s theory and method of Comparative Narratives are major sources of inspiration for the ideas implemented in Q-SoPrA.</p>

<h2 id="the-relationships-widget">The relationships widget</h2>
<p>In the screenshot below you see what the relationships widget looks like. If you’ve seen <a href="/blog/2018/attributes-in-qsopra/">my earlier post on attributes in Q-SoPrA</a>, you’ll notice that the relationships widget and attributes widget look very similar. Each incident in the data set can be inspected individually, with the information available on the incident displayed in the left half of the screen. With the navigation buttons at the bottom-left you can go through the previous or next incident as they appear in the overall chronological order (which you set in <a href="/blog/2017/getting-started-with-qsopra/">the data widget</a>), you can jump to the previous or next incident that is marked (incidents can be marked and unmarked with the <strong>Toggle mark</strong> button), or you can jump to a specific incident by using the <strong>Jump to</strong> button.</p>

<p>In the right half of the screen you will see a relationships tree (when you start a new data set, this tree will be blank). This tree works a bit different from the <a href="/blog/2018/attributes-in-qsopra/">attributes tree</a>. One important difference is that the relationship tree can only have two levels. The first level of the tree shows <em>relationship types</em>, and the children of each relationship type are <em>instances</em> of this type. As we can see in the screenshot below, we have two instances of the <em>conceived of</em> relationship type, one of which captures that the <em>entity</em> “Cooperative Manager” conceived of the <em>entity</em> “Moratorium PLan”, while the other captures that the <em>entity</em> “External members” conceived of the <em>entity</em> “General assembly proposal”.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Relationships_Widget_2-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Relationships_Widget_2-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Relationships_Widget_2-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Relationships_Widget_2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Relationships widget
</div>

<p>We can learn more about the definition of this relationship type by hovering our mouse over it (or hovering it over one of its instances). A tool tip with a description of the relationship will appear, as shown in the screenshot below. The description will always start with an indication of the <em>directedness</em> of the relationship, which may be set to <em>Directed</em> or <em>Undirected</em>. This is followed by the definition of the relationship that was created by the user.</p>

<p>The directedness of relationship types is also visualised in the labels that represent instances of that relationship type. As you can see in the screenshot below, the label of the two visible instances have a single arrow pointing from left to right, meaning that the relationship is directed from the entity on the left to the entity on the right. With undirected relationship types, there would be a double arrow pointing in both directions.</p>

<blockquote>
I assume that you are familiar with the idea of directedness in relationships (in the context of network analysis). If not, this probably means that you still need to familiarise yourself with the basics of social network analysis, and I would suggest taking a look at <a href="https://books.google.co.uk/books?id=CAm2DpIqRUIC&amp;printsec=frontcover&amp;redir_esc=y#v=onepage&amp;q&amp;f=false">the book by Wasserman and Faust</a>, which I think works great as an introduction, as well as an in-depth work of reference.
</blockquote>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Relationships_Tooltip-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Relationships_Tooltip-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Relationships_Tooltip-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Relationships_Tooltip.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
A directed relationship
</div>

<h3 id="defining-relationship-types">Defining relationship types</h3>
<p>So how do we define relationship types in Q-SoPrA? This can be done by clicking the <strong>Add relationship type</strong> button. This will open a new dialog where the details of the relationship type can be written. The screenshot below shows an example of this, using the <em>conceived of</em> relationship type. As you can see, we can create a label for the relationship type, which is the label that is shown in the relationships tree. We are also required to offer a description of the relationship type, and we have to set its directedness. The same dialog will appear if you select an existing relationship type and click <strong>Edit relationship type</strong> in the relationships widget, but in this case the details of the existing relationship type will be shown in the dialog.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Relationship_Type-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Relationship_Type-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Relationship_Type-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Relationship_Type.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Adding or editing a relationship type
</div>

<p>As you can see in the screenshot above, in the definition of this relationship type I have also indicated what types of entities can enter into this relationship (and in what role). In this case, I indicated that the source of the relationship should always be a (type of) actor, and the target should always be a (type of) plan. This implies that <em>actors</em> and <em>plans</em> are different types of entities in our data set, and in Q-SoPrA we can actually define different types based on attributes that we assign to entities. I’ll get back to this point further below.</p>

<h3 id="creating-new-relationships">Creating new relationships</h3>
<p>After we have defined a new relationship type, no instances of this relationship type will exist yet. For this, we have to explicitly create new relationships. This can be done by first selecting a relationship type in the relationships tree, and then clicking the <strong>Add relationship</strong> button. This will open another dialog (see below). In the dialog we see a list of entities (this list can be filtered with the <strong>Source filter</strong>), and several controls.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/New_Relationship-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/New_Relationship-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/New_Relationship-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/New_Relationship.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Adding a new relationship
</div>

<h4 id="defining-a-new-entity">Defining a new entity</h4>
<p>The list of entities will be empty if you have not defined any entities yet. Let us assume for a moment that this is the case. Before we can actually create a new relationship, we need to define entities that can enter in that relationship. This can be done by clicking the <strong>Define new entity</strong> button. This will open another dialog where a new entity can be created, as shown below. You are always required to provide a name and a description for your entity. In addition, we can use an attributes tree to assign attributes to the entity. This work almost exactly the same as <a href="/blog/2018/attributes-in-qsopra/">assigning attributes to incidents</a>, except that we cannot associate any ‘raw text’ with <em>entity attributes</em>.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/New_Entity-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/New_Entity-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/New_Entity-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/New_Entity.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Adding a new entity.
</div>

<p>New attributes can be created in this screen as well. For this we would click the <em>New attribute</em> button. This will open yet another dialog (see below), but you’ll be pleased to know that we won’t open any other dialogs from here. The new dialog is a simple dialog where a label and description for the new attribute can be created. After creating the new attribute, it will appear in the attributes tree of the previous dialog. For this example, I have decided not to create the entity “Toby, the magic purple elephant” anyway, because it doesn’t really contribute anything to my case study.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Attribute_Dialog_2-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Attribute_Dialog_2-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Attribute_Dialog_2-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Attribute_Dialog_2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Creating new attributes.
</div>

<h4 id="assigning-entities-to-relationships">Assigning entities to relationships</h4>
<p>If we have defined at least two entities, we can assign them to the relationship that we are creating (in Q-SoPrA, entities cannot enter into a relationships with themselves). If you look at the screenshot of the relationships dialog below, you’ll see that under the list of entities, there are two buttons: <strong>use as source</strong> and <strong>use as target</strong>. Below these buttons you’ll see a description of the relationship as it is currently defined. When no entities have been assigned yet, in place of the <em>Source</em> and the <em>Target</em>, it will simply say “-Unselected-“. Entities can be assigned by selecting them in the list, and then clicking one of the <strong>use as…</strong> buttons. This will also change the description of the relationship (see below).</p>

<p>After we have assigned entities to our relationship, we can save it. It will now appear as one of the instances of the selected relationship type in the relationships tree. Each relationship can only be defined once. I should note here that undirected relationships with the source and target switched around are treated as identical. So, a relationship like <em>Wouter&lt;–has contact with–&gt;Toby</em> is treated as being identical to <em>Toby&lt;–has contact with–&gt;Wouter</em>.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Assigning_Entities-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Assigning_Entities-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Assigning_Entities-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Assigning_Entities.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Assigning entities to a relationship.
</div>

<h4 id="editing-entities">Editing entities</h4>
<p>In addition to defining new entities, we can also edit existing ones from this dialog. This can be done by selecting an entity in the list and clicking the <strong>Edit highlighted entity</strong> button, or by clicking the <strong>Edit left assigned entity</strong> or the <strong>Edit right assigned entity</strong> buttons to edit entities that were already assigned to the currently inspected relationship. This will open the same dialog that is used for defining new entities, but with the details of the selected entity already filled out.</p>

<h3 id="assigning-relationships">Assigning relationships</h3>
<p>Assigning a relationship to an incident does work the same as <a href="/blog/2018/attributes-in-qsopra/">assigning attributes</a>. In short, you select a relationship in the relationships tree, and then click the <strong>Assign relationship</strong> button to associate the relationship with the incident that is currently being inspected. It is also possible to associate a fragment of raw text (in the <strong>Raw</strong> field in the left half of the screen), by highlighting the text before clicking the <strong>Assign relationship</strong> button (this can also be done after the relationship is already assigned). If you want to disassociate a fragment of text from an assigned relationship you can either select this fragment of text in the <strong>Raw</strong> field, and then click the <strong>Remove text</strong> button, or you can click the <strong>Reset texts</strong> button, which will remove all fragments of text associated with the selected relationship and incident.</p>

<p>As with attributes, it is possible to navigate incidents via relationships that are assigned to them. This can be done by clicking a relationship, and then clicking the <strong>Previous coded</strong> or the <strong>Next coded</strong> buttons, which will jump to the previous/next incident that has the selected relationship assigned to it.</p>

<h3 id="filtering-and-commenting-on-relationships">Filtering and commenting on relationships</h3>
<p>I think it is likely that you’ll create quite a large number of relationships if you’re going to make use of the relationships widget. This means that the relationships tree quickly becomes heavily populated. By grouping relationships under different types, it should be possible to keep an overview relatively easily. However, often it will be easier to simply filter the relationships by using the <strong>Filter relationships</strong> field. For example, if you’re looking for a relationship that involves a particular entity, you can type the entity’s name in this field, and Q-SoPrA will filter out all relationships that do not include this entity.</p>

<p>You can also add comments to relationships. These comments are associated with the relationship itself, not with specific relationship-incident pairs. This is just like writing a comment/memo, but in this case the comment/memo applies specifically to a relationship. This can be achieved by selecting the relationship in the list, then typing the comment in the <strong>Comment</strong> field, and clicking the <strong>Set comment</strong> button afterwards.</p>

<h2 id="visualising-networks-of-relationships">Visualising networks of relationships</h2>
<p>In the previous sections, I discussed how relationships can be defined, and then assigned to incidents. After you have identified relationships in your data, the more interesting thing to do is indeed to visualise them. I created the network graph visualisation widget for this purpose.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Network_Graph_Widget-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Network_Graph_Widget-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Network_Graph_Widget-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Network_Graph_Widget.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
The Network Graph widget.
</div>

<p>When you switch to this widget, it will initially be blank. To start plotting a network, you have to select a relationship type from a drop-down menu in the top left of the screen. In this menu, all relationship types that you have created are listed (see above). If you select one of them, you can then click the <strong>Plot new</strong> button. This will open a dialog that you can use to assign a colour to the relationship type you wish to plot (see below). By assigning different colours to different relationship types, we can distinguish between them in the visualisation. The colours belonging to different relationship types are listed in the legend, which can be opened by clicking the <strong>Toggle legend</strong> button at the bottom right of the network graph widget’s screen.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Colour_Dialog-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Colour_Dialog-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Colour_Dialog-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Colour_Dialog.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Assigning different colours to relationships.
</div>

<p>When you plot the network (I have chosen to plot the <em>has contact with</em> relationship, using the default black colour for the edges/relationships), it will appear in the draw screen (see below). The graph will initially just have a collection of unlabeled nodes (a selection of our entities) and the relationships between them. Q-SoPrA will always only show entities that are in a relationship that is currently visible (this also means that there can never be isolates in networks plotted by Q-SoPrA).</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/First_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/First_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/First_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/First_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 1.
</div>

<h3 id="the-graph-layout">The graph layout</h3>

<p>The default layout by Q-SoPrA is a ‘spring-like layout’. It is basically an intuitive layout algorithm that I quickly implemented as a temporary placeholder when I was creating this widget. However, with some improvements over time it actually turned out to function quite well, so I never bothered to find and use another algorithm to replace it with. I did add a second layout algorithm, which is the circular layout. As the name suggest, this will simply layout the nodes in a circle.</p>

<blockquote>
The circular layout does in fact do a little bit more than that. If you have modes assigned to your network (discussed further below), the nodes in the circular layout will be sorted by mode.
</blockquote>

<p>It is possible to expand or contract the layout by using the appropriate controls (these can be found in the <strong>Controls</strong> menu, which can be opened by clicking the <strong>Toggle controls</strong> button). It is possible to drag around nodes by clicking and dragging them with your mouse cursor. If you select multiple nodes, you can drag them around as a group by holding the CTRL button while clicking and dragging. I implemented very basic collision detection to make sure that nodes push each other away when they bump into each other.</p>

<p>In our current plot, it is impossible for us to clearly identify our entities. We can improve the visualisation a bit by adding labels to the graph. This is also done from the <strong>Controls</strong> menu, where you will find a button <strong>Toggle labels</strong>, which can be used to show/hide node labels. Like the nodes, node labels can be dragged around individually by clicking and dragging them with your mouse cursor. However, wherever a node label is located relative to its ‘parent node’, it will always mimic the movements of that parent node. This allows you to change the position of the labels to make the graph more readable (see below).</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Second_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Second_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Second_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Second_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 2.
</div>

<p>There is also another way to see more details about the nodes. We can hover our mouse cursor over nodes to see a tool tip with their name and description, or we can open the <strong>Details</strong> menu (by clicking the <strong>Toggle details</strong> button) to see the details we have available on the nodes that are currently selected, including attributes assigned to them (see below).</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Third_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Third_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Third_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Third_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 3.
</div>

<h3 id="filtering-relationships">Filtering relationships</h3>
<p>The network we are currently visualising is quite dense. This is because nearly all actors have been in contact with each other at least once in the process. In this visualisation, all the moments that we observed that actors were in contact with each other are aggregated. It can be interesting to filter out certain episodes in the process, to see what the network looked like during a specific episode of the process.</p>

<p>Q-SoPrA does this in a rudimentary way, by allowing you to set upper and lower bounds for the incidents that should be included in the visualisation. Indeed, the incidents themselves are not directly visible in the graph, but the relationships that were assigned to incidents are. By changing the upper and lower bounds in the <strong>Controls</strong> menu, we can thus manipulate the visualisation to only show relationships that were assigned to incidents that fall within those bounds. In the screenshot below you can see that our network becomes sparser if we filter out some of the later incidents in our data set.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Fourth_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Fourth_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Fourth_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Fourth_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 4.
</div>

<p>Filters can also be disabled for individual relationship types. This can be done by selecting the relationship type in the legend, and clicking the <strong>Filter off</strong> button. This means that all relationships of this type will be shown, no matter what bounds you have set in the <strong>Controls</strong> menu, effectively allowing you to filter some relationship types, while keeping others fixed. To set the filter on again for a relationship type, you select the relationship type in the legend, and click the <strong>Filter on</strong> button.</p>

<p>It is also possible to temporarily hide relationships of a certain type altogether, by selecting the relationship type in the legend and clicking the <strong>Hide</strong> button. Hidden relationships can be revealed again by clicking the <strong>Show</strong> button.</p>

<h3 id="changing-colours">Changing colours</h3>
<p>There are some basic ways to change the visualisation, in addition to a few more advanced ones that I discuss further below. A basic change we can make is to change the colour of the nodes, labels, as well as the background of the plot screen. This is all done using the appropriate controls in the <strong>Controls</strong> menu. Using one of the colour controls will open the colour-picking dialog that we have seen in an earlier screenshot.</p>

<p>We can also change the colour of the current relationship type by double clicking its colour in the legend. This will also open the colour-picking dialog, where you can select the colour you would like to change to. In screenshot below, I have changed the colour of the nodes to red, I have changed the colour of the labels to blue, and I have changed the colour of the relationship type <em>has contact with</em> to orange. There is no other consequence of these changes beyond the visual ones.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Fifth_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Fifth_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Fifth_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Fifth_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 5.
</div>

<h3 id="adding-additional-relationship-types">Adding additional relationship types</h3>
<p>Now let’s make things a little bit more interesting. I will add another relationship type, in this case the <em>conceived of</em> relationship type that we saw earlier. I can do this by selecting this relationship type from the drop-down menu in the top left of the screen, and by clicking the <strong>Add relationship type</strong> button (Clicking <strong>Plot new</strong> would just overwrite the current plot). As the colour of this relationship, I pick dark blue in this case.</p>

<p>Q-SoPrA will add the relationship type, as well as any new entities that this relationship type introduces to the network. The upper and lower bounds of the network filter will be reset, as well as the layout. The result can be seen in the screenshot below (I did adjust the position of the nodes and the labels already).</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Sixth_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Sixth_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Sixth_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Sixth_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 6.
</div>

<p>You can see that our legend now has two entries. You may also notice that two new entities have been added to the plot, namely the <em>Moratorium plan</em> and the <em>General assembly proposal</em>. If we would inspect their details, we could see that I assigned the attribute <em>Plan</em> to both these entities.</p>

<h3 id="creating-modes">Creating modes</h3>
<p>So now we have a network with two quite different types of nodes, but we haven’t made this explicit yet in the visualisation. We can do this by assigning modes to the network (see <a href="https://toreopsahl.com/tnet/two-mode-networks/defining-two-mode-networks/">this blog post</a> if you don’t know what modes in a network are). In Q-SoPrA, modes can be assigned to nodes based on attributes that we associated with entities. One attribute that I used while creating entities is the <em>Actor</em> attribute. If I want to create a new mode based on this attribute, I can click the <strong>Create mode</strong> button near the top of the <strong>Legend</strong> menu. This will open a screen with our tree of entity attributes, where we can select an attribute, as well as a node colour, and a label colour to be associated with that mode (see below).</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Mode_Creation-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Mode_Creation-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Mode_Creation-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Mode_Creation.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Creating modes.
</div>

<p>In the example above, I have selected to create a mode based on the <em>Actor</em> attribute, and I set the node colour to light blue, and the label colour to black. I used the same procedure to create a second mode, using the <em>Plan</em> attribute, but here I set the node colour to green, and the label colour to black. The results of these operations are shown in the screenshot below.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Seventh_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Seventh_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Seventh_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Seventh_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 7.
</div>

<p>You can see that Q-SoPrA has automatically changed the colours of the nodes and the labels. Q-SoPrA does this by looking through all entities that were assigned the attribute that serves as the basis for a mode, and then classifying the matching entities in the appropriate mode. You will also see that we now have another legend, which lists the modes that we have just created (the top part of the <strong>Legend</strong> menu).</p>

<p>It is of course possible that an entity could be classified in multiple modes, based on the attributes assigned to it. However, any node in the network is allowed to be in only one mode at the same time. Q-SoPrA decides which mode a given entity should be assigned to based on the order in which the modes appear in the mode legend. Modes to the top of the list are always assigned first, which means that modes lower in the list may overwrite those higher in the list.</p>

<p>For example, if we now decide to create yet another mode, using one of the children of the <em>Actor</em> attribute (like <em>Individual actor</em>), we will see that some nodes that were previously in the <em>Actor</em> mode will now be in the <em>Individual actor</em> mode (see screenshot below).</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Eighth_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Eighth_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Eighth_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Eighth_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 8.
</div>

<blockquote> 
By now, we have a three-mode network, although technically we don't. Yes, that is confusing...<br /><br /> The reason why I say this is that in graph theory, two-mode networks are typically only considered to be two-mode networks if they are structurally bipartite. A network is bipartite if relationships only exist between nodes of two different modes, and never between nodes of the same mode.<br /><br />

In other words, whether or not a network is bipartite is essentially a structural question; we could determine that a network is bipartite by only looking at the patterns of relationships in the network, and without knowing anything about attributes that were assigned to the nodes. <br /><br />

It is of course possible that the graphs you create in Q-SoPrA are also bipartite (or maybe even tripartite) in this structural sense, but this makes no difference for how modes are interpreted in Q-SoPrA, which is purely attribute-based.
</blockquote>

<p>Since <a href="/blog/2018/attributes-in-qsopra/">my last post</a>, on attributes in Q-SoPrA, I have actually implemented a new feature, which allows you to change the order in which modes are assigned in the network graph widget and the event graph widget (discussed briefly in my <a href="/blog/2018/attributes-in-qsopra/">last post</a>). We can do this by selecting a mode, and then using the <strong>Up</strong> or <strong>Down</strong> buttons to change its position in the list. So, if we move the <strong>Actor</strong> mode to the bottom of the list, this means that the <strong>Individual Actor</strong> mode will be overwritten, as shown below. This allows you to control in a bit more detail how modes are assigned to nodes in the network.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Ninth_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Ninth_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Ninth_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Ninth_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 9
</div>

<p>This might be a good place to also write something about <em>mode transformations</em>, but with our current graph, there would not be an interesting transformation to look at. Let us therefore first add a little bit more complexity to our graph.</p>

<h3 id="parallel-edges">Parallel edges</h3>
<p>Q-SoPrA allows you to visualise parallel edges between nodes. These exist when multiple relationships exist between the same pair of nodes. To demonstrate this, I will add three additional relationship types to the graph, showing which actors have (1) shown <em>support</em> for certain plans, (2) offered <em>resistance</em> against them, or (3) shown a somewhat neutral <em>interest</em> in plans (that is, not being explicitly supportive, but also not dismissive of a plan).</p>

<p>The resulting network is show below. The graph is quite complex, since all relationships observed over the entire case study period are visualised. Some actors changed their stance towards plans over time. For example, <em>older worker members</em> were first resistant against the <em>Moratorium plan</em>, but later on started showing mild interest, before finally giving the plan full support. Indeed, to see this development, we could simply change the lower and upper bounds of the network visualisation to filter the network, but in this case I want to demonstrate how parallel edges are visualised.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Tenth_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Tenth_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Tenth_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Tenth_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 10.
</div>

<p>You will see that three edges are directed from the <em>Older worker members</em> entity to the <em>Moratorium plan</em> entity, capturing the three different attitudes that the former have had towards the latter. Q-SoPrA will automatically increase the ‘height’ of edge curves if another edge between the corresponding pair of nodes is already visible.</p>

<h3 id="mode-transformations">Mode transformations</h3>
<p>Now that we have a slightly more complex network, more interesting options for performing mode transformations arise. I think of mode transformations as a way of inferring ‘latent’ (not empirically observed) relationships from empirically observed ones.</p>

<p>For example, imagine that we have a case study, in which we empirically observe (1) that some actors communicate with each other, and also (2) that some actors organise activities together. It is possible that we did not empirically observe some actors that co-organise activities also communicating with each other. However, it would actually make sense to assume that they did, because how will you co-organise something without getting in touch with each other?</p>

<p>We could of course solve this by assuming that co-organisation entails communication, and thus assigning both relationship types to an incident whenever that incident describes an instance of co-organisation of activities. However, to keep things simple, I like to stick to relationships that I can observe more or less directly in my data, and it can be quite difficult to keep the level of concentration required for this type of double-coding. Therefore, I instead choose to tell Q-SoPrA that whenever two actors co-organised something, that must mean that they have been communicating as well. This is what mode transformations can be used for.</p>

<p>In the example case study that we have here, we’ll look at a slightly different situation. We now have a network with several actors who have relationships to each other, but also to plans that have been conceived during the process of interest. One thing we could look at is to see if we can identify coalitions around plans based on the attitudes that actors have towards them.</p>

<p>One way to do this would be to say that actors are in a coalition if they support the same plans, or if one of them conceived of a plan, and the other supports it. Creating a new relationship based on these situations will involve multiple transformations.</p>

<p>Let us first simplify our network a bit by removing some of the relationships that we won’t be working with, that is, only keeping the <em>conceived of</em> and <em>supports</em> relationships. We can do this by selecting them in the edge legend, and then clicking the <strong>Remove</strong> button at the bottom of the <strong>Legend</strong> menu. See the result below.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Eleventh_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Eleventh_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Eleventh_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Eleventh_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 11.
</div>

<p>Our next step could be to create a new relationship type based on situations where one actor conceived of a plan, and another actor supports that plan. After that we will create yet another relationship type for situations where two actors support the same plan. We will later merge these relationships into one. Since it is not possible to create a new relationship type with a label that is already taken by existing one, I will take the following steps:</p>

<ol>
  <li>I will create the first new relationship type and call it <em>is in coalition with A</em>.</li>
  <li>I will create the second new relationship type and call it <em>is in coalition with B</em>.</li>
  <li>I will merge the two new relationship types in a third one and call it <em>is in coalition with</em>.</li>
</ol>

<p>As you will see, merging two relationships will actually remove their original versions from the plot (but not from the data set, unless the relationships were created through transformations, as is the case in this example).</p>

<p>So let’s start with the first new relationship type. To create it, I click the <strong>Multimode trans.</strong> button (short for Multimode Transformation). This will open the dialog shown below (where I have already chosen my settings).</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Mode_Transformation-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Mode_Transformation-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Mode_Transformation-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Mode_Transformation.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Conducting multimode transformations.
</div>

<p>This dialog can be quite confusing when you first use it, or when you are unfamiliar with mode transformations (also, I take a somewhat different approach than is commonly used in other software, possibly adding to the confusion).</p>

<p>We first have to select the modes that will be part of this transformation. We want to create a new relationship type between nodes of the mode <em>Actor</em>, based on the relationships that these nodes have to nodes of the mode <em>Plan</em>. The first mode to select in this dialog (<strong>Mode one</strong>) should always be the mode among which the new relationship type can exist. So, in this case we set <strong>Mode one</strong> to <em>Actor</em>. The second mode should always be the mode to which nodes of the first mode might have a shared relationship (this is exactly like co-affiliation), so in this case we select <em>Plan</em> for <strong>Mode two</strong>.</p>

<p>We are not finished yet. We also have to set the relationship types that are to be considered for this transformation. It is possible that our nodes in the <em>Actor</em> mode have different types of relationships to nodes in the <em>Plan</em> mode, which is actually true in this case: Some actors <em>conceive of</em> plans, while others <em>support</em> them. In this case, we set <strong>Relationship ego</strong> to <em>supports</em>, and we set <strong>Relationship alter</strong> to <em>conceived of</em>. Why does it matter which relationship type we assign to ego or alter? Well, in this particular case it actually doesn’t matter. However, imagine that we were creating a relationship type called <em>is supportive of</em>, which is a directed relationship from actors that support plans to actors whose plans they are supportive of. In this case, we would thus want to create a directed relationship type from <em>ego</em> to <em>alter</em>, and then it matters which relationship types are set for ego and alter in the multimode transformation dialog.</p>

<blockquote>
If this is not clear, then simply trying out different settings will probably clarify things.
</blockquote>

<p>When we have set the relationship types, we get to the easy part: We need to create a label for the new relationship type, as well as a description. Finally, we need to choose the directedness of the relationship, which in this case we set to <em>Undirected</em>. Now we can save our new relationship type (we will be asked to pick a colour for the new relationship type), and it will be added to the graph. See the result below.</p>

<blockquote>
The multimode transformation dialog will only allow you to pick between modes and relationship types that are visible in the current network. This helps to simplify the procedure somewhat.
</blockquote>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Twelfth_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Twelfth_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Twelfth_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Twelfth_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 12.
</div>

<p>So, the first step is done. You will see that I have added a new relationship type with a pink-ish colour, and which exists between pairs of actors where one of those actors conceived of a plan, and the other actor supported that plan.</p>

<p>Now let’s add the other relationship type. We again open the multimode transformation dialog. We set the modes in the same way we did the last time, but now we set the relationships of both ego and alter to <em>supports</em> (see below).</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Mode_Transformation2-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Mode_Transformation2-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Mode_Transformation2-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Mode_Transformation2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Conducting another multimode transformation.
</div>

<p>As you will see in the screenshot of the dialog above, with these settings the options for choosing the directedness of the relationship are not available. Since we have set the relationship type for both ego and alter to the same type, it would not make sense to create a directed relationship based on this transformation. Essentially, we do not even have a way to really distinguish between an ego and an alter in this case.</p>

<p>For our second relationship type, I have chosen the colour light blue. The result of our second transformation is shown in the screenshot below.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Thirteenth_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Thirteenth_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Thirteenth_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Thirteenth_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 13.
</div>

<p>I think the graph is quite pretty like this, but it is not really easy to read. Also, our two relationship types still exist separately from each other. To merge the two relationships, we can use the <strong>Merge</strong> option near the bottom of the <strong>Legend</strong> menu. This will open the dialog shown below.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Merge_Dialog-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Merge_Dialog-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Merge_Dialog-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Merge_Dialog.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Merging relationships
</div>

<p>In this case we are shown a list of check boxes, where each check box represents one of the currently visible relationship types. We can use the check boxes to select the relationship types that we wish to merge (we can select more than two). It is not possible to merge relationships that have a different directedness (<em>directed</em> vs. <em>undirected</em>).</p>

<p>We are also asked to provide a label and a description for the new relationship type. Then, after saving the new relationship, we are again asked to pick a colour (I picked the colour black this time), and the new relationship will be added in the graph. At the same time, the relationships that we merged will be removed. See the result below.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Fourteenth_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Fourteenth_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Fourteenth_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Fourteenth_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 14.
</div>

<p>You can see that our network has already become much simpler after the merger. If we are interested in looking specifically at coalitions, we can hide the other relationship types to simplify things even further. We select them in the edge legend, and click the <strong>Hide</strong> button for each.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Fifteenth_Network-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Fifteenth_Network-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Fifteenth_Network-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Fifteenth_Network.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example network 15.
</div>

<p>We can now see our new relationship type more clearly. We can see a coalition around the <em>General assembly proposal</em> in the bottom, and we can see a coalition around the <em>Moratorium plan</em> in the top. We can also see that there is one actor that appears in both coalitions (<em>Older worker members</em>).</p>

<p>While making these transformations, we did actually also lose some information. For example, the newly created relationship types are no longer filterable, because they are not themselves associated with any particular incidents. Thus, if you want to create such networks for a more specific episode of the process, you will have to filter the network from the very beginning. If you wish to compare the network at different points in time, you will have to repeat this procedure several times.</p>

<h3 id="exporting-data">Exporting data</h3>
<p>We have now already discussed quite some details about how relationships can be used in Q-SoPrA. One thing that we haven’t discussed is the possibility to calculate network metrics. I will immediately say that it is not possible to do this in Q-SoPrA… yet. I do have long-term plans to support the calculation of network metrics, but there are a couple of difficulties that are hard to overcome. For example, in Q-SoPrA you can create quite complex networks, with multiple types of relationships that may differ in directedness. It will be a challenge to create an interface for network metrics that takes all these nuances into account. I want to prevent a situation in which one calculates network metrics that actually do not make a lot of sense for the type of network structure under consideration (for example, certain network measures for one-mode networks have to be adapted before they can be applied to two-mode networks).</p>

<p>For now, I work with a much simpler solution: I allow the user to export network data from Q-SoPrA, which can then be imported into other software packages for further analysis. I have chosen to allow exports of node lists and edge lists that are structured in such a way that they can be imported directly into <a href="http://www.gephi.org">Gephi</a>. I have two main reasons for this. First, Gephi is open source software, and I prefer to support an open source solution over a commercial one. Second, data that is imported to Gephi can be exported in many different formats. Thus, I see Gephi as a kind of gateway to other software packages. In addition, the edge list format for Gephi is quite close to the edge list formats used by some other software packages.</p>

<p>Exporting network data can be done from the <strong>Controls</strong> menu, using the <strong>Export nodes</strong> button and the <strong>Export edges</strong> button. The latter option will immediately open a dialog where you are asked to select a location and a name for your edge list, which is exported in CSV-format. If you click the <strong>Export nodes</strong> button, you will first be shown a table that shows the node list that will be exported. This list will include the <em>Id</em> of the nodes, the <em>Label</em> of the nodes (the labels are actually identical to the Ids, but this has something to do with how I typically structure the node lists I import into Gephi), the <em>Description</em> of the entities associated with the nodes, and the <em>Mode</em> that the nodes are in (this will be blank if no modes were assigned).</p>

<p>In this screen, you can add additional variables to the node list, by clicking the <strong>Add attribute</strong> button. Attributes can be added as a <em>boolean</em>, or as a <em>valued</em> variable. Boolean variables simply indicate whether or not a given attribute was assigned to a node. When you select to add an attribute as a boolean, than a <code class="language-plaintext highlighter-rouge">1</code> will be inserted in the new column if (a) the selected attribute was assigned, or (b) one of the children of the selected attribute was assigned. A <code class="language-plaintext highlighter-rouge">0</code> will be inserted in all other cases. If you select the option to add <em>valued</em> variables, then only the values assigned to the selected attribute will be considered (and not its children). Assigning values to attributes is not something I discussed in this post, but it works exactly the same as explained in <a href="/blog/2018/attributes-in-qsopra/">my earlier post on attributes</a>.</p>

<p>In the screenshot below, you see an example where I have added two attributes to the node list that indicate, respectively, whether a node has the attribute <em>collective actor</em> and whether a node has the attribute <em>Individual actor</em>. After adding attributes, the final node list can be exported as a CSV-file by clicking the <strong>Export</strong> button. This will also automatically close this dialog.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Export_Nodes-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Export_Nodes-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Export_Nodes-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Export_Nodes.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Exporting nodes.
</div>

<p>It is also possible to export the visualisation of the network graph you have created. This can be done by clicking the <strong>Export svg</strong> button in the <strong>Controls</strong> menu. This will open a dialog where you are asked to provide a name and location for the SVG-file. The SVG-file can be opened with <a href="https://inkscape.org/en/">Inkscape</a>, which is another wonderful open source tool. In Inkscape you will be able to manipulate your graph further (each element of the graphic can still be manipulated individually), and then export it as (for example) a PNG file or a PDF, with several options to determine the resolution of the exported graphic.</p>

<h2 id="final-comments">Final comments.</h2>
<p>This concludes my discussion of relationships in Q-SoPrA. I hope it has given you some ideas about how Q-SoPrA can be used for (mostly qualitative) network analysis.</p>]]></content><author><name></name></author><category term="Software" /><category term="Q-SoPrA" /><category term="Non-Technical" /><summary type="html"><![CDATA[Introduction: Process and structure As the name suggests, Q-SoPrA (Qualitative Software for Process Analysis) is focused first and foremost on the qualitative analysis of social processes. However, I invested a lot of time and energy in also creating features that can be used to study how these processes relate to structures. In my opinion, this is a somewhat obvious thing to do, since so many social theories posit some kind of relationship between process and structure (often couched in terms of agency and structure. I can use my own application of Q-SoPrA as an example. I am currently using Q-SoPrA in a study that, conceptually, builds on Schatzki’s concepts of social practices (in short, organised doings and sayings) and social arrangements of people, artefacts, places, and other types of entities. I use event graphs to reconstruct practices as networks of activities (Schatzki also writes about chains of action in this context), and I use more traditional network graphs to reconstruct arrangements as networks of relationships between entities. One aspect of my investigation is to study how unfolding practices relate to (changes in) arrangements.]]></summary></entry><entry><title type="html">Attributes in Q-SoPrA</title><link href="http://localhost:4000/blog/2018/attributes-in-qsopra/" rel="alternate" type="text/html" title="Attributes in Q-SoPrA" /><published>2018-01-26T00:26:00+01:00</published><updated>2018-01-26T00:26:00+01:00</updated><id>http://localhost:4000/blog/2018/attributes-in-qsopra</id><content type="html" xml:base="http://localhost:4000/blog/2018/attributes-in-qsopra/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>One of the tasks that you are likely to use Q-SoPrA for is the qualification of incident data, by assigning codes to them (see <a href="/blog/2017/getting-started-with-qsopra/">this earlier post</a> for an explanation of what incidents are). The tools you will use for this are not very different from those that you would typically use to assign codes to interviews or the contents of documents when using <a href="https://en.wikipedia.org/wiki/Computer-assisted_qualitative_data_analysis_software">CAQDAS software</a>. In Q-SoPrA, the codes that are used to qualify incident data are referred to as <em>attributes</em>.</p>

<p>You can use attributes to capture any information included in incident data that is meaningful for your study. For example, you could use attributes to distinguish between different types of activities, to identify actors or other entities involved in incidents, to record changes in variables associated with the incidents, and so on. What exactly you will use attributes for will depend heavily on your research question(s), and the theoretical basis of your research. You might of course also use attributes in a ‘grounded research’ approach, where you develop attributes on the fly, and develop these further as you proceed with your project. In this post I try to be mostly agnostic to different ways in which attributes might be used, while discussing various ways in which attributes (can) play a role when using Q-SoPrA in research projects.</p>

<p>In this post I discuss four main topics. I first discuss some basic, somewhat technical details of what attributes in Q-SoPrA are, how they can be organised, and how they are stored, and so on (but this is really quite simple). I then discuss different ways in which attributes can be assigned to incidents (and more abstract events; more on this later). This is followed by a brief discussion of various other simple ways to interact with attributes. Finally, I discuss some ways in which attributes can be used in visualisation and analysis.</p>

<h2 id="attributes-in-q-sopra">Attributes in Q-SoPrA</h2>
<p>Attributes have to be defined by the user. There are three different widgets in which this can be done, but the most obvious ‘place’ to define new attributes is the <em>Attributes Widget</em> (see screenshot below).</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Attributes_Widget-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Attributes_Widget-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Attributes_Widget-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Attributes_Widget.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
The Attributes widget.
</div>

<p>On the left side of this screen you see some fields that show the data associated with the incident that is currently being inspected (the timing, source, description, raw source text, and other comments/memos written by the analyst). On the right side of the screen you can see the attributes view. When you create a new database, this view will be empty. In the bottom-right of the screen you see all controls that are specifically associated with attributes. For example, you find controls to define new attributes, to edit existing ones, to assign the currently selected attribute to the present incident, and etcetera.</p>

<h3 id="creating-new-attributes">Creating new attributes</h3>
<p>We will focus first on the creation of new attributes. Attributes in Q-SoPrA can be understood to have three main properties:</p>

<ol>
  <li>All attributes have a unique label (or name);</li>
  <li>All attributes have a description (or definition);</li>
  <li>Attributes <em>can</em> have a parent attribute.</li>
</ol>

<p>To create a new attribute, click the <strong>New Attribute</strong> button. This will open the dialog shown below.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Attribute_Dialog-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Attribute_Dialog-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Attribute_Dialog-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Attribute_Dialog.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
The Attribute dialog.
</div>

<p>You are always required to provide a label and a description for your attributes. If one of these is missing, then Q-SoPrA won’t allow you to save the attribute. Also, the name of the attribute has to be unique. The idea behind forcing you to provide a description is to make you think immediately about the definition of your attribute, and about the phenomena that your attribute is supposed to capture.</p>

<h3 id="attribute-hierarchies">Attribute hierarchies</h3>
<p>I mentioned above that attributes <em>can</em> have parents. That is, attributes in Q-SoPrA can be hierarchically organised by assigning parents/children to them. A parent is automatically assigned to a new attribute if you select an existing one before clicking the <em>New Attribute</em> button. In this case, the new attribute will be created as a child of the existing attribute you selected. You can re-parent attributes by dragging and dropping them onto other attributes. If you drag an attribute to an empty space in the attribute view, the attribute will be ‘orphaned’, and appear in the highest level of the attribute hierarchy. In this way, you can create as many hierarchical levels of attributes as you like.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Attributes_Tree-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Attributes_Tree-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Attributes_Tree-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Attributes_Tree.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
The Attributes tree.
</div>

<p>The position of an attribute in the hierarchy has important consequences. An attribute that has a parent is always considered as a sub-type of that parent. For example, if you have an attribute called <em>Activities</em>, and you have another attribute called <em>Night-time activities</em> that is a child of <em>Activities</em>, then Q-SoPrA assumes that <em>Night-time activities</em> are a kind of <em>Activities</em>. In this way, any attribute can serve as a sort of category for other attributes.</p>

<p>The specific organisation of your attributes hierarchy will be important in, among other things, the identification of ‘modes’ in your event graph (modes are discussed in a bit more detail further below): When you create a new mode based on the attribute <em>Activities</em>, then all incidents and events that were assigned an attribute that is a child of <em>Activities</em> (or grandchild, or great-grandchild, or great-great… Well, you get the idea) will also be considered to belong to that mode.</p>

<blockquote>
Like all other data imported into, or created with Q-SoPrA, attributes are stored in sql tables. One of these tables simply lists the names, descriptions and parents of attributes. The parent of an attribute is either (1) one of the other attributes, or (2) a string called 'NONE', which tells Q-SoPrA that the attribute exist at the highest level of the attributes hierarchy.
</blockquote>

<h2 id="assigning-attributes">Assigning attributes</h2>
<p>After you create an attribute, you can assign the attribute to <a href="/blog/2017/getting-started-with-qsopra/">incidents</a> in your data set. The attributes widget lets you scroll through all incidents in your data set, and assign attributes to them. Assigning an attribute to an incident can be done by first selecting it in your attributes tree, and then clicking the <em>Assign attribute</em> button.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Assigning_Attribute-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Assigning_Attribute-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Assigning_Attribute-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Assigning_Attribute.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Assigning an attribute.
</div>

<p>If an attribute has been assigned to the incident that you are currently inspecting, it will show up in the attributes tree with a <strong>bold</strong> font. If an attribute has a child that has been assigned to the currently inspected incident, then it will show up in the attributes tree with an <em>italic</em> font. If an attribute is assigned to the incident, and also has a child that was assigned to the same incident, it will show up with a font that is both <strong><em>italic and bold</em></strong>.</p>

<p>After assigning an attribute, it is also possible to give the attribute a value. This value can be anything from a numeric value to a string of words. Assigning a value can only be done after assigning the attribute itself. The value can be typed into the appropriate field (the <strong>Value</strong> field below the attributes tree), and then stored by clicking the <em>Store value</em> button (which is greyed out in the screenshot above).</p>

<blockquote>
Combinations of attributes and incidents are stored in a separate sql-table. Each row in this table records (1) the name of the attribute, (2) the ID of the incident that the attribute was assigned to, and (3) the value of the attribute (if one was assigned).
</blockquote>

<p>You may have noticed in the screenshot above that a small fragment of the text in the <em>Raw</em> field is highlighted (it is underlined and it is bolded). As I explained in a <a href="/blog/2017/getting-started-with-qsopra/">previous post</a>, the <em>Raw</em> field is used to record any fragments of text from your sources (for example, interviews, documents, news items, and etcetera) that were the basis for creating the incident. Q-SoPrA allows you to associate fragments of text in the <em>Raw</em> field with attributes that you assign to incidents (you can also assign an attribute without highlighting text). Associating a fragment of text with an attribute can be achieved by (1) selecting the attribute, (2) selecting a piece of text with your mouse cursor, and (3) then clicking the <em>Assign attribute</em> button. Even when an attribute has already been assigned, you can assign additional fragments of text to the attribute by using this procedure. If fragments of text are assigned to an attribute, these will be highlighted whenever the attribute is selected.</p>

<blockquote>
The fragments of text assigned to combinations of attributes and incidents are stored in yet another sql table. In this case the rows of the table record (1) the name of the attribute, (2) the name of the incident that the attribute was assigned to, and (3) the fragment of text that is associated with the attribute-incident combination. Multiple fragments of text may exist per attribute-incident combination. 
</blockquote>

<h3 id="assigning-attributes-in-the-event-graph-widget">Assigning attributes in the Event Graph Widget</h3>

<p>There are two other ‘places’ in Q-SoPrA where attributes can be assigned to incidents (or events). One of these places is the <em>Event Graph Widget</em>. I won’t go into the details of the <em>Event Graph Widget</em> here, but, briefly, the <em>Event Graph Widget</em> is what you will use to visualise (1) incidents and/or events, and (2) relationships between these incidents/events. An event graph gives an abstract overview of the process of interest, and how different developments in the process are related.</p>

<p>You can also use the <em>Event Graph Widget</em> to build more abstract events from your incident data. I will dedicate a future post to an explanation of how exactly this works, but the basic idea underlying the creation of abstract events is that you take a group of inter-related incidents, and say that these together constitute some larger event. For example, we might have a few incidents that capture meetings between actors ‘X’ and ‘Y’ that took place over time, and group these together in an event that we describe as ‘X and Y meet over an extended period of time.’ Abstract events are different from your incidents, because they are constituted from incidents, and thus an additional level above your data (or even more than one level, because you can also use abstract events as building blocks for yet more abstract events).</p>

<p>In the screenshot below you see an example of an event graph that includes incidents, as well as an abstract event that has been built from incidents.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Event_Graph_1-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Event_Graph_1-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Event_Graph_1-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Event_Graph_1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example Event Graph 1.
</div>

<blockquote>
In the screenshot above, notice how the labels of most nodes are numbers, whereas there is one node (the wide elipse) that has the label "P-3". This node is an abstract event, and the labels of abstract events are based on what type of constraints were used when creating them. I will discuss the details of the possible constraints in a future post.<br /><br />If you are curious, check out Peter Abell's approach to abstracting narrative graphs, as outlined in his book "The Syntax of Social Life" (1987), which is unfortunately very hard to get hold of for a reasonable price (I got lucky one time). I based two types of constraints on Abell's approach: (1) path based constraints (which are quite severe) and (2) semi-path based constraints (which are far less severe). The label of an abstract event will always start with a "P-" if it was created with path based constraints, and it will always start with an "S-" if it was created with semi-path based constraints. 
</blockquote>

<p>In the left part of the screenshot, you see some details of the currently selected incident (the same details you would see in the <em>Attributes Widget</em>), as well as an attributes tree. In the <em>Event Graph Widget</em>, you can select any incident, and then assign attributes to them in the same way you would do this in the <em>Attributes Widget</em>.</p>

<p>One important difference is that, in this case, you can also assign attributes to abstract events. This works largely in the same way (you select an abstract event in the event graph, after which you can assign attributes), with the exception that you cannot associate a particular fragment of text with the attribute-event combination. This is because the abstract events don’t have ‘raw’ data directly associated with them (indeed, ‘raw’ data can still be indirectly associated, through the incidents that constitute abstract events). Abstract events therefore don’t have a <em>Raw</em> field (see the screenshot below).</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Event_Graph_2-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Event_Graph_2-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Event_Graph_2-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Event_Graph_2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example Event Graph 2.
</div>

<h3 id="assigning-attributes-in-hierarchy-graphs">Assigning attributes in Hierarchy Graphs</h3>

<p>Say that you have created an event graph in which you have abstracted numerous events. In the event graph, the incidents and events that were made into components of more abstract events are no longer visible themselves. This is a problem when you want to inspect those incidents and events, or when you want to change something in the attributes that you assigned to them. This is why I introduced <em>Hierarchy Graphs</em> to Q-SoPrA. Hierarchy graphs visualise the complete hierarchy of a given abstract event in your visible event graph. A hierarchy graph for a given abstract event can be inspected by selecting the event in your event graph, and then clicking the <em>Components</em> button (see screenshot below);</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Details_Screen-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Details_Screen-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Details_Screen-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Details_Screen.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Inspecting an abstract event.
</div>

<p>Clicking this button will cause Q-SoPrA to switch to the <em>Hierarchy Graph</em> widget, where the hierarchy of the currently selected event will be visualised.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Hierarchy_Graph-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Hierarchy_Graph-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Hierarchy_Graph-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Hierarchy_Graph.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
The Hierarchy Graph.
</div>

<p>In the screenshot above, we are inspecting the hierarchy of abstract event “P-3”, which consists of two other abstract events “P-1” and “P-2”, which, in turn, each consist of three incidents (<strong>P-1</strong>: 14, 15, 16, and <strong>P-2</strong>: 17, 19, 20).</p>

<p>In this screen, we can select all visible events individually. As you can see, we again have the attributes tree available to the left of the screen, and we can assign attributes in the same way we would in the <em>Event Graph Widget</em>. Hierarchy graphs are thus the third ‘place’ where you can assign attributes to incidents (and events).</p>

<h2 id="other-interactions-with-attributes">Other interactions with attributes</h2>
<p>Of course, assigning attributes to incidents is not the only type of interaction with attributes that we need. Occasionally, we will want to edit the name or the description of an attribute, which can be done by selecting the attribute in the attributes tree, and clicking the <em>Edit attribute</em> button. This will simply open the dialog that we have seen before (when creating a new attribute), but with the details of the currently selected attribute already filled in.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Attribute_Options-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Attribute_Options-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Attribute_Options-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Attribute_Options.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Editing attributes.
</div>

<p>If we want to unassigning an attribute, we just select it in the attributes tree, and click the <em>Unassign attribute</em> button. We can also remove all attributes that are not currently being used by clicking the <em>Remove unused attributes</em> button.</p>

<blockquote>
I did not include the possibility to simply remove an attribute by clicking some kind of delete button. I thought that having this option is risky, because you might delete an attribute that you assigned to some other incident, for good reasons, that you have forgotten about. The only way you can thus get rid of attributes for good is by unassigning them from all incidents, and then clicking the <b>Remove unused attributes</b> button.
</blockquote>

<p>If there are fragments of ‘raw’ texts associated with the attribute, we can either select one of these fragments and click the <em>Remove text</em> button to remove an individual fragment, or we can simply click the <em>Reset texts</em> button to remove all fragments associated with the selected attribute (of course, this will only remove fragments that are associated with the combination of this attribute and the currently inspected incident). Any fragments of ‘raw’ text associated with an attribute will also be removed when you unassign the attribute.</p>

<p>We can also navigate incidents via attributes, by selecting an attribute, and clicking the <em>Previous coded</em> or the <em>Next coded</em> button, which will jump to the previous/next incident that was assigned to the selected attribute (or one of its children).</p>

<p>One other thing you’ll notice in the screenshot above is the tool tip that is displayed when you hover your mouse over an attribute in the attributes tree. The tool tip will show the description that you gave the attribute, making it easy for you to read the description without having to open another dialog.</p>

<h3 id="attributes-in-tables">Attributes in tables</h3>
<p>There are a few other widgets in which attributes appear. These are tables that, for your convenience, present information that we have already seen in a somewhat different form. For example, in the screenshot below you see a table of attributes, the incidents they were assigned to, and the fragments of ‘raw’ texts associated with them.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Table_1-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Table_1-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Table_1-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Table_1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Attribute table.
</div>

<p>This particular table is mostly useful for a comparison of the various fragments of ‘raw’ text that are associated with an attribute. Based on such comparisons you can make decisions about, for example, the appropriateness of the name and description that you assigned to a given attribute. This is particularly useful in more grounded approaches to coding, where you will be revising your coding scheme (or, in this case, attribute scheme) repeatedly as you progress with your study.</p>

<p>In this table, incidents are identified by a number that corresponds to the order in which incidents appear (this is used as the primary way to identify incidents to the user throughout Q-SoPrA). Indeed, this number alone won’t tell the user very much, but as the screenshot above demonstrates, the description that was given to incidents can be revealed by hovering the mouse cursor over them.</p>

<p>It is possible to filter this table by using the filter field below the table. You can apply this filter to any of the visible table columns. The table can also be sorted by double clicking one of the column headers, and the order of columns can be changed by dragging columns to another place. Fragments of text can be removed by selecting a row in the table and clicking the <em>Remove selected</em> button. Attributes can be edited by selecting a row in the table and clicking the <em>Edit attribute</em> button. Finally, the table currently being shown can be exported by clicking the <em>Export visible table</em> button.</p>

<p>Another table in which attributes appear is shown in the screenshot below. In this case, the table shows attributes, the incidents that they were assigned to, and the values that were given to the attributes. The screenshot shows an example where I am inspecting an attribute that I used to map projects to which the activities recorded in incidents are related. To do this, I simply created an attribute called project, and I gave values to the attribute to indicate which project a given incident (activity) belongs to.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Table_2-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Table_2-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Table_2-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Table_2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Another attributes table.
</div>

<p>Like the previous table, this table can be filtered. Values that were assigned to attribute-incident combinations can be changed in this table by clicking the <em>Edit value</em> button. It is also possible to export a matrix of incident-attribute combinations. The exported matrix will be an incidence matrix, where the incidents appear in the rows, and the attributes appear in the columns. If you choose to use the <em>Export normal matrix</em> option, the cells of this table will show a <code class="language-plaintext highlighter-rouge">1</code> if the corresponding incident-attribute combination exists, and a <code class="language-plaintext highlighter-rouge">0</code> if it doesn’t. If you choose to use the <em>Export valued matrix</em> option, the cells will instead show the values that were assigned to incident-attributes combinations, wherever these are available. If no value was given, then the table will again show either a <code class="language-plaintext highlighter-rouge">1</code> or <code class="language-plaintext highlighter-rouge">0</code> depending on whether the corresponding incident-attribute combination was observed.</p>

<p>The final table I will discuss here is the one shown in the screenshot below. This is actually not a table in which attributes appear. Instead, it is a table that shows all incidents that do not have an attribute assigned to them. When you are coding a large data set, you are likely to at some point overlook something. For example, you may have inserted a new incident somewhere in your data set at some point, but you have forgotten to assign attributes to it. The table shown below makes it easier to spot any incidents that you may have forgotten about. In the example offered in the screenshot, the incidents shown are simply the incidents that I haven’t gotten to yet in the coding process.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Table_3-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Table_3-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Table_3-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Table_3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Missing attributes table.
</div>

<p>This table has something special, which is the last column of the table, called <strong>Marked</strong>. In Q-SoPrA all incidents can be marked, which simply makes it easier to find them back when using one of the coding widgets (in these widgets, you have the possibility to jump back and forth between incidents that are marked, skipping all other incidents). In this table, you can mark an incident by clicking its corresponding check box in the last column.</p>

<h2 id="attributes-in-visualisations">Attributes in visualisations</h2>
<p>So, now we get to the last major part of this post, which is about how to use attributes in visualisations, which can be one step in your analysis of the data.</p>

<h3 id="attributes-in-event-graphs">Attributes in event graphs</h3>

<p>We have already seen the <em>Event Graph Widget</em> and how we can assign attributes to incidents/events there. Attributes can also be used to manipulate the visualisation of event graphs. One thing we can do is to create <em>modes</em> in the network based on attributes. In Q-SoPrA, a mode can be understood as a special identifier for nodes in the event graph (modes also appear in network graphs, but this is yet another topic that I will need to discuss in a future post). Any node (incident or abstract event) in the event graph can only have one mode at a time. What mode a given node belongs to is made visible by giving it a distinct colour.</p>

<p>In order to achieve this, the user has to create a mode. This can be done from the legend menu (see screenshot below). In the screenshot the legend is currently empty, because no modes have been created yet. A new mode can be created by clicking the <em>Create mode</em> button (in the bottom-right area of the screenshot). This will open a dialog with the attributes tree, as well as a few buttons that can be used to choose a colour for the mode (colours can be chosen for the nodes and for the labels).</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Event_Graph_Mode-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Event_Graph_Mode-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Event_Graph_Mode-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Event_Graph_Mode.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Modes in Event Graphs.
</div>

<p>After choosing an attribute and the colours to be associated with it, we can save the new mode. Q-SoPrA will immediately identify all nodes in the graph that were assigned the selected attribute, <em>or one of its children.</em> I emphasise the last bit, because it is important to realise that modes in the event graph are inclusive in the following sense: A mode is identified by an attribute, as well as by all children of that attribute. Thus, in the screenshot below, all the red coloured nodes can be understood as incidents in which some kind of <em>meeting</em> took place, without specifying what type of meeting we are referring to. A label identifying the newly created mode will also be shown in the legend, to the right of the screen.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Event_Graph_Mode_2-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Event_Graph_Mode_2-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Event_Graph_Mode_2-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Event_Graph_Mode_2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Modes in Event Graphs 2.
</div>

<p>Modes are, in a sense, also hierarchical. In deciding what mode an incident or abstract event should be assigned to, Q-SoPrA will always work its way from the top of the list of modes (the legend) to the bottom. Any modes that appear near the bottom of the list will overrule modes that appear above them. For example, In this case, we could add an additional mode that refers to a more specific kind of meeting (a child of the <em>Meetings</em> attribute).</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Event_Graph_Mode_3-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Event_Graph_Mode_3-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Event_Graph_Mode_3-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Event_Graph_Mode_3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Modes in Event Graphs 3.
</div>

<p>In the screenshot above, you will see that two nodes have been switched to another mode (incidents 22 and 24). In this case, the attribute <em>Knowledge-oriented meetings</em> overruled the attribute <em>Meetings</em> in deciding which mode should be assigned to these incidents.</p>

<p>So what happens if we add a mode that is associated with a parent of the <em>Meetings</em> attribute, rather than a child? Let’s test this by creating a mode based on the <em>Organizational activities</em> attribute, which is the parent of the <em>Meetings</em> attribute.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Event_Graph_Mode_4-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Event_Graph_Mode_4-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Event_Graph_Mode_4-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Event_Graph_Mode_4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Modes in Event Graphs 4.
</div>

<p>As you see in the screenshot shown above, this causes the earlier created modes to be overruled. Imagine that, at this point, we realise that we have made a mistake; that it was never our intention to overrule our first two modes. We can easily recover from this situation by selecting the last mode we created, and clicking the <em>Remove mode</em> button. This will remove the mode from the event graph, and Q-SoPrA will automatically reassign the earlier created modes, basically reverting the graph to the version we saw earlier.</p>

<blockquote>
I plan to make playing around with the modes even easier, by adding the option to move modes up or down in the hierarchy. This will be implemented in a future version of Q-SoPrA.
</blockquote>

<p>These modes are not just for visualisation purposes. One feature of Q-SoPrA that makes use of modes is the creation of transition matrices. These matrices show how often an event of a given mode has a relationship to an event of another given mode. Making such matrices can tell you a lot about how different types of events in your graph tend to be related. For example, it can give you crude measures of how likely an event of a given type is to be followed by various other types of events.</p>

<p>In the screenshot below, I have assigned modes that cover nearly all of the incidents visible in the current screen.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Event_Graph_Mode_5-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Event_Graph_Mode_5-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Event_Graph_Mode_5-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Event_Graph_Mode_5.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Modes in Event Graphs 5.
</div>

<p>What I can do now, is to click the button <em>Export transitions</em>. This will open a new dialog (shown below), where I can choose what kind of transition matrix I want to export.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Transitions_Dialog-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Transitions_Dialog-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Transitions_Dialog-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Transitions_Dialog.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Transitions dialog.
</div>

<p>Now, the first two options shown here (modes vs. attributes) require a bit of explanation. In the above, we have learned that any incident can have only one mode at a time. However, an incident can of course have multiple attributes, and sometimes we will want to take <em>all</em> attributes into account when calculating transitions, rather than taking into account only the currently assigned modes. This is basically what you can do by selecting the <em>Attributes based</em> option in the dialog shown above. In this example, we’ll go with the <em>Modes based</em> option instead.</p>

<p>The other two options are much more straightforward: You can either (1) export a transition matrix with the raw counts of the observed transitions, or (2) export a transition matrix where these counts were divided by the row marginals (the number of times the source event of the transition appears), which converts the value into a crude measure of probability. We’ll go with the latter option.</p>

<p>Q-SoPrA will now ask us what we want to name our file (which is a csv-file), and where we want to store it. After saving the file, we can open it with a spreadsheet editor, like LibreOffice Calc or Microsoft Excel. In the screenshot below, I show the matrix I exported from the last version of the event graph. I slightly edited the matrix before making the screenshot, adding bold fonts to the rows and columns, making the final row and column italic font, and formatting the transition probabilities to show 4 decimal numbers.</p>

<blockquote>
As you will see below, the transition matrices that Q-SoPrA exports always contain a column with the row marginals. Thus, if you export a transition matrix with the raw counts, then you can easily calculate probabilities yourself by dividing these counts by the row marginals.<br /><br /> 

In addition to the row marginals, the transition matrices will always include a row with the number of times the different event times participated in transitions (as the source event).
</blockquote>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Transitions_Matrix-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Transitions_Matrix-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Transitions_Matrix-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Transitions_Matrix.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Transition matrix.
</div>

<p>One of the things we see in this table is that, based on the observed event graph (which I filtered to only show the first 26 incidents), there is a probability of 0.6 that an event of the mode <em>Meetings</em> followed an event of the same mode. Given that the row marginal for this mode is 10, this must mean that this particular transition was observed 6 times (6/10 = 0.6). We also see that it is as likely that an event of the mode <em>Planning</em> follows an event of the mode <em>Communication</em> as it is to follow an event of the mode <em>Group formation</em> (0.5 probability in both cases). You can do a visual check of our screenshot of the event graph to confirm this.</p>

<p>Of course, with this small number of observations, these numbers are unlikely to be very meaningful. However, I hope the example demonstrates how transition matrices can be useful in summarising patterns in your data. Patterns like these will be especially hard to detect without transition matrices once you start considering larger numbers of incidents/events.</p>

<h3 id="attributes-in-occurrence-graphs">Attributes in occurrence graphs</h3>
<p>The last thing I will discuss here is the use of attributes in the creation of <em>Occurrence Graphs</em>. Occurrence graphs visualise which attributes co-occur at which points in time. Attributes can co-occur, for example, because they are assigned to the same incident, because they are assigned to incidents/events that were grouped in the same abstract event, or because they are assigned to incidents that occurred in parallel (incidents and events can be made parallel in the <em>Event Graph Widget</em>).</p>

<p>Occurrence graphs are basically a slightly adapted variant of <a href="/blog/2017/bi-dynamic-line-graphs/">Bi-Dynamic Line Graphs (BDLGs)</a>, which, I should emphasise, is not a type of graph I came up with myself (see the link to my earlier post on BDLGs to learn more about them). I will discuss occurrence graphs in more detail in another post, and only touch on some basic details here.</p>

<p>In an occurrence graph, attribute-incident (or attribute-event) combinations are visualised as nodes. The position of the nodes on the horizontal axis is based on the chronological ordering of the incidents/events (this ordering can also be matched to that of customised event graphs). In the occurrence graphs edges only appear between nodes that refer to the same attribute, and they always point to the next attribute-incident (or attribute-event) combination in which that attribute occurs. When attributes co-occur, their attribute-incident (or attribute-event) nodes appear at the same coordinate of the horizontal axis.</p>

<p>Occurrence graphs can thus be understood to show the ‘history’ of one or more attributes’ appearance/involvement in the process of interest. Imagine that you have a set of attributes that identify different actors that participate in the process your are studying. An occurrence graph can give you a quick overview of (1) when these actors were active, (2) how frequently they were active, and (3) which actors tend to be involved in the same incidents/events. For another example, imagine that you have a set of attributes that identify different types of activities that occur in incidents/events. An occurrence graph can give you a quick overview of (1) when these activities occur, (2) how frequently these activities occur, and (3) which activities are typically carried out in combination.</p>

<p>Q-SoPrA has a separate widget for the visualisation of occurrence graphs. An occurrence graph is built by adding attributes one by one, as I will demonstrate in the example below.</p>

<p>In this example, I will use an occurrence graph to study a specific issue of interest me. The data set that I use in this example records the emergence and development of a community sustainability initiative, somewhere in the UK. One of the ambitions of the initiative is to stimulate people in the community to adopt more sustainable practices (that is, what the members of the initiative understand to be sustainable practices, like growing your own food, commuting by bicycle rather than by car, crafting your own products from locally sourced materials, and so on). I have various attributes that refer to these different kinds of practices, and these all share a parent that I called <em>Sustainability practices</em>. What I want to know is what other activities the members of the initiative use to promote sustainable practices. One way to do this is to study what other activities the <em>Sustainability practices</em> co-occur with.</p>

<p>The first thing that I do is to add the <em>Sustainability practices</em> attribute to my occurrence graph. As was the case with modes in the event graphs, this will create nodes for all incidents that have the <em>Sustainability practices</em> attribute assigned to them, <em>or</em> one of its children.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Occurrence_Graph-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Occurrence_Graph-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Occurrence_Graph-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Occurrence_Graph.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example Occurrence Graph 1.
</div>

<p>Q-SoPrA will plot the nodes that refer to the same attribute on a straight line, where the position of the nodes on the horizontal axis respects their position in the chronological order of incidents. A small portion of the graph is shown in the screenshot above. Not terribly exciting, is it?</p>

<p>Let’s add some other attributes. One of the things that I learned is that members of the community sustainability initiative I studied like to make use of workshops to teach other members of the community certain skills associated with <em>Sustainability practices</em>. I therefore add an attribute that I used to capture the occurrence of workshops, called <em>Initiative workshop</em>.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Occurrence_Graph_2-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Occurrence_Graph_2-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Occurrence_Graph_2-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Occurrence_Graph_2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example Occurrence Graph 2.
</div>

<p>There are immediately quite some co-occurrences that appear in the graph (see the screenshot above for a fragment of the graph). I made sure that Q-SoPrA initially plots all attributes-incident combinations on their own line, and that combinations that co-occur appear close to each other, so that co-occurrences are more pronounced (of course, you can move the nodes around a bit to adapt the visualisation).</p>

<p>What I unfortunately cannot show you without flooding this post with screenshots is that the occurrence graph shows that workshops occur quite often, but mostly in a particular episode of the process. Thus, it is interesting to explore some other types of activities that might be used to promote <em>Sustainability practices</em> to see if these are perhaps bound to certain episodes as well. The next attribute I’ll add is <em>Competition</em>, which captures those occasions where members of the community sustainability initiative organised some kind of competition to engage people in certain practices (e.g., cycling competition, a competition for who builds the nicest planter, and more).</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Occurrence_Graph_3-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Occurrence_Graph_3-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Occurrence_Graph_3-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Occurrence_Graph_3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example Occurrence Graph 3.
</div>

<p>The screenshot above shows just a small segment of the graph, but it shows one example where a <em>Competition</em> co-occurs with <em>Sustainability practices</em>. Actually, these co-occurrences appear in various parts of the graph, but overall they appear more sporadically than those of <em>Sustainability practices</em> and <em>Workshops</em>.</p>

<p>For this example, let me add just one more attribute. In this case I added the attribute <em>Door-to-door advice</em>, which is an activity in which members of the initiative went door-to-door in their community to provide community members advice about energy saving measures that can be taken at home.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Occurrence_Graph_4-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Occurrence_Graph_4-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Occurrence_Graph_4-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Occurrence_Graph_4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Example Occurrence Graph 4.
</div>

<p>As the screenshot above shows, I apparently only used this attribute once. There are no edges going into, or out from the yellow node shown in the screenshot, indicating that the node only appears once in this graph. The fact that this activity only occurs once is easily explained. The activity was carried out as part of a project for which the community sustainability initiative obtained funding, and which was dedicated to implementing and promoting energy saving measures in the community. As part of the project, some members of the initiative were trained to provide personalised energy advice, and these members went door-to-door in their community. Of course, this is a relative expensive operation for a small initiative, and it is not something you would expect to happen on a regular basis. The organisation of workshops, for example, typically requires lower investments of time and money, which perhaps makes it a more attractive type of activity for the initiative to make use of.</p>

<p>If we really want to make a more in-depth analysis, we would of course not stop here, and we would probably repeatedly go back and forth between our underlying data, the occurrence graph, and other visualisations and tools, but I think this small example gives you a basic idea of what you can do with attributes and occurrence graphs.</p>

<p>There is just one other thing I want to demonstrate. If you are familiar with <a href="https://en.wikipedia.org/wiki/Computer-assisted_qualitative_data_analysis_software">CAQDAS</a>, then you are probably also familiar with the concept of co-occurrence of codes. Basically, the occurrence graphs visualise a certain type of co-occurrence, a type that is sensitive to temporal order. However, it can also be useful to just have an aggregate measure of co-occurrence, like you would have in most <a href="https://en.wikipedia.org/wiki/Computer-assisted_qualitative_data_analysis_software">CAQDAS</a>. After creating an occurrence graph in Q-SoPrA it is possible to export a (co-)occurrence matrix that records aggregate measures of (co-)occurrence. The screenshot below shows an example of such a matrix.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Occurrence_Matrix-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Occurrence_Matrix-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Occurrence_Matrix-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/Occurrence_Matrix.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" style="margin:auto; display:block" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
Occurrence matrix.
</div>

<p>The diagonal of the matrix simply shows how often a given attribute occurs overall. The other cells of the matrix show co-occurrences of the attributes associated with the corresponding rows and columns. This matrix basically gives us similar information to the occurrence graphs we studied earlier. For example, it shows that, when workshops occur, they typically co-occur with sustainability practices. It also shows that workshops were used more often than competitions, and that door-to-door advice occurred only once. Of course, what the matrix does not show us is when in the process all these activities (co-)occurred, so with the matrix we do loose some potentially relevant information.</p>

<h2 id="closing-comments">Closing comments</h2>
<p>There are of course more things that can be done with attributes. It is relatively easy to export data from Q-SoPrA, and to import it into some other software package for further analysis. For example, you could try to import the incidence matrix of incidents and attributes into some network visualisation tool, and make a network graph of what attributes are related to what incidents, giving you an overview that is otherwise perhaps hard to obtain.</p>

<p>It is very likely that I will also be adding additional features to Q-SoPrA over time. For now, I hope that the above demonstrates how attributes in Q-SoPrA can support in the analysis of social processes.</p>]]></content><author><name></name></author><category term="Software" /><category term="Q-SoPrA" /><category term="Non-Technical" /><summary type="html"><![CDATA[Introduction One of the tasks that you are likely to use Q-SoPrA for is the qualification of incident data, by assigning codes to them (see this earlier post for an explanation of what incidents are). The tools you will use for this are not very different from those that you would typically use to assign codes to interviews or the contents of documents when using CAQDAS software. In Q-SoPrA, the codes that are used to qualify incident data are referred to as attributes.]]></summary></entry><entry><title type="html">QSqlTableModels, booleans and check boxes</title><link href="http://localhost:4000/blog/2018/qsltablemodels-booleans-and-check-boxes/" rel="alternate" type="text/html" title="QSqlTableModels, booleans and check boxes" /><published>2018-01-19T10:07:00+01:00</published><updated>2018-01-19T10:07:00+01:00</updated><id>http://localhost:4000/blog/2018/qsltablemodels-booleans-and-check-boxes</id><content type="html" xml:base="http://localhost:4000/blog/2018/qsltablemodels-booleans-and-check-boxes/"><![CDATA[<h2 id="interfacing-with-sql-databases-with-qt5">Interfacing with sql databases with Qt5</h2>
<p>This post is on an issue that I struggled with very recently, while working on Q-SoPrA. What I wanted to achieve was relatively simple: I wanted to have tables that fetch data from sql databases, and in which one column shows check boxes to set/unset a boolean variable. The screenshot below shows an example.</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/table-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/table-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/table-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/table.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
An example table.
</div>

<p>What you see in the screen shot is <a href="http://doc.qt.io/archives/qt-4.8/qtableview.html">QTableView</a> widget that shows data that it fetches from a <a href="https://doc.qt.io/qt-5.10/qsqltablemodel.html">QSqlTableModel</a> that interfaces with a table of a <a href="https://sqlite.org/">sqlite</a> database. This post is about how to create the interactive check boxes shown in the right-most column. There are two main hurdles in getting the <a href="http://doc.qt.io/archives/qt-4.8/qtableview.html">QTableView</a> widget to work with check boxes:</p>
<ol>
  <li>Sqlite databases don’t actually support boolean variables. You can use an integer variable to ‘simulate’ a boolean variable by setting it to <code class="language-plaintext highlighter-rouge">0</code>(for <code class="language-plaintext highlighter-rouge">false</code>) or <code class="language-plaintext highlighter-rouge">1</code> (for <code class="language-plaintext highlighter-rouge">true</code>), but you will of course need to do a bit of extra work to make the <a href="https://doc.qt.io/qt-5.10/qsqltablemodel.html">QSqlTableModel</a> properly treat it as a boolean (or something that can be switched on or off) in read &amp; write operations. This can be done by sub-classing the <a href="https://doc.qt.io/qt-5.10/qsqltablemodel.html">QSqlTableModel</a>, and re-implementing its <a href="http://doc.qt.io/qt-5/qsqltablemodel.html#flags">flags()</a>, <a href="http://doc.qt.io/qt-5/qsqltablemodel.html#data">data()</a> and <a href="http://doc.qt.io/qt-5/qsqltablemodel.html#setData">setData()</a> functions, as suggested <a href="http://www.qtcentre.org/threads/12008-QSqlTableModel-and-checkboxes-with-SQLite-database">here</a>.</li>
  <li>But if you do that, you’ll have a quite ugly looking table, since the check boxes are all left-aligned in their column, with no obvious way to change that. In this case, the only solution seems to be to use a <a href="http://doc.qt.io/qt-5/qstyleditemdelegate.html">QStyledItemDelegate</a> to handle the <code class="language-plaintext highlighter-rouge">paint()</code> function that determines how the column is visualised. A somewhat outdated example of how to do that is offered in the <a href="https://wiki.qt.io/Technical_FAQ#How_can_I_align_the_checkboxes_in_a_view.3F">Qt FAQ</a>.</li>
</ol>

<p>For good results in my use-case, where I want to have check boxes that (1) are able to handle a ‘pretend boolean’ variable (a boolean that is actually an integer) from a sqlite database, and (2) are not all aligned to the extreme left of their column, you have to combine the two solutions mentioned above. I haven’t really encountered a worked out example of this combination, which is why I decided to provide one in this post.</p>

<p>In the below, I briefly outline how you could achieve a result like the one shown in the screenshot above.</p>

<details>
<summary>In case you are not familiar with Qt5...</summary>
<blockquote>
<a href="https://www.qt.io/">Qt5</a> is a popular library for C++ that can be used for the development of Graphical User Interfaces (GUIs). It also includes a module that allows for easy interfacing of your program with sql databases. I make heavy use of the Qt5 library for the development of Q-SoPrA, including the possibilities it offers for interfacing with <a href="https://sqlite.org/">sqlite</a> databases. Qt5 comes packed with a number of great <a href="https://doc.qt.io/qt-5.10/sql-programming.html">sql database classes</a>, such as <a href="https://doc.qt.io/qt-5.10/qsqldatabase.html">QSqlDatabase</a>, <a href="https://doc.qt.io/qt-5.10/qsqlquerymodel.html">QSqlQueryModel</a>, <a href="https://doc.qt.io/qt-5.10/qsqltablemodel.html">QSqlTableModel</a>, <a href="https://doc.qt.io/qt-5.10/qsqlrelationaltablemodel.html">QSqlRelationalTableModel</a>, and <a href="https://doc.qt.io/qt-5.10/qsqlquery.html">QSqlQuery</a>. <br /><br />For the development of Q-SoPrA, I make use of most of all these classes, although often a sub-classed version of them in which I re-implemented some of their member functions. <br /><br />I think a very common setup for interfacing with sql databases is to have a <a href="https://doc.qt.io/qt-5.10/qsqltablemodel.html">QSqlTableModel</a> (or <a href="https://doc.qt.io/qt-5.10/qsqlrelationaltablemodel.html">QSqlRelationalTableModel</a>) that fetches data from a table in your sql database, a <a href="https://doc.qt.io/qt-5.10/qsortfilterproxymodel.html">QSortFilterProxyModel</a> that reads from the QSqlTableModel and acts as a 'filtering layer', and a <a href="https://doc.qt.io/qt-5.10/qtableview.html">QTableView</a> that reads from the filter and displays the results on the user's screen. This is also the kind of setup that I use for several widgets that I included in Q-SoPrA, although I typically subclass the QSqlTableModel / QSqlRelationalTableModel to change some of the ways in which the data is presented to the user (such as tool tip behaviour). 
</blockquote>
</details>
<p><br /></p>

<h2 id="an-assumption-about-your-pretend-boolean-variable">An assumption about your ‘pretend boolean’ variable</h2>
<p>In the below I make one main assumption about your ‘pretend boolean’ variable, which is that this variable is stored in one of the tables of your sql database as an integer, and that you programmatically set this integer to <code class="language-plaintext highlighter-rouge">0</code> or <code class="language-plaintext highlighter-rouge">1</code> whenever necessary. I tend to use the <a href="https://doc.qt.io/qt-5.10/qsqlquery.html">QSqlQuery</a> class for this, but as Doug Forester pointed out in the comment section below, this is a bit inefficient. Instead, it is enough to subclass the <a href="https://doc.qt.io/qt-5.10/qsqltablemodel.html">QSqlTableModel</a> and re-implement some of its functions as discussed further below.</p>

<p>Before showing how this works, I should add that in the particular use case discussed here, the pretend boolean is stored in a particular column of the sql table that my <a href="https://doc.qt.io/qt-5.10/qsqltablemodel.html">QSqlTableModel</a> interfaces with. In the code snippets below you will regularly see a conditional that checks if the current column index is <code class="language-plaintext highlighter-rouge">7</code>, because that is the column that holds the ‘pretend boolean’ in my specific example. You would of course need to adapt this column index to your own specific use case.</p>

<h2 id="sub-classing-qsqltablemodel">Sub-classing QSqlTableModel</h2>
<p>If we want user interaction with our ‘pretend boolean’ variable to be handled by a check box, we need to sub-class the <a href="https://doc.qt.io/qt-5.10/qsqltablemodel.html">QSqlTableModel</a> that interfaces between the sql table and the <a href="http://doc.qt.io/archives/qt-4.8/qtableview.html">QTableView</a> that visualises the data for the user. More specifically, we need to re-implement the <code class="language-plaintext highlighter-rouge">flags()</code>, <code class="language-plaintext highlighter-rouge">data()</code> and <code class="language-plaintext highlighter-rouge">setData()</code> member functions, and make our ‘pretend boolean’ (an integer set to <code class="language-plaintext highlighter-rouge">0</code> or <code class="language-plaintext highlighter-rouge">1</code>) behave as an item that can be checked and unchecked (I believe it was <a href="http://www.qtcentre.org/threads/12008-QSqlTableModel-and-checkboxes-with-SQLite-database">this discussion</a> that led me to this insight). The <a href="http://doc.qt.io/qt-5/qsqltablemodel.html#flags">flags()</a> function basically determines how items recorded in the <a href="https://doc.qt.io/qt-5.10/qsqltablemodel.html">QSqlTableModel</a> can be manipulated (see <a href="http://doc.qt.io/qt-5/qt.html#ItemFlag-enum">this list</a> of possible flags). We want to re-implement this function to make sure that items that correspond to our ‘pretend boolean’ can be checked or unchecked by the user. This can be achieved quite easily:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cm">/* 
   To make sure that the column with the pretend boolean is recognised
   as a 'checkable' column, we need to re-implement the flags() function
   and create a special case for the target column.
*/</span>
<span class="n">Qt</span><span class="o">::</span><span class="n">ItemFlags</span> <span class="n">EventTableModel</span><span class="o">::</span><span class="n">flags</span><span class="p">(</span><span class="k">const</span> <span class="n">QModelIndex</span> <span class="o">&amp;</span> <span class="n">index</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
  <span class="c1">// Column 7 always records the mark variable (our boolean).</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">index</span><span class="p">.</span><span class="n">column</span><span class="p">()</span> <span class="o">==</span> <span class="mi">7</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Make sure that this item is checkable.</span>
    <span class="k">return</span> <span class="n">QSqlTableModel</span><span class="o">::</span><span class="n">flags</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">|</span> <span class="n">Qt</span><span class="o">::</span><span class="n">ItemIsUserCheckable</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">// Default behaviour in all other cases.</span>
  <span class="k">return</span> <span class="n">QSqlTableModel</span><span class="o">::</span><span class="n">flags</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>As mentioned previously, in the code snippet above we assume that our ‘pretend boolean’ is recorded in the seventh column of our sql table. We therefore check whether the current index being accessed exists in the seventh column. If yes, then we communicate to the program that the item at this index should be checkable by the user (we also make sure that we return all flags that are set by default). If no, then we revert to the default behaviour of the <code class="language-plaintext highlighter-rouge">QSqlTableModel::flags()</code> member function.</p>

<p>Our sub-classed version of <a href="https://doc.qt.io/qt-5.10/qsqltablemodel.html">QSqlTableModel</a> still won’t understand how to handle our ‘pretend boolean’ properly. For that, we also need to re-implement the <code class="language-plaintext highlighter-rouge">data()</code> and <code class="language-plaintext highlighter-rouge">setData()</code> functions. The <a href="http://doc.qt.io/qt-5/qsqltablemodel.html#data">data()</a> and <a href="http://doc.qt.io/qt-5/qsqltablemodel.html#setData">setData()</a> are used to read data from, and write data to the sql table with which the QSqlTableModel is interfacing.</p>

<p>We should keep in mind here that in the QSqlTableModel, data are stored under different ‘roles’ (see an overview of these roles <a href="http://doc.qt.io/qt-5/qt.html#ItemDataRole-enum">here</a>). For example, data stored under the <code class="language-plaintext highlighter-rouge">Qt::DisplayRole</code> are the data that are actually shown to the user in the <a href="http://doc.qt.io/archives/qt-4.8/qtableview.html">QTableView</a>, data stored under the <code class="language-plaintext highlighter-rouge">Qt::ToolTipRole</code> are the data that are shown when the user hovers his/her mouse cursor over an entry in the table, and data stored under the <code class="language-plaintext highlighter-rouge">Qt::EditRole</code> are the data that the user can manipulate in an editor. In the <a href="http://doc.qt.io/qt-5/qt.html#ItemDataRole-enum">list of roles</a> you will also find the <code class="language-plaintext highlighter-rouge">Qt::CheckStateRole</code>, and this is the role that we want to (re-)implement for our ‘pretend boolean’.</p>

<p>Another thing we should keep in mind is that we don’t want <em>all</em> data in our sql table to be treated as ‘pretend booleans.’ We will want to keep the default behaviour of the <code class="language-plaintext highlighter-rouge">data()</code> and <code class="language-plaintext highlighter-rouge">setData()</code> functions in most cases. We can do that in the same way by as we did with the <code class="language-plaintext highlighter-rouge">flags()</code> function: We create a special case for the column that holds our <code class="language-plaintext highlighter-rouge">pretend boolean</code> variable, and we revert to the default implementation of <code class="language-plaintext highlighter-rouge">QSqlTableModel::data()</code> and <code class="language-plaintext highlighter-rouge">QSqlTableModel::SetData()</code> in all other cases.</p>

<blockquote>Actually, in the example below we have one other exception, which is the special case in which the user is hovering the mouse cursor over a cell, which will cause the QSqlTableModel to return data under the Qt::ToolTipRole.</blockquote>

<p>Let’s start with our <code class="language-plaintext highlighter-rouge">data()</code> function. See a snippet with its re-implemented version below. <strong>EDIT: The updated version below implements a suggestion made by Doug Forester in the comments. It is more efficient than what I originally came up with.</strong></p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">QVariant</span> <span class="n">EventTableModel</span><span class="o">::</span><span class="n">data</span><span class="p">(</span><span class="k">const</span> <span class="n">QModelIndex</span> <span class="o">&amp;</span><span class="n">index</span><span class="p">,</span> <span class="kt">int</span> <span class="n">role</span><span class="p">)</span> <span class="k">const</span> 
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">index</span><span class="p">.</span><span class="n">column</span><span class="p">()</span> <span class="o">==</span> <span class="mi">7</span><span class="p">)</span> 
    <span class="p">{</span> <span class="c1">// This is always the column with the boolean variable</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">role</span> <span class="o">==</span> <span class="n">Qt</span><span class="o">::</span><span class="n">CheckStateRole</span><span class="p">)</span> 
	<span class="p">{</span> <span class="c1">// Only do the below when we are setting the checkbox.</span>
	  <span class="c1">// We can simply fetch the value from the current index</span>
	  <span class="kt">int</span> <span class="n">checked</span> <span class="o">=</span> <span class="n">QSqlTableModel</span><span class="o">::</span><span class="n">data</span><span class="p">(</span><span class="n">index</span><span class="p">).</span><span class="n">toInt</span><span class="p">();</span>
	  <span class="c1">// If checked == 1, then it evaluates to true in the if-statement below.</span>
	  <span class="c1">// If checked == 0, the statement evaluates to false.</span>
	  <span class="k">if</span> <span class="p">(</span><span class="n">checked</span><span class="p">)</span>
	    <span class="p">{</span>
	      <span class="k">return</span> <span class="n">Qt</span><span class="o">::</span><span class="n">Checked</span><span class="p">;</span>
	    <span class="p">}</span>
	  <span class="k">else</span>
	    <span class="p">{</span>
	      <span class="k">return</span> <span class="n">Qt</span><span class="o">::</span><span class="n">Unchecked</span><span class="p">;</span>
	    <span class="p">}</span>
	<span class="p">}</span>
      <span class="k">else</span> 
	<span class="p">{</span>
	  <span class="cm">/*
	    We return an empty variant in all other cases. This is to prevent, for example,
	    that we also see a '0' or '1' in the same column.
	  */</span>
	  <span class="k">return</span> <span class="n">QVariant</span><span class="p">();</span>
	<span class="p">}</span>
      <span class="c1">// Only do the below if we want to fetch a tool tip.</span>
    <span class="p">}</span>
  <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">role</span> <span class="o">==</span> <span class="n">Qt</span><span class="o">::</span><span class="n">ToolTipRole</span><span class="p">)</span> 
    <span class="p">{</span>
      <span class="c1">// I just want the tool tip to show the data in the column.</span>
      <span class="k">const</span> <span class="n">QString</span> <span class="n">original</span> <span class="o">=</span> <span class="n">QSqlTableModel</span><span class="o">::</span><span class="n">data</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">Qt</span><span class="o">::</span><span class="n">DisplayRole</span><span class="p">).</span><span class="n">toString</span><span class="p">();</span>
      <span class="n">QString</span> <span class="n">toolTip</span> <span class="o">=</span> <span class="n">breakString</span><span class="p">(</span><span class="n">original</span><span class="p">);</span> <span class="c1">// breakString() breaks the text in smaller lines.</span>
      <span class="k">return</span> <span class="n">toolTip</span><span class="p">;</span>
      <span class="c1">// I want to make sure that broken lines have a space between them.</span>
    <span class="p">}</span>
  <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">role</span> <span class="o">==</span> <span class="n">Qt</span><span class="o">::</span><span class="n">DisplayRole</span><span class="p">)</span> 
    <span class="p">{</span>
      <span class="k">const</span> <span class="n">QString</span> <span class="n">original</span> <span class="o">=</span> <span class="n">QSqlTableModel</span><span class="o">::</span><span class="n">data</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">Qt</span><span class="o">::</span><span class="n">DisplayRole</span><span class="p">).</span><span class="n">toString</span><span class="p">();</span>
      <span class="n">QString</span> <span class="n">shownText</span> <span class="o">=</span> <span class="n">fixBreakLines</span><span class="p">(</span><span class="n">original</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">shownText</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">else</span> 
    <span class="p">{</span>
      <span class="cm">/* 
	 In all other cases, we want the default behaviour of this function. 
	 This can be done easily by returning the default version of the function,
	 rather than the re-implemented version we have here.
      */</span>
      <span class="k">return</span> <span class="n">QSqlTableModel</span><span class="o">::</span><span class="n">data</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">role</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="k">return</span> <span class="nf">QVariant</span><span class="p">();</span> <span class="c1">// This prevents a compiler warning.</span>
<span class="p">}</span></code></pre></figure>

<p>So, the basic structure of this function is quite simple. We first check if the column of the sql table that is being accessed is the column with our <code class="language-plaintext highlighter-rouge">pretend boolean</code>. If yes, then we check whether the data are being accessed under the ‘Qt::CheckStateRole’. If the answer is yes again, we can fetch the current value of our ‘pretend boolean’ by accessing the data stored in the current index, and we store this value in <code class="language-plaintext highlighter-rouge">int checked</code>. The function will return <code class="language-plaintext highlighter-rouge">Qt::Checked</code> if <code class="language-plaintext highlighter-rouge">checked == 1</code>, and it will return <code class="language-plaintext highlighter-rouge">0</code> if <code class="language-plaintext highlighter-rouge">checked==0</code>.</p>

<p>There are a few other situations that the re-implemented function handles. If we are accessing data in the column with our <code class="language-plaintext highlighter-rouge">pretend boolean</code>, but we are not accessing the data under the <code class="language-plaintext highlighter-rouge">Qt::CheckState</code> role, then the function simply returns an empty QVariant(), effectively returning nothing. I did this to make sure that the corresponding column in the <a href="http://doc.qt.io/archives/qt-4.8/qtableview.html">QTableView</a> only shows a check box that visualises the current check state, and nothing else. If we are accessing data in any other column, the function first checks whether we are accessing data under the <code class="language-plaintext highlighter-rouge">Qt::ToolTipRole</code>. If yes, then we treat it as another special case, in which the user gets shown a tool tip that simply contains the visible contents of the cell currently being hovered over with the mouse cursor. If we are not accessing the data under the <code class="language-plaintext highlighter-rouge">Qt::ToolTipRole</code> (in all other cases), we just revert to the default implementation of the <code class="language-plaintext highlighter-rouge">QSqlTableModel::data()</code> function.</p>

<p>If you have re-implemented the <code class="language-plaintext highlighter-rouge">data()</code> function in this way, then your <a href="http://doc.qt.io/archives/qt-4.8/qtableview.html">QTableView</a> should already show check boxes in the corresponding column. So far, so good. However, there are still a few problems. One problem is that the check boxes are aligned to the extreme left of the column, which makes the table look ugly. We will deal with this later. A more urgent problem is that checking / unchecking the check boxes won’t actually do anything meaningful with the underlying data, unless we also re-implement the <code class="language-plaintext highlighter-rouge">setData()</code> function. Let’s do that next.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">bool</span> <span class="n">EventTableModel</span><span class="o">::</span><span class="n">setData</span><span class="p">(</span><span class="k">const</span> <span class="n">QModelIndex</span> <span class="o">&amp;</span> <span class="n">index</span><span class="p">,</span>
			      <span class="k">const</span> <span class="n">QVariant</span> <span class="o">&amp;</span> <span class="n">value</span><span class="p">,</span> <span class="kt">int</span> <span class="n">role</span><span class="p">)</span> 
<span class="p">{</span>
  <span class="cm">/* 
     Let's check whether the selected column is the column with our boolean variable
     (always column 7), and whether we are trying to set data under the 
     Qt::CheckStateRole.
  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">index</span><span class="p">.</span><span class="n">column</span><span class="p">()</span> <span class="o">==</span> <span class="mi">7</span> <span class="o">&amp;&amp;</span> <span class="n">role</span> <span class="o">==</span> <span class="n">Qt</span><span class="o">::</span><span class="n">CheckStateRole</span><span class="p">)</span> 
    <span class="p">{</span>
      <span class="c1">// Writing the data when the check box is set to checked.</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="n">Qt</span><span class="o">::</span><span class="n">Checked</span><span class="p">)</span> 
	<span class="p">{</span>
	  <span class="c1">// Let's write the new value</span>
	  <span class="k">return</span> <span class="n">setData</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	  <span class="c1">// Writing the data when the check box is set to unchecked</span>
	<span class="p">}</span>
      <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="n">Qt</span><span class="o">::</span><span class="n">Unchecked</span><span class="p">)</span> 
	<span class="p">{</span>
	  <span class="c1">// Let's write the new value</span>
	  <span class="k">return</span> <span class="n">setData</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	<span class="p">}</span>
    <span class="p">}</span>
  <span class="c1">// In all other situations revert to default behaviour.</span>
  <span class="k">return</span> <span class="n">QSqlTableModel</span><span class="o">::</span><span class="n">setData</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">role</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>We have a similar kind of check to the one we had with the <code class="language-plaintext highlighter-rouge">data()</code> function: We check whether thes column we are writing to is the column that contains our <code class="language-plaintext highlighter-rouge">pretend boolean</code> variable. In this case, we check at the same time whether we are trying to write data under the <code class="language-plaintext highlighter-rouge">Qt::CheckStateRole</code>. If yes, we write either a <code class="language-plaintext highlighter-rouge">1</code> or a <code class="language-plaintext highlighter-rouge">0</code> to the corresponding index, depending on what value was passed to the function. In all other situations we simply refer to the default implementation of the <code class="language-plaintext highlighter-rouge">QSqlTableModel::setData()</code> function.</p>

<p>After re-implementing the <code class="language-plaintext highlighter-rouge">data()</code> function this way, checking / unchecking the check boxes in our <a href="http://doc.qt.io/archives/qt-4.8/qtableview.html">QTableView</a> will actually do something meaningful with the data in the underlying sql table.</p>

<p>If you don’t care about the alignment of the check boxes in their corresponding column of the <a href="http://doc.qt.io/archives/qt-4.8/qtableview.html">QTableView</a>, then you’re done. However, I think that the table looks much nicer with the check boxes aligned to the centre of their column. How to achieve this is what I will discuss next.</p>

<h2 id="styling-the-column-with-the-check-boxes">Styling the column with the check boxes</h2>
<p>It turns out that the only way to align the check boxes to the centre of their column is to use a <a href="http://doc.qt.io/qt-5/qstyleditemdelegate.html">QStyledItemDelegate</a>. Well, there is <a href="https://falsinsoft.blogspot.co.uk/2013/11/qtablewidget-center-checkbox-inside-cell.html">another approach that uses layouts</a>, but that only works if you (1) manually append another column to your <a href="https://doc.qt.io/qt-5.10/qsqltablemodel.html">QSqlTableModel</a>, (2) explicitly create <code class="language-plaintext highlighter-rouge">QCheckBox</code> objects, (3) assign these to a parent <code class="language-plaintext highlighter-rouge">QWidget</code> object, (4) to which you then apply a centralised layout. This is quite an expensive procedure that can significantly reduce the performance of your program, and it only works well if you don’t update your <a href="https://doc.qt.io/qt-5.10/qsqltablemodel.html">QSqlTableModel</a> frequently.</p>

<blockquote>
This is because every time that you update your QSqlTableModel the manually appended column will disappear. You can of course solve this by writing a function that creates the extra column, and fills it with your manually created check boxes, and run this function whenever the QSqlTableModel's select() function gets called. However, this will slow down your program quite a bit, and I also found some other drawbacks to this approach that are a bit outside the scope of this discussion.
</blockquote>

<p>The approach that uses a <a href="http://doc.qt.io/qt-5/qstyleditemdelegate.html">QStyledItemDelegate</a> is actually what is recommended in <a href="http://www.qtcentre.org/threads/12008-QSqlTableModel-and-checkboxes-with-SQLite-database">Qt’s FAQ</a> section. An example code snippet is offered there as well, although it is a bit outdated (it uses some functions that were deprecated in Qt5). Essentially, what you are required to do is to create your own sub-class of <a href="http://doc.qt.io/qt-5/qstyleditemdelegate.html">QStyledItemDelegate</a>, and re-implement its <code class="language-plaintext highlighter-rouge">paint()</code> and <code class="language-plaintext highlighter-rouge">editorEvent()</code> functions. The <code class="language-plaintext highlighter-rouge">paint()</code> function determines how the check box is visualised to the user, and the <code class="language-plaintext highlighter-rouge">editorEvent()</code> function determines how the user can interact with the check box.</p>

<p>I included the snippet with my slightly adapted version of the re-implemented functions below. I am not going to pretend that I grasp every detail of what happens in these functions. I mostly replaced some of the deprecated functions in the example offered in <a href="http://www.qtcentre.org/threads/12008-QSqlTableModel-and-checkboxes-with-SQLite-database">Qt’s FAQ</a>.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cm">/* 
   This is a slightly adapted version of the example that is provided here:
   https://wiki.qt.io/Technical_FAQ#How_can_I_align_the_checkboxes_in_a_view.3F
*/</span>

<span class="kt">void</span> <span class="n">CheckBoxDelegate</span><span class="o">::</span><span class="n">paint</span> <span class="p">(</span><span class="n">QPainter</span> <span class="o">*</span> <span class="n">painter</span><span class="p">,</span> <span class="k">const</span> <span class="n">QStyleOptionViewItem</span> <span class="o">&amp;</span> <span class="n">option</span><span class="p">,</span>
	    <span class="k">const</span> <span class="n">QModelIndex</span> <span class="o">&amp;</span> <span class="n">index</span> <span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
  <span class="n">QStyleOptionViewItem</span> <span class="n">viewItemOption</span><span class="p">(</span><span class="n">option</span><span class="p">);</span>
  <span class="c1">// Only do this if we are accessing the column with boolean variables.</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">index</span><span class="p">.</span><span class="n">column</span><span class="p">()</span> <span class="o">==</span> <span class="mi">7</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// This basically changes the rectangle in which the check box is drawn.</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">textMargin</span> <span class="o">=</span> <span class="n">QApplication</span><span class="o">::</span><span class="n">style</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">pixelMetric</span><span class="p">(</span><span class="n">QStyle</span><span class="o">::</span><span class="n">PM_FocusFrameHMargin</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">QRect</span> <span class="n">newRect</span> <span class="o">=</span> <span class="n">QStyle</span><span class="o">::</span><span class="n">alignedRect</span><span class="p">(</span><span class="n">option</span><span class="p">.</span><span class="n">direction</span><span class="p">,</span> <span class="n">Qt</span><span class="o">::</span><span class="n">AlignCenter</span><span class="p">,</span>
					<span class="n">QSize</span><span class="p">(</span><span class="n">option</span><span class="p">.</span><span class="n">decorationSize</span><span class="p">.</span><span class="n">width</span><span class="p">()</span> <span class="o">+</span>
					      <span class="mi">5</span><span class="p">,</span><span class="n">option</span><span class="p">.</span><span class="n">decorationSize</span><span class="p">.</span><span class="n">height</span><span class="p">()),</span>
					<span class="n">QRect</span><span class="p">(</span><span class="n">option</span><span class="p">.</span><span class="n">rect</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">+</span> <span class="n">textMargin</span><span class="p">,</span> <span class="n">option</span><span class="p">.</span><span class="n">rect</span><span class="p">.</span><span class="n">y</span><span class="p">(),</span>
					      <span class="n">option</span><span class="p">.</span><span class="n">rect</span><span class="p">.</span><span class="n">width</span><span class="p">()</span> <span class="o">-</span>
					      <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">textMargin</span><span class="p">),</span> <span class="n">option</span><span class="p">.</span><span class="n">rect</span><span class="p">.</span><span class="n">height</span><span class="p">()));</span>
    <span class="n">viewItemOption</span><span class="p">.</span><span class="n">rect</span> <span class="o">=</span> <span class="n">newRect</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">// Draw the check box using the new rectangle.</span>
  <span class="n">QStyledItemDelegate</span><span class="o">::</span><span class="n">paint</span><span class="p">(</span><span class="n">painter</span><span class="p">,</span> <span class="n">viewItemOption</span><span class="p">,</span> <span class="n">index</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">CheckBoxDelegate</span><span class="o">::</span><span class="n">editorEvent</span><span class="p">(</span><span class="n">QEvent</span> <span class="o">*</span><span class="n">event</span><span class="p">,</span> <span class="n">QAbstractItemModel</span> <span class="o">*</span><span class="n">model</span><span class="p">,</span>
			 <span class="k">const</span> <span class="n">QStyleOptionViewItem</span> <span class="o">&amp;</span><span class="n">option</span><span class="p">,</span>
			 <span class="k">const</span> <span class="n">QModelIndex</span> <span class="o">&amp;</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Q_ASSERT</span><span class="p">(</span><span class="n">event</span><span class="p">);</span>
  <span class="n">Q_ASSERT</span><span class="p">(</span><span class="n">model</span><span class="p">);</span>

  <span class="c1">// make sure that the item is checkable</span>
  <span class="n">Qt</span><span class="o">::</span><span class="n">ItemFlags</span> <span class="n">flags</span> <span class="o">=</span> <span class="n">model</span><span class="o">-&gt;</span><span class="n">flags</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">Qt</span><span class="o">::</span><span class="n">ItemIsUserCheckable</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">Qt</span><span class="o">::</span><span class="n">ItemIsEnabled</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// make sure that we have a check state</span>
  <span class="n">QVariant</span> <span class="n">value</span> <span class="o">=</span> <span class="n">index</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">Qt</span><span class="o">::</span><span class="n">CheckStateRole</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">value</span><span class="p">.</span><span class="n">isValid</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// make sure that we have the right event type</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">()</span> <span class="o">==</span> <span class="n">QEvent</span><span class="o">::</span><span class="n">MouseButtonRelease</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">textMargin</span> <span class="o">=</span> <span class="n">QApplication</span><span class="o">::</span><span class="n">style</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">pixelMetric</span><span class="p">(</span><span class="n">QStyle</span><span class="o">::</span><span class="n">PM_FocusFrameHMargin</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">QRect</span> <span class="n">checkRect</span> <span class="o">=</span> <span class="n">QStyle</span><span class="o">::</span><span class="n">alignedRect</span><span class="p">(</span><span class="n">option</span><span class="p">.</span><span class="n">direction</span><span class="p">,</span> <span class="n">Qt</span><span class="o">::</span><span class="n">AlignCenter</span><span class="p">,</span>
					  <span class="n">option</span><span class="p">.</span><span class="n">decorationSize</span><span class="p">,</span>
					  <span class="n">QRect</span><span class="p">(</span><span class="n">option</span><span class="p">.</span><span class="n">rect</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">+</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">textMargin</span><span class="p">),</span> <span class="n">option</span><span class="p">.</span><span class="n">rect</span><span class="p">.</span><span class="n">y</span><span class="p">(),</span>
						<span class="n">option</span><span class="p">.</span><span class="n">rect</span><span class="p">.</span><span class="n">width</span><span class="p">()</span> <span class="o">-</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">textMargin</span><span class="p">),</span>
						<span class="n">option</span><span class="p">.</span><span class="n">rect</span><span class="p">.</span><span class="n">height</span><span class="p">()));</span>
    <span class="c1">// We handle the mouse event...</span>
    <span class="n">QMouseEvent</span> <span class="o">*</span><span class="n">mEvent</span> <span class="o">=</span> <span class="p">(</span><span class="n">QMouseEvent</span><span class="o">*</span><span class="p">)</span> <span class="n">event</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">checkRect</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">mEvent</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">()))</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// as well as the key press event.</span>
  <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">()</span> <span class="o">==</span> <span class="n">QEvent</span><span class="o">::</span><span class="n">KeyPress</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">QKeyEvent</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">event</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">()</span> <span class="o">!=</span>
	<span class="n">Qt</span><span class="o">::</span><span class="n">Key_Space</span><span class="o">&amp;&amp;</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">QKeyEvent</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">event</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">()</span> <span class="o">!=</span> <span class="n">Qt</span><span class="o">::</span><span class="n">Key_Select</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">// Determine the new check state</span>
  <span class="n">Qt</span><span class="o">::</span><span class="n">CheckState</span> <span class="n">state</span> <span class="o">=</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">Qt</span><span class="o">::</span><span class="n">CheckState</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">.</span><span class="n">toInt</span><span class="p">())</span> <span class="o">==</span> <span class="n">Qt</span><span class="o">::</span><span class="n">Checked</span>
			  <span class="o">?</span> <span class="n">Qt</span><span class="o">::</span><span class="n">Unchecked</span> <span class="o">:</span> <span class="n">Qt</span><span class="o">::</span><span class="n">Checked</span><span class="p">);</span>
  <span class="c1">// And set the new check state by calling the model's setData() function.</span>
  <span class="k">return</span> <span class="n">model</span><span class="o">-&gt;</span><span class="n">setData</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">Qt</span><span class="o">::</span><span class="n">CheckStateRole</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>The re-implemented version of the <code class="language-plaintext highlighter-rouge">paint()</code> function basically just changes the position at which the check box is drawn, by changing the rectangle within which the paint event takes place, and then calling the default version of the <code class="language-plaintext highlighter-rouge">paint()</code> function with an option parameter that includes the altered rectangle.</p>

<p>The re-implemented version of the <code class="language-plaintext highlighter-rouge">editorEvent()</code> function handles various events through which the user might manipulate the current state of the check box. If an event meets the required conditions (e.g., a <code class="language-plaintext highlighter-rouge">QEvent::MouseButtonRelease</code> took place within the rectangle where the check box is drawn), then we call the <code class="language-plaintext highlighter-rouge">setData()</code> function (the one we re-implemented earlier) with the appropriate parameters.</p>

<p>There is actually one other thing we need to do if we want our <a href="http://doc.qt.io/qt-5/qstyleditemdelegate.html">QStyledItemDelegate</a> to work. We need to tell our <a href="http://doc.qt.io/archives/qt-4.8/qtableview.html">QTableView</a> object to use the delegate in its seventh column. In my case, the <a href="http://doc.qt.io/archives/qt-4.8/qtableview.html">QTableView</a> object is named <code class="language-plaintext highlighter-rouge">tableView</code>, and the sub-classed version of the <a href="http://doc.qt.io/qt-5/qstyleditemdelegate.html">QStyledItemDelegate</a> I created is named <code class="language-plaintext highlighter-rouge">CheckBoxDelegate</code>. I set <code class="language-plaintext highlighter-rouge">tableView</code> to use the <code class="language-plaintext highlighter-rouge">CheckBoxDelegate</code> by using the following function:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">tableView</span><span class="o">-&gt;</span><span class="n">setItemDelegateForColumn</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="k">new</span> <span class="nf">CheckBoxDelegate</span><span class="p">(</span><span class="n">tableView</span><span class="p">));</span></code></pre></figure>

<p>And that should do the trick! Now you should have a <a href="http://doc.qt.io/archives/qt-4.8/qtableview.html">QTableView</a> with a nice-looking column of check boxes through which the user can interact with ‘pretend boolean’ variables in your sql database.</p>]]></content><author><name></name></author><category term="Software" /><category term="Q-SoPrA" /><category term="Technical" /><category term="C++" /><category term="Qt" /><summary type="html"><![CDATA[Interfacing with sql databases with Qt5 This post is on an issue that I struggled with very recently, while working on Q-SoPrA. What I wanted to achieve was relatively simple: I wanted to have tables that fetch data from sql databases, and in which one column shows check boxes to set/unset a boolean variable. The screenshot below shows an example. An example table. What you see in the screen shot is QTableView widget that shows data that it fetches from a QSqlTableModel that interfaces with a table of a sqlite database. This post is about how to create the interactive check boxes shown in the right-most column. There are two main hurdles in getting the QTableView widget to work with check boxes: Sqlite databases don’t actually support boolean variables. You can use an integer variable to ‘simulate’ a boolean variable by setting it to 0(for false) or 1 (for true), but you will of course need to do a bit of extra work to make the QSqlTableModel properly treat it as a boolean (or something that can be switched on or off) in read &amp; write operations. This can be done by sub-classing the QSqlTableModel, and re-implementing its flags(), data() and setData() functions, as suggested here. But if you do that, you’ll have a quite ugly looking table, since the check boxes are all left-aligned in their column, with no obvious way to change that. In this case, the only solution seems to be to use a QStyledItemDelegate to handle the paint() function that determines how the column is visualised. A somewhat outdated example of how to do that is offered in the Qt FAQ. For good results in my use-case, where I want to have check boxes that (1) are able to handle a ‘pretend boolean’ variable (a boolean that is actually an integer) from a sqlite database, and (2) are not all aligned to the extreme left of their column, you have to combine the two solutions mentioned above. I haven’t really encountered a worked out example of this combination, which is why I decided to provide one in this post.]]></summary></entry></feed>